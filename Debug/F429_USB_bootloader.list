
F429_USB_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c34  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008de0  08008de0  00009de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e58  08008e58  0000a110  2**0
                  CONTENTS
  4 .ARM          00000008  08008e58  08008e58  00009e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e60  08008e60  0000a110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e60  08008e60  00009e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e64  08008e64  00009e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  08008e68  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a110  2**0
                  CONTENTS
 10 .bss          00010cec  20000110  20000110  0000a110  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20010dfc  20010dfc  0000a110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a08  00000000  00000000  0000a140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cf5  00000000  00000000  0001cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00020840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4a  00000000  00000000  000218d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267c6  00000000  00000000  00022522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000177cf  00000000  00000000  00048ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6757  00000000  00000000  000604b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00136c0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041ec  00000000  00000000  00136c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0013ae40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000110 	.word	0x20000110
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008dc8 	.word	0x08008dc8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000114 	.word	0x20000114
 80001e8:	08008dc8 	.word	0x08008dc8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Data_From_USB_To_Flash>:

#define BIN_SOURCE_ADDR ((uint32_t)0x08100000)
#define BIN_DEST_ADDR   ((uint32_t)0x08010000)

void Data_From_USB_To_Flash(const uint8_t *RAM_buf, uint8_t data_size)
{
 80004dc:	b5b0      	push	{r4, r5, r7, lr}
 80004de:	b08a      	sub	sp, #40	@ 0x28
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	70fb      	strb	r3, [r7, #3]
    //memcpy(RAM_buf, (uint8_t*)BIN_SOURCE_ADDR, BIN_MAX_SIZE);

    HAL_FLASH_Unlock();
 80004e8:	f000 fc56 	bl	8000d98 <HAL_FLASH_Unlock>

    // Очистити сектор (сектор 4 починається з 0x08010000, розмір – 64KB)
    FLASH_EraseInitTypeDef eraseInit;
    uint32_t SectorError;

    eraseInit.TypeErase    = FLASH_TYPEERASE_SECTORS;
 80004ec:	2300      	movs	r3, #0
 80004ee:	613b      	str	r3, [r7, #16]
    eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80004f0:	2302      	movs	r3, #2
 80004f2:	623b      	str	r3, [r7, #32]
    eraseInit.Sector       = FLASH_SECTOR_4;
 80004f4:	2304      	movs	r3, #4
 80004f6:	61bb      	str	r3, [r7, #24]
    eraseInit.NbSectors    = 1;
 80004f8:	2301      	movs	r3, #1
 80004fa:	61fb      	str	r3, [r7, #28]

    if (HAL_FLASHEx_Erase(&eraseInit, &SectorError) != HAL_OK)
 80004fc:	f107 020c 	add.w	r2, r7, #12
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4611      	mov	r1, r2
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fdb8 	bl	800107c <HAL_FLASHEx_Erase>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d002      	beq.n	8000518 <Data_From_USB_To_Flash+0x3c>
    {
        HAL_FLASH_Lock();
 8000512:	f000 fc63 	bl	8000ddc <HAL_FLASH_Lock>
 8000516:	e031      	b.n	800057c <Data_From_USB_To_Flash+0xa0>
        return;
    }

    // Запис байт у флеш по 4 байти
    for (uint32_t i = 0; i < data_size; i += 4)
 8000518:	2300      	movs	r3, #0
 800051a:	627b      	str	r3, [r7, #36]	@ 0x24
 800051c:	e028      	b.n	8000570 <Data_From_USB_To_Flash+0x94>
    {
        uint32_t data;
        memcpy(&data, RAM_buf + i, 4);
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000522:	4413      	add	r3, r2
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	60bb      	str	r3, [r7, #8]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, BIN_DEST_ADDR + i, data) != HAL_OK)
 8000528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800052a:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 800052e:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	2200      	movs	r2, #0
 8000536:	461c      	mov	r4, r3
 8000538:	4615      	mov	r5, r2
 800053a:	4622      	mov	r2, r4
 800053c:	462b      	mov	r3, r5
 800053e:	2002      	movs	r0, #2
 8000540:	f000 fbd6 	bl	8000cf0 <HAL_FLASH_Program>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d00f      	beq.n	800056a <Data_From_USB_To_Flash+0x8e>
        {
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)));
 800054a:	2180      	movs	r1, #128	@ 0x80
 800054c:	480d      	ldr	r0, [pc, #52]	@ (8000584 <Data_From_USB_To_Flash+0xa8>)
 800054e:	f001 f881 	bl	8001654 <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	bf0c      	ite	eq
 8000558:	2301      	moveq	r3, #1
 800055a:	2300      	movne	r3, #0
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	2180      	movs	r1, #128	@ 0x80
 8000562:	4808      	ldr	r0, [pc, #32]	@ (8000584 <Data_From_USB_To_Flash+0xa8>)
 8000564:	f001 f88e 	bl	8001684 <HAL_GPIO_WritePin>
 8000568:	e006      	b.n	8000578 <Data_From_USB_To_Flash+0x9c>
    for (uint32_t i = 0; i < data_size; i += 4)
 800056a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800056c:	3304      	adds	r3, #4
 800056e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000574:	429a      	cmp	r2, r3
 8000576:	d3d2      	bcc.n	800051e <Data_From_USB_To_Flash+0x42>
        	break;
        }
    }

    HAL_FLASH_Lock();
 8000578:	f000 fc30 	bl	8000ddc <HAL_FLASH_Lock>
}
 800057c:	3728      	adds	r7, #40	@ 0x28
 800057e:	46bd      	mov	sp, r7
 8000580:	bdb0      	pop	{r4, r5, r7, pc}
 8000582:	bf00      	nop
 8000584:	40020400 	.word	0x40020400

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fa08 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f81c 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f8bc 	bl	8000710 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000598:	f000 f884 	bl	80006a4 <MX_SPI1_Init>
  MX_FATFS_Init();
 800059c:	f004 fb4c 	bl	8004c38 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80005a0:	f007 fed6 	bl	8008350 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (USB_data_read_flag){
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <main+0x38>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0fb      	beq.n	80005a4 <main+0x1c>
		  Data_From_USB_To_Flash(buffer, sizeof(buffer));
 80005ac:	2100      	movs	r1, #0
 80005ae:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <main+0x3c>)
 80005b0:	f7ff ff94 	bl	80004dc <Data_From_USB_To_Flash>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2180      	movs	r1, #128	@ 0x80
 80005b8:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <main+0x40>)
 80005ba:	f001 f863 	bl	8001684 <HAL_GPIO_WritePin>
	  if (USB_data_read_flag){
 80005be:	e7f1      	b.n	80005a4 <main+0x1c>
 80005c0:	20010184 	.word	0x20010184
 80005c4:	20000184 	.word	0x20000184
 80005c8:	40020400 	.word	0x40020400

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	@ 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f008 fbba 	bl	8008d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b29      	ldr	r3, [pc, #164]	@ (800069c <SystemClock_Config+0xd0>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a28      	ldr	r2, [pc, #160]	@ (800069c <SystemClock_Config+0xd0>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000600:	4b26      	ldr	r3, [pc, #152]	@ (800069c <SystemClock_Config+0xd0>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <SystemClock_Config+0xd4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000618:	4a21      	ldr	r2, [pc, #132]	@ (80006a0 <SystemClock_Config+0xd4>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <SystemClock_Config+0xd4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000630:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000634:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000644:	2378      	movs	r3, #120	@ 0x78
 8000646:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800064c:	2305      	movs	r3, #5
 800064e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f002 faad 	bl	8002bb4 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000660:	f000 f8a6 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000670:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2103      	movs	r1, #3
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fd0e 	bl	80030a4 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800068e:	f000 f88f 	bl	80007b0 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	@ 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a8:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006aa:	4a18      	ldr	r2, [pc, #96]	@ (800070c <MX_SPI1_Init+0x68>)
 80006ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ae:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006f0:	220a      	movs	r2, #10
 80006f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006f6:	f002 fecd 	bl	8003494 <HAL_SPI_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000700:	f000 f856 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000012c 	.word	0x2000012c
 800070c:	40013000 	.word	0x40013000

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <MX_GPIO_Init+0x98>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a1e      	ldr	r2, [pc, #120]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b18      	ldr	r3, [pc, #96]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a17      	ldr	r2, [pc, #92]	@ (80007a8 <MX_GPIO_Init+0x98>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a10      	ldr	r2, [pc, #64]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2180      	movs	r1, #128	@ 0x80
 800077e:	480b      	ldr	r0, [pc, #44]	@ (80007ac <MX_GPIO_Init+0x9c>)
 8000780:	f000 ff80 	bl	8001684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000784:	2380      	movs	r3, #128	@ 0x80
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_GPIO_Init+0x9c>)
 800079c:	f000 fdae 	bl	80012fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020400 	.word	0x40020400

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <Error_Handler+0x8>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <HAL_MspInit+0x58>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ca:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <HAL_MspInit+0x58>)
 80007cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <HAL_MspInit+0x58>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <HAL_MspInit+0x58>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000814 <HAL_MspInit+0x58>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <HAL_MspInit+0x58>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2005      	movs	r0, #5
 8000800:	f000 fa3f 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000804:	2005      	movs	r0, #5
 8000806:	f000 fa58 	bl	8000cba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a19      	ldr	r2, [pc, #100]	@ (800089c <HAL_SPI_MspInit+0x84>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d12b      	bne.n	8000892 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <HAL_SPI_MspInit+0x88>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000842:	4a17      	ldr	r2, [pc, #92]	@ (80008a0 <HAL_SPI_MspInit+0x88>)
 8000844:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000848:	6453      	str	r3, [r2, #68]	@ 0x44
 800084a:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <HAL_SPI_MspInit+0x88>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <HAL_SPI_MspInit+0x88>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a10      	ldr	r2, [pc, #64]	@ (80008a0 <HAL_SPI_MspInit+0x88>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <HAL_SPI_MspInit+0x88>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000872:	23e0      	movs	r3, #224	@ 0xe0
 8000874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000882:	2305      	movs	r3, #5
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <HAL_SPI_MspInit+0x8c>)
 800088e:	f000 fd35 	bl	80012fc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40013000 	.word	0x40013000
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <NMI_Handler+0x4>

080008b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <MemManage_Handler+0x4>

080008c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <UsageFault_Handler+0x4>

080008d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fe:	f000 f8a1 	bl	8000a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}

08000906 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000918:	4802      	ldr	r0, [pc, #8]	@ (8000924 <OTG_FS_IRQHandler+0x10>)
 800091a:	f001 f810 	bl	800193e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200106a0 	.word	0x200106a0

08000928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <SystemInit+0x20>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000932:	4a05      	ldr	r2, [pc, #20]	@ (8000948 <SystemInit+0x20>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000984 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000950:	f7ff ffea 	bl	8000928 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	@ (8000988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	@ (800098c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	@ (8000990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	@ (8000998 <LoopFillZerobss+0x22>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800097a:	f008 f9f3 	bl	8008d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097e:	f7ff fe03 	bl	8000588 <main>
  bx  lr    
 8000982:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000984:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8000990:	08008e68 	.word	0x08008e68
  ldr r2, =_sbss
 8000994:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8000998:	20010dfc 	.word	0x20010dfc

0800099c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a4:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0d      	ldr	r2, [pc, #52]	@ (80009e0 <HAL_Init+0x40>)
 80009aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b0:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <HAL_Init+0x40>)
 80009b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a07      	ldr	r2, [pc, #28]	@ (80009e0 <HAL_Init+0x40>)
 80009c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f94f 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ce:	200f      	movs	r0, #15
 80009d0:	f000 f808 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d4:	f7ff fef2 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023c00 	.word	0x40023c00

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <HAL_InitTick+0x54>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_InitTick+0x58>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f967 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00e      	b.n	8000a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d80a      	bhi.n	8000a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f000 f92f 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a24:	4a06      	ldr	r2, [pc, #24]	@ (8000a40 <HAL_InitTick+0x5c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000004 	.word	0x20000004

08000a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_IncTick+0x20>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_IncTick+0x24>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a04      	ldr	r2, [pc, #16]	@ (8000a68 <HAL_IncTick+0x24>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20010188 	.word	0x20010188

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b03      	ldr	r3, [pc, #12]	@ (8000a80 <HAL_GetTick+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20010188 	.word	0x20010188

08000a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a8c:	f7ff ffee 	bl	8000a6c <HAL_GetTick>
 8000a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a9c:	d005      	beq.n	8000aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <HAL_Delay+0x44>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aaa:	bf00      	nop
 8000aac:	f7ff ffde 	bl	8000a6c <HAL_GetTick>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d8f7      	bhi.n	8000aac <HAL_Delay+0x28>
  {
  }
}
 8000abc:	bf00      	nop
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000008 	.word	0x20000008

08000acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afe:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	60d3      	str	r3, [r2, #12]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <__NVIC_GetPriorityGrouping+0x18>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	f003 0307 	and.w	r3, r3, #7
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	db0b      	blt.n	8000b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 021f 	and.w	r2, r3, #31
 8000b48:	4907      	ldr	r1, [pc, #28]	@ (8000b68 <__NVIC_EnableIRQ+0x38>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	2001      	movs	r0, #1
 8000b52:	fa00 f202 	lsl.w	r2, r0, r2
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	@ (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	@ (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	@ 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	@ 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff8e 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff29 	bl	8000acc <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff3e 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff8e 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5d 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff31 	bl	8000b30 <__NVIC_EnableIRQ>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffa2 	bl	8000c28 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d02:	4b23      	ldr	r3, [pc, #140]	@ (8000d90 <HAL_FLASH_Program+0xa0>)
 8000d04:	7e1b      	ldrb	r3, [r3, #24]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d101      	bne.n	8000d0e <HAL_FLASH_Program+0x1e>
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	e03b      	b.n	8000d86 <HAL_FLASH_Program+0x96>
 8000d0e:	4b20      	ldr	r3, [pc, #128]	@ (8000d90 <HAL_FLASH_Program+0xa0>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d14:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000d18:	f000 f870 	bl	8000dfc <FLASH_WaitForLastOperation>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d12b      	bne.n	8000d7e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d105      	bne.n	8000d38 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000d2c:	783b      	ldrb	r3, [r7, #0]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	68b8      	ldr	r0, [r7, #8]
 8000d32:	f000 f91b 	bl	8000f6c <FLASH_Program_Byte>
 8000d36:	e016      	b.n	8000d66 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d105      	bne.n	8000d4a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000d3e:	883b      	ldrh	r3, [r7, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	68b8      	ldr	r0, [r7, #8]
 8000d44:	f000 f8ee 	bl	8000f24 <FLASH_Program_HalfWord>
 8000d48:	e00d      	b.n	8000d66 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d105      	bne.n	8000d5c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	4619      	mov	r1, r3
 8000d54:	68b8      	ldr	r0, [r7, #8]
 8000d56:	f000 f8c3 	bl	8000ee0 <FLASH_Program_Word>
 8000d5a:	e004      	b.n	8000d66 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d60:	68b8      	ldr	r0, [r7, #8]
 8000d62:	f000 f88b 	bl	8000e7c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d66:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000d6a:	f000 f847 	bl	8000dfc <FLASH_WaitForLastOperation>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <HAL_FLASH_Program+0xa4>)
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	4a07      	ldr	r2, [pc, #28]	@ (8000d94 <HAL_FLASH_Program+0xa4>)
 8000d78:	f023 0301 	bic.w	r3, r3, #1
 8000d7c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d7e:	4b04      	ldr	r3, [pc, #16]	@ (8000d90 <HAL_FLASH_Program+0xa0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	761a      	strb	r2, [r3, #24]

  return status;
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2001018c 	.word	0x2001018c
 8000d94:	40023c00 	.word	0x40023c00

08000d98 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <HAL_FLASH_Unlock+0x38>)
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	da0b      	bge.n	8000dc2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <HAL_FLASH_Unlock+0x38>)
 8000dac:	4a09      	ldr	r2, [pc, #36]	@ (8000dd4 <HAL_FLASH_Unlock+0x3c>)
 8000dae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <HAL_FLASH_Unlock+0x38>)
 8000db2:	4a09      	ldr	r2, [pc, #36]	@ (8000dd8 <HAL_FLASH_Unlock+0x40>)
 8000db4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_FLASH_Unlock+0x38>)
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	da01      	bge.n	8000dc2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40023c00 	.word	0x40023c00
 8000dd4:	45670123 	.word	0x45670123
 8000dd8:	cdef89ab 	.word	0xcdef89ab

08000ddc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <HAL_FLASH_Lock+0x1c>)
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <HAL_FLASH_Lock+0x1c>)
 8000de6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000dea:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <FLASH_WaitForLastOperation+0x78>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000e0e:	f7ff fe2d 	bl	8000a6c <HAL_GetTick>
 8000e12:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8000e14:	e010      	b.n	8000e38 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d00c      	beq.n	8000e38 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d007      	beq.n	8000e34 <FLASH_WaitForLastOperation+0x38>
 8000e24:	f7ff fe22 	bl	8000a6c <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d201      	bcs.n	8000e38 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e019      	b.n	8000e6c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <FLASH_WaitForLastOperation+0x7c>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1e8      	bne.n	8000e16 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <FLASH_WaitForLastOperation+0x7c>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d002      	beq.n	8000e56 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e50:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <FLASH_WaitForLastOperation+0x7c>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000e56:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <FLASH_WaitForLastOperation+0x7c>)
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e62:	f000 f8a5 	bl	8000fb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0

}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	2001018c 	.word	0x2001018c
 8000e78:	40023c00 	.word	0x40023c00

08000e7c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000e88:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <FLASH_Program_DoubleWord+0x60>)
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	4a13      	ldr	r2, [pc, #76]	@ (8000edc <FLASH_Program_DoubleWord+0x60>)
 8000e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000e92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000e94:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <FLASH_Program_DoubleWord+0x60>)
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <FLASH_Program_DoubleWord+0x60>)
 8000e9a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000e9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <FLASH_Program_DoubleWord+0x60>)
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <FLASH_Program_DoubleWord+0x60>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8000eb2:	f3bf 8f6f 	isb	sy
}
 8000eb6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8000eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	000a      	movs	r2, r1
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	68f9      	ldr	r1, [r7, #12]
 8000eca:	3104      	adds	r1, #4
 8000ecc:	4613      	mov	r3, r2
 8000ece:	600b      	str	r3, [r1, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	40023c00 	.word	0x40023c00

08000ee0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000eea:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <FLASH_Program_Word+0x40>)
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	4a0c      	ldr	r2, [pc, #48]	@ (8000f20 <FLASH_Program_Word+0x40>)
 8000ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000ef4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <FLASH_Program_Word+0x40>)
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	4a09      	ldr	r2, [pc, #36]	@ (8000f20 <FLASH_Program_Word+0x40>)
 8000efc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <FLASH_Program_Word+0x40>)
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <FLASH_Program_Word+0x40>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f30:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <FLASH_Program_HalfWord+0x44>)
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	4a0c      	ldr	r2, [pc, #48]	@ (8000f68 <FLASH_Program_HalfWord+0x44>)
 8000f36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000f3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <FLASH_Program_HalfWord+0x44>)
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	4a09      	ldr	r2, [pc, #36]	@ (8000f68 <FLASH_Program_HalfWord+0x44>)
 8000f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f48:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <FLASH_Program_HalfWord+0x44>)
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	4a06      	ldr	r2, [pc, #24]	@ (8000f68 <FLASH_Program_HalfWord+0x44>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	801a      	strh	r2, [r3, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <FLASH_Program_Byte+0x40>)
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fac <FLASH_Program_Byte+0x40>)
 8000f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000f82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <FLASH_Program_Byte+0x40>)
 8000f86:	4a09      	ldr	r2, [pc, #36]	@ (8000fac <FLASH_Program_Byte+0x40>)
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <FLASH_Program_Byte+0x40>)
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	4a06      	ldr	r2, [pc, #24]	@ (8000fac <FLASH_Program_Byte+0x40>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	78fa      	ldrb	r2, [r7, #3]
 8000f9c:	701a      	strb	r2, [r3, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001074 <FLASH_SetErrorCode+0xc4>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	f003 0310 	and.w	r3, r3, #16
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d008      	beq.n	8000fd2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001078 <FLASH_SetErrorCode+0xc8>)
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	f043 0310 	orr.w	r3, r3, #16
 8000fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8001078 <FLASH_SetErrorCode+0xc8>)
 8000fca:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000fcc:	4b29      	ldr	r3, [pc, #164]	@ (8001074 <FLASH_SetErrorCode+0xc4>)
 8000fce:	2210      	movs	r2, #16
 8000fd0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000fd2:	4b28      	ldr	r3, [pc, #160]	@ (8001074 <FLASH_SetErrorCode+0xc4>)
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f003 0320 	and.w	r3, r3, #32
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000fde:	4b26      	ldr	r3, [pc, #152]	@ (8001078 <FLASH_SetErrorCode+0xc8>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f043 0308 	orr.w	r3, r3, #8
 8000fe6:	4a24      	ldr	r2, [pc, #144]	@ (8001078 <FLASH_SetErrorCode+0xc8>)
 8000fe8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000fea:	4b22      	ldr	r3, [pc, #136]	@ (8001074 <FLASH_SetErrorCode+0xc4>)
 8000fec:	2220      	movs	r2, #32
 8000fee:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000ff0:	4b20      	ldr	r3, [pc, #128]	@ (8001074 <FLASH_SetErrorCode+0xc4>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d008      	beq.n	800100e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8001078 <FLASH_SetErrorCode+0xc8>)
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	4a1c      	ldr	r2, [pc, #112]	@ (8001078 <FLASH_SetErrorCode+0xc8>)
 8001006:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001008:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <FLASH_SetErrorCode+0xc4>)
 800100a:	2240      	movs	r2, #64	@ 0x40
 800100c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <FLASH_SetErrorCode+0xc4>)
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001016:	2b00      	cmp	r3, #0
 8001018:	d008      	beq.n	800102c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800101a:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <FLASH_SetErrorCode+0xc8>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	4a15      	ldr	r2, [pc, #84]	@ (8001078 <FLASH_SetErrorCode+0xc8>)
 8001024:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001026:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <FLASH_SetErrorCode+0xc4>)
 8001028:	2280      	movs	r2, #128	@ 0x80
 800102a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <FLASH_SetErrorCode+0xc4>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001034:	2b00      	cmp	r3, #0
 8001036:	d009      	beq.n	800104c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <FLASH_SetErrorCode+0xc8>)
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	4a0d      	ldr	r2, [pc, #52]	@ (8001078 <FLASH_SetErrorCode+0xc8>)
 8001042:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <FLASH_SetErrorCode+0xc4>)
 8001046:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800104a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <FLASH_SetErrorCode+0xc4>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d008      	beq.n	800106a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <FLASH_SetErrorCode+0xc8>)
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <FLASH_SetErrorCode+0xc8>)
 8001062:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001064:	4b03      	ldr	r3, [pc, #12]	@ (8001074 <FLASH_SetErrorCode+0xc4>)
 8001066:	2202      	movs	r2, #2
 8001068:	60da      	str	r2, [r3, #12]
  }
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	40023c00 	.word	0x40023c00
 8001078:	2001018c 	.word	0x2001018c

0800107c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800108e:	4b32      	ldr	r3, [pc, #200]	@ (8001158 <HAL_FLASHEx_Erase+0xdc>)
 8001090:	7e1b      	ldrb	r3, [r3, #24]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d101      	bne.n	800109a <HAL_FLASHEx_Erase+0x1e>
 8001096:	2302      	movs	r3, #2
 8001098:	e05a      	b.n	8001150 <HAL_FLASHEx_Erase+0xd4>
 800109a:	4b2f      	ldr	r3, [pc, #188]	@ (8001158 <HAL_FLASHEx_Erase+0xdc>)
 800109c:	2201      	movs	r2, #1
 800109e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010a4:	f7ff feaa 	bl	8000dfc <FLASH_WaitForLastOperation>
 80010a8:	4603      	mov	r3, r0
 80010aa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d14a      	bne.n	8001148 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d117      	bne.n	80010f2 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4610      	mov	r0, r2
 80010d0:	f000 f846 	bl	8001160 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010d8:	f7ff fe90 	bl	8000dfc <FLASH_WaitForLastOperation>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80010e0:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <HAL_FLASHEx_Erase+0xe0>)
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	4a1d      	ldr	r2, [pc, #116]	@ (800115c <HAL_FLASHEx_Erase+0xe0>)
 80010e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80010ea:	f023 0304 	bic.w	r3, r3, #4
 80010ee:	6113      	str	r3, [r2, #16]
 80010f0:	e028      	b.n	8001144 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	e01c      	b.n	8001134 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4619      	mov	r1, r3
 8001102:	68b8      	ldr	r0, [r7, #8]
 8001104:	f000 f866 	bl	80011d4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001108:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800110c:	f7ff fe76 	bl	8000dfc <FLASH_WaitForLastOperation>
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <HAL_FLASHEx_Erase+0xe0>)
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	4a10      	ldr	r2, [pc, #64]	@ (800115c <HAL_FLASHEx_Erase+0xe0>)
 800111a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800111e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	601a      	str	r2, [r3, #0]
          break;
 800112c:	e00a      	b.n	8001144 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	3301      	adds	r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	4413      	add	r3, r2
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	429a      	cmp	r2, r3
 8001142:	d3da      	bcc.n	80010fa <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001144:	f000 f894 	bl	8001270 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <HAL_FLASHEx_Erase+0xdc>)
 800114a:	2200      	movs	r2, #0
 800114c:	761a      	strb	r2, [r3, #24]

  return status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2001018c 	.word	0x2001018c
 800115c:	40023c00 	.word	0x40023c00

08001160 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800116c:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <FLASH_MassErase+0x70>)
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	4a17      	ldr	r2, [pc, #92]	@ (80011d0 <FLASH_MassErase+0x70>)
 8001172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001176:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d108      	bne.n	8001190 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800117e:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <FLASH_MassErase+0x70>)
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	4a13      	ldr	r2, [pc, #76]	@ (80011d0 <FLASH_MassErase+0x70>)
 8001184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6113      	str	r3, [r2, #16]
 800118e:	e00f      	b.n	80011b0 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d106      	bne.n	80011a4 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <FLASH_MassErase+0x70>)
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	4a0d      	ldr	r2, [pc, #52]	@ (80011d0 <FLASH_MassErase+0x70>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6113      	str	r3, [r2, #16]
 80011a2:	e005      	b.n	80011b0 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <FLASH_MassErase+0x70>)
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	4a09      	ldr	r2, [pc, #36]	@ (80011d0 <FLASH_MassErase+0x70>)
 80011aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011ae:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80011b0:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <FLASH_MassErase+0x70>)
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	4313      	orrs	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <FLASH_MassErase+0x70>)
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c0:	6113      	str	r3, [r2, #16]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023c00 	.word	0x40023c00

080011d4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	e010      	b.n	8001212 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d103      	bne.n	80011fe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80011f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	e009      	b.n	8001212 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d103      	bne.n	800120c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001204:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	e002      	b.n	8001212 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800120c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001210:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0b      	cmp	r3, #11
 8001216:	d902      	bls.n	800121e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3304      	adds	r3, #4
 800121c:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800121e:	4b13      	ldr	r3, [pc, #76]	@ (800126c <FLASH_Erase_Sector+0x98>)
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	4a12      	ldr	r2, [pc, #72]	@ (800126c <FLASH_Erase_Sector+0x98>)
 8001224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001228:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <FLASH_Erase_Sector+0x98>)
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	490f      	ldr	r1, [pc, #60]	@ (800126c <FLASH_Erase_Sector+0x98>)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001236:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <FLASH_Erase_Sector+0x98>)
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	4a0c      	ldr	r2, [pc, #48]	@ (800126c <FLASH_Erase_Sector+0x98>)
 800123c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001240:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001242:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <FLASH_Erase_Sector+0x98>)
 8001244:	691a      	ldr	r2, [r3, #16]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4313      	orrs	r3, r2
 800124c:	4a07      	ldr	r2, [pc, #28]	@ (800126c <FLASH_Erase_Sector+0x98>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <FLASH_Erase_Sector+0x98>)
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	4a04      	ldr	r2, [pc, #16]	@ (800126c <FLASH_Erase_Sector+0x98>)
 800125a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800125e:	6113      	str	r3, [r2, #16]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40023c00 	.word	0x40023c00

08001270 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001274:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800127c:	2b00      	cmp	r3, #0
 800127e:	d017      	beq.n	80012b0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1c      	ldr	r2, [pc, #112]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 8001286:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800128a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800128c:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a19      	ldr	r2, [pc, #100]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 8001292:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a16      	ldr	r2, [pc, #88]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 800129e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80012a2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a4:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a13      	ldr	r2, [pc, #76]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ae:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d017      	beq.n	80012ec <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80012bc:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 80012c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80012c6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80012c8:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 80012ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a07      	ldr	r2, [pc, #28]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 80012da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012de:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a04      	ldr	r2, [pc, #16]	@ (80012f8 <FLASH_FlushCaches+0x88>)
 80012e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ea:	6013      	str	r3, [r2, #0]
  }
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023c00 	.word	0x40023c00

080012fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	@ 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
 8001316:	e177      	b.n	8001608 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001318:	2201      	movs	r2, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	429a      	cmp	r2, r3
 8001332:	f040 8166 	bne.w	8001602 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	2b01      	cmp	r3, #1
 8001340:	d005      	beq.n	800134e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800134a:	2b02      	cmp	r3, #2
 800134c:	d130      	bne.n	80013b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	68da      	ldr	r2, [r3, #12]
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	091b      	lsrs	r3, r3, #4
 800139a:	f003 0201 	and.w	r2, r3, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d017      	beq.n	80013ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d123      	bne.n	8001440 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	08da      	lsrs	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3208      	adds	r2, #8
 8001400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	220f      	movs	r2, #15
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	08da      	lsrs	r2, r3, #3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3208      	adds	r2, #8
 800143a:	69b9      	ldr	r1, [r7, #24]
 800143c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0203 	and.w	r2, r3, #3
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 80c0 	beq.w	8001602 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b66      	ldr	r3, [pc, #408]	@ (8001620 <HAL_GPIO_Init+0x324>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	4a65      	ldr	r2, [pc, #404]	@ (8001620 <HAL_GPIO_Init+0x324>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001490:	6453      	str	r3, [r2, #68]	@ 0x44
 8001492:	4b63      	ldr	r3, [pc, #396]	@ (8001620 <HAL_GPIO_Init+0x324>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800149e:	4a61      	ldr	r2, [pc, #388]	@ (8001624 <HAL_GPIO_Init+0x328>)
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	3302      	adds	r3, #2
 80014a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a58      	ldr	r2, [pc, #352]	@ (8001628 <HAL_GPIO_Init+0x32c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d037      	beq.n	800153a <HAL_GPIO_Init+0x23e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a57      	ldr	r2, [pc, #348]	@ (800162c <HAL_GPIO_Init+0x330>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d031      	beq.n	8001536 <HAL_GPIO_Init+0x23a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a56      	ldr	r2, [pc, #344]	@ (8001630 <HAL_GPIO_Init+0x334>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d02b      	beq.n	8001532 <HAL_GPIO_Init+0x236>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a55      	ldr	r2, [pc, #340]	@ (8001634 <HAL_GPIO_Init+0x338>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d025      	beq.n	800152e <HAL_GPIO_Init+0x232>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a54      	ldr	r2, [pc, #336]	@ (8001638 <HAL_GPIO_Init+0x33c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d01f      	beq.n	800152a <HAL_GPIO_Init+0x22e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a53      	ldr	r2, [pc, #332]	@ (800163c <HAL_GPIO_Init+0x340>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x22a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a52      	ldr	r2, [pc, #328]	@ (8001640 <HAL_GPIO_Init+0x344>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x226>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a51      	ldr	r2, [pc, #324]	@ (8001644 <HAL_GPIO_Init+0x348>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x222>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a50      	ldr	r2, [pc, #320]	@ (8001648 <HAL_GPIO_Init+0x34c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x21e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4f      	ldr	r2, [pc, #316]	@ (800164c <HAL_GPIO_Init+0x350>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x21a>
 8001512:	2309      	movs	r3, #9
 8001514:	e012      	b.n	800153c <HAL_GPIO_Init+0x240>
 8001516:	230a      	movs	r3, #10
 8001518:	e010      	b.n	800153c <HAL_GPIO_Init+0x240>
 800151a:	2308      	movs	r3, #8
 800151c:	e00e      	b.n	800153c <HAL_GPIO_Init+0x240>
 800151e:	2307      	movs	r3, #7
 8001520:	e00c      	b.n	800153c <HAL_GPIO_Init+0x240>
 8001522:	2306      	movs	r3, #6
 8001524:	e00a      	b.n	800153c <HAL_GPIO_Init+0x240>
 8001526:	2305      	movs	r3, #5
 8001528:	e008      	b.n	800153c <HAL_GPIO_Init+0x240>
 800152a:	2304      	movs	r3, #4
 800152c:	e006      	b.n	800153c <HAL_GPIO_Init+0x240>
 800152e:	2303      	movs	r3, #3
 8001530:	e004      	b.n	800153c <HAL_GPIO_Init+0x240>
 8001532:	2302      	movs	r3, #2
 8001534:	e002      	b.n	800153c <HAL_GPIO_Init+0x240>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_GPIO_Init+0x240>
 800153a:	2300      	movs	r3, #0
 800153c:	69fa      	ldr	r2, [r7, #28]
 800153e:	f002 0203 	and.w	r2, r2, #3
 8001542:	0092      	lsls	r2, r2, #2
 8001544:	4093      	lsls	r3, r2
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800154c:	4935      	ldr	r1, [pc, #212]	@ (8001624 <HAL_GPIO_Init+0x328>)
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155a:	4b3d      	ldr	r3, [pc, #244]	@ (8001650 <HAL_GPIO_Init+0x354>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800157e:	4a34      	ldr	r2, [pc, #208]	@ (8001650 <HAL_GPIO_Init+0x354>)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001584:	4b32      	ldr	r3, [pc, #200]	@ (8001650 <HAL_GPIO_Init+0x354>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a8:	4a29      	ldr	r2, [pc, #164]	@ (8001650 <HAL_GPIO_Init+0x354>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ae:	4b28      	ldr	r3, [pc, #160]	@ (8001650 <HAL_GPIO_Init+0x354>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001650 <HAL_GPIO_Init+0x354>)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001650 <HAL_GPIO_Init+0x354>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015fc:	4a14      	ldr	r2, [pc, #80]	@ (8001650 <HAL_GPIO_Init+0x354>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3301      	adds	r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	2b0f      	cmp	r3, #15
 800160c:	f67f ae84 	bls.w	8001318 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3724      	adds	r7, #36	@ 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	40013800 	.word	0x40013800
 8001628:	40020000 	.word	0x40020000
 800162c:	40020400 	.word	0x40020400
 8001630:	40020800 	.word	0x40020800
 8001634:	40020c00 	.word	0x40020c00
 8001638:	40021000 	.word	0x40021000
 800163c:	40021400 	.word	0x40021400
 8001640:	40021800 	.word	0x40021800
 8001644:	40021c00 	.word	0x40021c00
 8001648:	40022000 	.word	0x40022000
 800164c:	40022400 	.word	0x40022400
 8001650:	40013c00 	.word	0x40013c00

08001654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e001      	b.n	8001676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
 8001690:	4613      	mov	r3, r2
 8001692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001694:	787b      	ldrb	r3, [r7, #1]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016a0:	e003      	b.n	80016aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016a2:	887b      	ldrh	r3, [r7, #2]
 80016a4:	041a      	lsls	r2, r3, #16
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	619a      	str	r2, [r3, #24]
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af02      	add	r7, sp, #8
 80016bc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e101      	b.n	80018cc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d106      	bne.n	80016e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f007 f802 	bl	80086ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2203      	movs	r2, #3
 80016ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016f6:	d102      	bne.n	80016fe <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f002 f867 	bl	80037d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7c1a      	ldrb	r2, [r3, #16]
 8001710:	f88d 2000 	strb.w	r2, [sp]
 8001714:	3304      	adds	r3, #4
 8001716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001718:	f001 ff45 	bl	80035a6 <USB_CoreInit>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d005      	beq.n	800172e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2202      	movs	r2, #2
 8001726:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e0ce      	b.n	80018cc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f002 f85f 	bl	80037f8 <USB_SetCurrentMode>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2202      	movs	r2, #2
 8001744:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0bf      	b.n	80018cc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e04a      	b.n	80017e8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	3315      	adds	r3, #21
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	3314      	adds	r3, #20
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	b298      	uxth	r0, r3
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	332e      	adds	r3, #46	@ 0x2e
 800178e:	4602      	mov	r2, r0
 8001790:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	3318      	adds	r3, #24
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	331c      	adds	r3, #28
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	3320      	adds	r3, #32
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	3324      	adds	r3, #36	@ 0x24
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	3301      	adds	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	791b      	ldrb	r3, [r3, #4]
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d3af      	bcc.n	8001752 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	e044      	b.n	8001882 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001820:	7bfa      	ldrb	r2, [r7, #15]
 8001822:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	3301      	adds	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	791b      	ldrb	r3, [r3, #4]
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	429a      	cmp	r2, r3
 800188a:	d3b5      	bcc.n	80017f8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7c1a      	ldrb	r2, [r3, #16]
 8001894:	f88d 2000 	strb.w	r2, [sp]
 8001898:	3304      	adds	r3, #4
 800189a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800189c:	f001 fff8 	bl	8003890 <USB_DevInit>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d005      	beq.n	80018b2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2202      	movs	r2, #2
 80018aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00c      	b.n	80018cc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 f842 	bl	800494e <USB_DevDisconnect>

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <HAL_PCD_Start+0x1c>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e022      	b.n	8001936 <HAL_PCD_Start+0x62>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001900:	2b00      	cmp	r3, #0
 8001902:	d009      	beq.n	8001918 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001910:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f001 ff49 	bl	80037b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f002 fff0 	bl	800490c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800193e:	b590      	push	{r4, r7, lr}
 8001940:	b08d      	sub	sp, #52	@ 0x34
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f003 f8ae 	bl	8004ab6 <USB_GetMode>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	f040 848c 	bne.w	800227a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f003 f812 	bl	8004990 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 8482 	beq.w	8002278 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f002 ffff 	bl	8004990 <USB_ReadInterrupts>
 8001992:	4603      	mov	r3, r0
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b02      	cmp	r3, #2
 800199a:	d107      	bne.n	80019ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f002 0202 	and.w	r2, r2, #2
 80019aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 ffed 	bl	8004990 <USB_ReadInterrupts>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	2b10      	cmp	r3, #16
 80019be:	d161      	bne.n	8001a84 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699a      	ldr	r2, [r3, #24]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0210 	bic.w	r2, r2, #16
 80019ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f003 020f 	and.w	r2, r3, #15
 80019dc:	4613      	mov	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	4413      	add	r3, r2
 80019ec:	3304      	adds	r3, #4
 80019ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	0c5b      	lsrs	r3, r3, #17
 80019f4:	f003 030f 	and.w	r3, r3, #15
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d124      	bne.n	8001a46 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d035      	beq.n	8001a74 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	461a      	mov	r2, r3
 8001a1a:	6a38      	ldr	r0, [r7, #32]
 8001a1c:	f002 fe24 	bl	8004668 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a2c:	441a      	add	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a3e:	441a      	add	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	615a      	str	r2, [r3, #20]
 8001a44:	e016      	b.n	8001a74 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	0c5b      	lsrs	r3, r3, #17
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d110      	bne.n	8001a74 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001a58:	2208      	movs	r2, #8
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6a38      	ldr	r0, [r7, #32]
 8001a5e:	f002 fe03 	bl	8004668 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a6e:	441a      	add	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0210 	orr.w	r2, r2, #16
 8001a82:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f002 ff81 	bl	8004990 <USB_ReadInterrupts>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001a98:	f040 80a7 	bne.w	8001bea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 ff86 	bl	80049b6 <USB_ReadDevAllOutEpInterrupt>
 8001aaa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001aac:	e099      	b.n	8001be2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 808e 	beq.w	8001bd6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 ffaa 	bl	8004a1e <USB_ReadDevOutEPInterrupt>
 8001aca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00c      	beq.n	8001af0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	015a      	lsls	r2, r3, #5
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ae8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fed0 	bl	8002890 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00c      	beq.n	8001b14 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	015a      	lsls	r2, r3, #5
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b06:	461a      	mov	r2, r3
 8001b08:	2308      	movs	r3, #8
 8001b0a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 ffa6 	bl	8002a60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d008      	beq.n	8001b30 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2310      	movs	r3, #16
 8001b2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d030      	beq.n	8001b9c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b42:	2b80      	cmp	r3, #128	@ 0x80
 8001b44:	d109      	bne.n	8001b5a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b58:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	78db      	ldrb	r3, [r3, #3]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d108      	bne.n	8001b8a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f006 feb7 	bl	80088f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	015a      	lsls	r2, r3, #5
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b96:	461a      	mov	r2, r3
 8001b98:	2302      	movs	r3, #2
 8001b9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	f003 0320 	and.w	r3, r3, #32
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d008      	beq.n	8001bb8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	015a      	lsls	r2, r3, #5
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	015a      	lsls	r2, r3, #5
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bd4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	3301      	adds	r3, #1
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bde:	085b      	lsrs	r3, r3, #1
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f47f af62 	bne.w	8001aae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f002 fece 	bl	8004990 <USB_ReadInterrupts>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bfa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001bfe:	f040 80db 	bne.w	8001db8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 feef 	bl	80049ea <USB_ReadDevAllInEpInterrupt>
 8001c0c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001c12:	e0cd      	b.n	8001db0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80c2 	beq.w	8001da4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 ff15 	bl	8004a5a <USB_ReadDevInEPInterrupt>
 8001c30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d057      	beq.n	8001cec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	2201      	movs	r2, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69f9      	ldr	r1, [r7, #28]
 8001c58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	015a      	lsls	r2, r3, #5
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2301      	movs	r3, #1
 8001c70:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	799b      	ldrb	r3, [r3, #6]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d132      	bne.n	8001ce0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	3320      	adds	r3, #32
 8001c8a:	6819      	ldr	r1, [r3, #0]
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4403      	add	r3, r0
 8001c9a:	331c      	adds	r3, #28
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4419      	add	r1, r3
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4403      	add	r3, r0
 8001cae:	3320      	adds	r3, #32
 8001cb0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d113      	bne.n	8001ce0 <HAL_PCD_IRQHandler+0x3a2>
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3324      	adds	r3, #36	@ 0x24
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d108      	bne.n	8001ce0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001cd8:	461a      	mov	r2, r3
 8001cda:	2101      	movs	r1, #1
 8001cdc:	f002 ff1c 	bl	8004b18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f006 fd81 	bl	80087ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d008      	beq.n	8001d08 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d02:	461a      	mov	r2, r3
 8001d04:	2308      	movs	r3, #8
 8001d06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d008      	beq.n	8001d24 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2310      	movs	r3, #16
 8001d22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d008      	beq.n	8001d40 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	015a      	lsls	r2, r3, #5
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2340      	movs	r3, #64	@ 0x40
 8001d3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d023      	beq.n	8001d92 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001d4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d4c:	6a38      	ldr	r0, [r7, #32]
 8001d4e:	f001 ff03 	bl	8003b58 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	3310      	adds	r3, #16
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	3304      	adds	r3, #4
 8001d64:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	78db      	ldrb	r3, [r3, #3]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d108      	bne.n	8001d80 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2200      	movs	r2, #0
 8001d72:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f006 fdce 	bl	800891c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2302      	movs	r3, #2
 8001d90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fcea 	bl	8002778 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da6:	3301      	adds	r3, #1
 8001da8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f47f af2e 	bne.w	8001c14 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f002 fde7 	bl	8004990 <USB_ReadInterrupts>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001dcc:	d122      	bne.n	8001e14 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d108      	bne.n	8001dfe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001df4:	2100      	movs	r1, #0
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fed0 	bl	8002b9c <HAL_PCDEx_LPM_Callback>
 8001dfc:	e002      	b.n	8001e04 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f006 fd6c 	bl	80088dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001e12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f002 fdb9 	bl	8004990 <USB_ReadInterrupts>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e28:	d112      	bne.n	8001e50 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d102      	bne.n	8001e40 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f006 fd28 	bl	8008890 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001e4e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f002 fd9b 	bl	8004990 <USB_ReadInterrupts>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e64:	f040 80b7 	bne.w	8001fd6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2110      	movs	r1, #16
 8001e82:	4618      	mov	r0, r3
 8001e84:	f001 fe68 	bl	8003b58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e8c:	e046      	b.n	8001f1c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001ea0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001eb2:	0151      	lsls	r1, r2, #5
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	440a      	add	r2, r1
 8001eb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001ebc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001ec0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001ed4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ee6:	0151      	lsls	r1, r2, #5
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	440a      	add	r2, r1
 8001eec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001ef0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001ef4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef8:	015a      	lsls	r2, r3, #5
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f06:	0151      	lsls	r1, r2, #5
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	440a      	add	r2, r1
 8001f0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001f10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f18:	3301      	adds	r3, #1
 8001f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	791b      	ldrb	r3, [r3, #4]
 8001f20:	461a      	mov	r2, r3
 8001f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d3b2      	bcc.n	8001e8e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f36:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001f3a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7bdb      	ldrb	r3, [r3, #15]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d016      	beq.n	8001f72 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f54:	f043 030b 	orr.w	r3, r3, #11
 8001f58:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f6a:	f043 030b 	orr.w	r3, r3, #11
 8001f6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f70:	e015      	b.n	8001f9e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f84:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001f88:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f98:	f043 030b 	orr.w	r3, r3, #11
 8001f9c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fac:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001fb0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f002 fda9 	bl	8004b18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695a      	ldr	r2, [r3, #20]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f002 fcd8 	bl	8004990 <USB_ReadInterrupts>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fea:	d123      	bne.n	8002034 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f002 fd6e 	bl	8004ad2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 fe25 	bl	8003c4a <USB_GetDevSpeed>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681c      	ldr	r4, [r3, #0]
 800200c:	f001 fa36 	bl	800347c <HAL_RCC_GetHCLKFreq>
 8002010:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002016:	461a      	mov	r2, r3
 8002018:	4620      	mov	r0, r4
 800201a:	f001 fb29 	bl	8003670 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f006 fc0d 	bl	800883e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002032:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f002 fca9 	bl	8004990 <USB_ReadInterrupts>
 800203e:	4603      	mov	r3, r0
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b08      	cmp	r3, #8
 8002046:	d10a      	bne.n	800205e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f006 fbea 	bl	8008822 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f002 0208 	and.w	r2, r2, #8
 800205c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f002 fc94 	bl	8004990 <USB_ReadInterrupts>
 8002068:	4603      	mov	r3, r0
 800206a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206e:	2b80      	cmp	r3, #128	@ 0x80
 8002070:	d123      	bne.n	80020ba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800207e:	2301      	movs	r3, #1
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
 8002082:	e014      	b.n	80020ae <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	4619      	mov	r1, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fb0a 	bl	80026bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	3301      	adds	r3, #1
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	791b      	ldrb	r3, [r3, #4]
 80020b2:	461a      	mov	r2, r3
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d3e4      	bcc.n	8002084 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f002 fc66 	bl	8004990 <USB_ReadInterrupts>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020ce:	d13c      	bne.n	800214a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020d0:	2301      	movs	r3, #1
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020d4:	e02b      	b.n	800212e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	3318      	adds	r3, #24
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d115      	bne.n	8002128 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80020fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da12      	bge.n	8002128 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	3317      	adds	r3, #23
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800211e:	b2db      	uxtb	r3, r3
 8002120:	4619      	mov	r1, r3
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 faca 	bl	80026bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	3301      	adds	r3, #1
 800212c:	627b      	str	r3, [r7, #36]	@ 0x24
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	791b      	ldrb	r3, [r3, #4]
 8002132:	461a      	mov	r2, r3
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	4293      	cmp	r3, r2
 8002138:	d3cd      	bcc.n	80020d6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002148:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f002 fc1e 	bl	8004990 <USB_ReadInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800215a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800215e:	d156      	bne.n	800220e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002160:	2301      	movs	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
 8002164:	e045      	b.n	80021f2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d12e      	bne.n	80021ec <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800218e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002190:	2b00      	cmp	r3, #0
 8002192:	da2b      	bge.n	80021ec <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80021a0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d121      	bne.n	80021ec <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10a      	bne.n	80021ec <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021e8:	6053      	str	r3, [r2, #4]
            break;
 80021ea:	e008      	b.n	80021fe <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	3301      	adds	r3, #1
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	791b      	ldrb	r3, [r3, #4]
 80021f6:	461a      	mov	r2, r3
 80021f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d3b3      	bcc.n	8002166 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800220c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f002 fbbc 	bl	8004990 <USB_ReadInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800221e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002222:	d10a      	bne.n	800223a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f006 fb8b 	bl	8008940 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002238:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f002 fba6 	bl	8004990 <USB_ReadInterrupts>
 8002244:	4603      	mov	r3, r0
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b04      	cmp	r3, #4
 800224c:	d115      	bne.n	800227a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f006 fb7b 	bl	800895c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	e000      	b.n	800227a <HAL_PCD_IRQHandler+0x93c>
      return;
 8002278:	bf00      	nop
    }
  }
}
 800227a:	3734      	adds	r7, #52	@ 0x34
 800227c:	46bd      	mov	sp, r7
 800227e:	bd90      	pop	{r4, r7, pc}

08002280 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_PCD_SetAddress+0x1a>
 8002296:	2302      	movs	r3, #2
 8002298:	e012      	b.n	80022c0 <HAL_PCD_SetAddress+0x40>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f002 fb05 	bl	80048c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	4608      	mov	r0, r1
 80022d2:	4611      	mov	r1, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	70fb      	strb	r3, [r7, #3]
 80022da:	460b      	mov	r3, r1
 80022dc:	803b      	strh	r3, [r7, #0]
 80022de:	4613      	mov	r3, r2
 80022e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	da0f      	bge.n	800230e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	f003 020f 	and.w	r2, r3, #15
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	3310      	adds	r3, #16
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	3304      	adds	r3, #4
 8002304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	705a      	strb	r2, [r3, #1]
 800230c:	e00f      	b.n	800232e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	f003 020f 	and.w	r2, r3, #15
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	3304      	adds	r3, #4
 8002326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	b2da      	uxtb	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800233a:	883b      	ldrh	r3, [r7, #0]
 800233c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	78ba      	ldrb	r2, [r7, #2]
 8002348:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	785b      	ldrb	r3, [r3, #1]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d004      	beq.n	800235c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800235c:	78bb      	ldrb	r3, [r7, #2]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d102      	bne.n	8002368 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_PCD_EP_Open+0xae>
 8002372:	2302      	movs	r3, #2
 8002374:	e00e      	b.n	8002394 <HAL_PCD_EP_Open+0xcc>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	4618      	mov	r0, r3
 8002386:	f001 fc85 	bl	8003c94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002392:	7afb      	ldrb	r3, [r7, #11]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	da0f      	bge.n	80023d0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	f003 020f 	and.w	r2, r3, #15
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	3310      	adds	r3, #16
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	3304      	adds	r3, #4
 80023c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2201      	movs	r2, #1
 80023cc:	705a      	strb	r2, [r3, #1]
 80023ce:	e00f      	b.n	80023f0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	f003 020f 	and.w	r2, r3, #15
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	3304      	adds	r3, #4
 80023e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_PCD_EP_Close+0x6e>
 8002406:	2302      	movs	r3, #2
 8002408:	e00e      	b.n	8002428 <HAL_PCD_EP_Close+0x8c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68f9      	ldr	r1, [r7, #12]
 8002418:	4618      	mov	r0, r3
 800241a:	f001 fcc3 	bl	8003da4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	460b      	mov	r3, r1
 800243e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002440:	7afb      	ldrb	r3, [r7, #11]
 8002442:	f003 020f 	and.w	r2, r3, #15
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4413      	add	r3, r2
 8002456:	3304      	adds	r3, #4
 8002458:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2200      	movs	r2, #0
 800246a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2200      	movs	r2, #0
 8002470:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002472:	7afb      	ldrb	r3, [r7, #11]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	b2da      	uxtb	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	799b      	ldrb	r3, [r3, #6]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d102      	bne.n	800248c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	799b      	ldrb	r3, [r3, #6]
 8002494:	461a      	mov	r2, r3
 8002496:	6979      	ldr	r1, [r7, #20]
 8002498:	f001 fd60 	bl	8003f5c <USB_EPStartXfer>

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	f003 020f 	and.w	r2, r3, #15
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80024c8:	681b      	ldr	r3, [r3, #0]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	460b      	mov	r3, r1
 80024e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e6:	7afb      	ldrb	r3, [r7, #11]
 80024e8:	f003 020f 	and.w	r2, r3, #15
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	3310      	adds	r3, #16
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4413      	add	r3, r2
 80024fa:	3304      	adds	r3, #4
 80024fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2200      	movs	r2, #0
 800250e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2201      	movs	r2, #1
 8002514:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002516:	7afb      	ldrb	r3, [r7, #11]
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	b2da      	uxtb	r2, r3
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	799b      	ldrb	r3, [r3, #6]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d102      	bne.n	8002530 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	799b      	ldrb	r3, [r3, #6]
 8002538:	461a      	mov	r2, r3
 800253a:	6979      	ldr	r1, [r7, #20]
 800253c:	f001 fd0e 	bl	8003f5c <USB_EPStartXfer>

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	7912      	ldrb	r2, [r2, #4]
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e04f      	b.n	8002608 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800256c:	2b00      	cmp	r3, #0
 800256e:	da0f      	bge.n	8002590 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	f003 020f 	and.w	r2, r3, #15
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	3310      	adds	r3, #16
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	4413      	add	r3, r2
 8002584:	3304      	adds	r3, #4
 8002586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2201      	movs	r2, #1
 800258c:	705a      	strb	r2, [r3, #1]
 800258e:	e00d      	b.n	80025ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	3304      	adds	r3, #4
 80025a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_PCD_EP_SetStall+0x82>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e01d      	b.n	8002608 <HAL_PCD_EP_SetStall+0xbe>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68f9      	ldr	r1, [r7, #12]
 80025da:	4618      	mov	r0, r3
 80025dc:	f002 f89c 	bl	8004718 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7999      	ldrb	r1, [r3, #6]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025f8:	461a      	mov	r2, r3
 80025fa:	f002 fa8d 	bl	8004b18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	7912      	ldrb	r2, [r2, #4]
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e042      	b.n	80026b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800262e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002632:	2b00      	cmp	r3, #0
 8002634:	da0f      	bge.n	8002656 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	f003 020f 	and.w	r2, r3, #15
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	3310      	adds	r3, #16
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	3304      	adds	r3, #4
 800264c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	705a      	strb	r2, [r3, #1]
 8002654:	e00f      	b.n	8002676 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	f003 020f 	and.w	r2, r3, #15
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	4413      	add	r3, r2
 800266c:	3304      	adds	r3, #4
 800266e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	b2da      	uxtb	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_PCD_EP_ClrStall+0x86>
 8002692:	2302      	movs	r3, #2
 8002694:	e00e      	b.n	80026b4 <HAL_PCD_EP_ClrStall+0xa4>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 f8a5 	bl	80047f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80026c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	da0c      	bge.n	80026ea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	f003 020f 	and.w	r2, r3, #15
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	3310      	adds	r3, #16
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	3304      	adds	r3, #4
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	e00c      	b.n	8002704 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	f003 020f 	and.w	r2, r3, #15
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	4413      	add	r3, r2
 8002700:	3304      	adds	r3, #4
 8002702:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68f9      	ldr	r1, [r7, #12]
 800270a:	4618      	mov	r0, r3
 800270c:	f001 fec4 	bl	8004498 <USB_EPStopXfer>
 8002710:	4603      	mov	r3, r0
 8002712:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002714:	7afb      	ldrb	r3, [r7, #11]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	460b      	mov	r3, r1
 8002728:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_PCD_EP_Flush+0x1a>
 8002734:	2302      	movs	r3, #2
 8002736:	e01b      	b.n	8002770 <HAL_PCD_EP_Flush+0x52>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8002740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002744:	2b00      	cmp	r3, #0
 8002746:	da09      	bge.n	800275c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	4619      	mov	r1, r3
 8002754:	4610      	mov	r0, r2
 8002756:	f001 f9ff 	bl	8003b58 <USB_FlushTxFifo>
 800275a:	e004      	b.n	8002766 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f001 fa2b 	bl	8003bbc <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	@ 0x28
 800277c:	af02      	add	r7, sp, #8
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	3310      	adds	r3, #16
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	3304      	adds	r3, #4
 800279e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d901      	bls.n	80027b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e06b      	b.n	8002888 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d902      	bls.n	80027cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	3303      	adds	r3, #3
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027d4:	e02a      	b.n	800282c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d902      	bls.n	80027f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3303      	adds	r3, #3
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	68d9      	ldr	r1, [r3, #12]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	4603      	mov	r3, r0
 800280e:	6978      	ldr	r0, [r7, #20]
 8002810:	f001 feec 	bl	80045ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	441a      	add	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	441a      	add	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	429a      	cmp	r2, r3
 8002840:	d809      	bhi.n	8002856 <PCD_WriteEmptyTxFifo+0xde>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800284a:	429a      	cmp	r2, r3
 800284c:	d203      	bcs.n	8002856 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1bf      	bne.n	80027d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	429a      	cmp	r2, r3
 8002860:	d811      	bhi.n	8002886 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	2201      	movs	r2, #1
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002876:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	43db      	mvns	r3, r3
 800287c:	6939      	ldr	r1, [r7, #16]
 800287e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002882:	4013      	ands	r3, r2
 8002884:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3720      	adds	r7, #32
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	333c      	adds	r3, #60	@ 0x3c
 80028a8:	3304      	adds	r3, #4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	799b      	ldrb	r3, [r3, #6]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d17b      	bne.n	80029be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d015      	beq.n	80028fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	4a61      	ldr	r2, [pc, #388]	@ (8002a58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	f240 80b9 	bls.w	8002a4c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80b3 	beq.w	8002a4c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028f2:	461a      	mov	r2, r3
 80028f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028f8:	6093      	str	r3, [r2, #8]
 80028fa:	e0a7      	b.n	8002a4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4413      	add	r3, r2
 800290e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002912:	461a      	mov	r2, r3
 8002914:	2320      	movs	r3, #32
 8002916:	6093      	str	r3, [r2, #8]
 8002918:	e098      	b.n	8002a4c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002920:	2b00      	cmp	r3, #0
 8002922:	f040 8093 	bne.w	8002a4c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	4a4b      	ldr	r2, [pc, #300]	@ (8002a58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d90f      	bls.n	800294e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	4413      	add	r3, r2
 8002940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002944:	461a      	mov	r2, r3
 8002946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800294a:	6093      	str	r3, [r2, #8]
 800294c:	e07e      	b.n	8002a4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4413      	add	r3, r2
 8002960:	3304      	adds	r3, #4
 8002962:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a1a      	ldr	r2, [r3, #32]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	0159      	lsls	r1, r3, #5
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	440b      	add	r3, r1
 8002970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	1ad2      	subs	r2, r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d114      	bne.n	80029b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002998:	461a      	mov	r2, r3
 800299a:	2101      	movs	r1, #1
 800299c:	f002 f8bc 	bl	8004b18 <USB_EP0_OutStart>
 80029a0:	e006      	b.n	80029b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	441a      	add	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	4619      	mov	r1, r3
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f005 fefe 	bl	80087b8 <HAL_PCD_DataOutStageCallback>
 80029bc:	e046      	b.n	8002a4c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	4a26      	ldr	r2, [pc, #152]	@ (8002a5c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d124      	bne.n	8002a10 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029dc:	461a      	mov	r2, r3
 80029de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029e2:	6093      	str	r3, [r2, #8]
 80029e4:	e032      	b.n	8002a4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029fc:	461a      	mov	r2, r3
 80029fe:	2320      	movs	r3, #32
 8002a00:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	4619      	mov	r1, r3
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f005 fed5 	bl	80087b8 <HAL_PCD_DataOutStageCallback>
 8002a0e:	e01d      	b.n	8002a4c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d114      	bne.n	8002a40 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d108      	bne.n	8002a40 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	f002 f86c 	bl	8004b18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	4619      	mov	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f005 feb6 	bl	80087b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	4f54300a 	.word	0x4f54300a
 8002a5c:	4f54310a 	.word	0x4f54310a

08002a60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	333c      	adds	r3, #60	@ 0x3c
 8002a78:	3304      	adds	r3, #4
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4a15      	ldr	r2, [pc, #84]	@ (8002ae8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d90e      	bls.n	8002ab4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d009      	beq.n	8002ab4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aac:	461a      	mov	r2, r3
 8002aae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ab2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f005 fe6d 	bl	8008794 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d90c      	bls.n	8002adc <PCD_EP_OutSetupPacket_int+0x7c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	799b      	ldrb	r3, [r3, #6]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d108      	bne.n	8002adc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	f002 f81e 	bl	8004b18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	4f54300a 	.word	0x4f54300a

08002aec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	70fb      	strb	r3, [r7, #3]
 8002af8:	4613      	mov	r3, r2
 8002afa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d107      	bne.n	8002b1a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b0a:	883b      	ldrh	r3, [r7, #0]
 8002b0c:	0419      	lsls	r1, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b18:	e028      	b.n	8002b6c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	4413      	add	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b28:	2300      	movs	r3, #0
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	e00d      	b.n	8002b4a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	3340      	adds	r3, #64	@ 0x40
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	0c1b      	lsrs	r3, r3, #16
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	4413      	add	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	3301      	adds	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d3ec      	bcc.n	8002b2e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b54:	883b      	ldrh	r3, [r7, #0]
 8002b56:	0418      	lsls	r0, r3, #16
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6819      	ldr	r1, [r3, #0]
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	4302      	orrs	r2, r0
 8002b64:	3340      	adds	r3, #64	@ 0x40
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e267      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d075      	beq.n	8002cbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bd2:	4b88      	ldr	r3, [pc, #544]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bde:	4b85      	ldr	r3, [pc, #532]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d112      	bne.n	8002c10 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bea:	4b82      	ldr	r3, [pc, #520]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bf2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bf6:	d10b      	bne.n	8002c10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf8:	4b7e      	ldr	r3, [pc, #504]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d05b      	beq.n	8002cbc <HAL_RCC_OscConfig+0x108>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d157      	bne.n	8002cbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e242      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c18:	d106      	bne.n	8002c28 <HAL_RCC_OscConfig+0x74>
 8002c1a:	4b76      	ldr	r3, [pc, #472]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a75      	ldr	r2, [pc, #468]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e01d      	b.n	8002c64 <HAL_RCC_OscConfig+0xb0>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x98>
 8002c32:	4b70      	ldr	r3, [pc, #448]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a6f      	ldr	r2, [pc, #444]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	4b6d      	ldr	r3, [pc, #436]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a6c      	ldr	r2, [pc, #432]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCC_OscConfig+0xb0>
 8002c4c:	4b69      	ldr	r3, [pc, #420]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a68      	ldr	r2, [pc, #416]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	4b66      	ldr	r3, [pc, #408]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a65      	ldr	r2, [pc, #404]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d013      	beq.n	8002c94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6c:	f7fd fefe 	bl	8000a6c <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fd fefa 	bl	8000a6c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	@ 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e207      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	4b5b      	ldr	r3, [pc, #364]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0xc0>
 8002c92:	e014      	b.n	8002cbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7fd feea 	bl	8000a6c <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7fd fee6 	bl	8000a6c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	@ 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e1f3      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	4b51      	ldr	r3, [pc, #324]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0xe8>
 8002cba:	e000      	b.n	8002cbe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d063      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cca:	4b4a      	ldr	r3, [pc, #296]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd6:	4b47      	ldr	r3, [pc, #284]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d11c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce2:	4b44      	ldr	r3, [pc, #272]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d116      	bne.n	8002d1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cee:	4b41      	ldr	r3, [pc, #260]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <HAL_RCC_OscConfig+0x152>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d001      	beq.n	8002d06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e1c7      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d06:	4b3b      	ldr	r3, [pc, #236]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4937      	ldr	r1, [pc, #220]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	e03a      	b.n	8002d92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d020      	beq.n	8002d66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d24:	4b34      	ldr	r3, [pc, #208]	@ (8002df8 <HAL_RCC_OscConfig+0x244>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fd fe9f 	bl	8000a6c <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d32:	f7fd fe9b 	bl	8000a6c <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e1a8      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	4b2b      	ldr	r3, [pc, #172]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d50:	4b28      	ldr	r3, [pc, #160]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4925      	ldr	r1, [pc, #148]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
 8002d64:	e015      	b.n	8002d92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d66:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <HAL_RCC_OscConfig+0x244>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fd fe7e 	bl	8000a6c <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d74:	f7fd fe7a 	bl	8000a6c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e187      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d036      	beq.n	8002e0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d016      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da6:	4b15      	ldr	r3, [pc, #84]	@ (8002dfc <HAL_RCC_OscConfig+0x248>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dac:	f7fd fe5e 	bl	8000a6c <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fd fe5a 	bl	8000a6c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e167      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x200>
 8002dd2:	e01b      	b.n	8002e0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd4:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <HAL_RCC_OscConfig+0x248>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dda:	f7fd fe47 	bl	8000a6c <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	e00e      	b.n	8002e00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de2:	f7fd fe43 	bl	8000a6c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d907      	bls.n	8002e00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e150      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
 8002df4:	40023800 	.word	0x40023800
 8002df8:	42470000 	.word	0x42470000
 8002dfc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	4b88      	ldr	r3, [pc, #544]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ea      	bne.n	8002de2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8097 	beq.w	8002f48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4b81      	ldr	r3, [pc, #516]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	4b7d      	ldr	r3, [pc, #500]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	4a7c      	ldr	r2, [pc, #496]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e46:	2301      	movs	r3, #1
 8002e48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4a:	4b77      	ldr	r3, [pc, #476]	@ (8003028 <HAL_RCC_OscConfig+0x474>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d118      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e56:	4b74      	ldr	r3, [pc, #464]	@ (8003028 <HAL_RCC_OscConfig+0x474>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a73      	ldr	r2, [pc, #460]	@ (8003028 <HAL_RCC_OscConfig+0x474>)
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e62:	f7fd fe03 	bl	8000a6c <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6a:	f7fd fdff 	bl	8000a6c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e10c      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003028 <HAL_RCC_OscConfig+0x474>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x2ea>
 8002e90:	4b64      	ldr	r3, [pc, #400]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e94:	4a63      	ldr	r2, [pc, #396]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e9c:	e01c      	b.n	8002ed8 <HAL_RCC_OscConfig+0x324>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b05      	cmp	r3, #5
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x30c>
 8002ea6:	4b5f      	ldr	r3, [pc, #380]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eaa:	4a5e      	ldr	r2, [pc, #376]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002eac:	f043 0304 	orr.w	r3, r3, #4
 8002eb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb6:	4a5b      	ldr	r2, [pc, #364]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ebe:	e00b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x324>
 8002ec0:	4b58      	ldr	r3, [pc, #352]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec4:	4a57      	ldr	r2, [pc, #348]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ecc:	4b55      	ldr	r3, [pc, #340]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed0:	4a54      	ldr	r2, [pc, #336]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002ed2:	f023 0304 	bic.w	r3, r3, #4
 8002ed6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d015      	beq.n	8002f0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	f7fd fdc4 	bl	8000a6c <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee8:	f7fd fdc0 	bl	8000a6c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e0cb      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efe:	4b49      	ldr	r3, [pc, #292]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0ee      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x334>
 8002f0a:	e014      	b.n	8002f36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0c:	f7fd fdae 	bl	8000a6c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fd fdaa 	bl	8000a6c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0b5      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1ee      	bne.n	8002f14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3c:	4b39      	ldr	r3, [pc, #228]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	4a38      	ldr	r2, [pc, #224]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80a1 	beq.w	8003094 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f52:	4b34      	ldr	r3, [pc, #208]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d05c      	beq.n	8003018 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d141      	bne.n	8002fea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f66:	4b31      	ldr	r3, [pc, #196]	@ (800302c <HAL_RCC_OscConfig+0x478>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fd fd7e 	bl	8000a6c <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fd fd7a 	bl	8000a6c <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e087      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	4b27      	ldr	r3, [pc, #156]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa0:	019b      	lsls	r3, r3, #6
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	3b01      	subs	r3, #1
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb4:	061b      	lsls	r3, r3, #24
 8002fb6:	491b      	ldr	r1, [pc, #108]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800302c <HAL_RCC_OscConfig+0x478>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fd fd53 	bl	8000a6c <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fca:	f7fd fd4f 	bl	8000a6c <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e05c      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fdc:	4b11      	ldr	r3, [pc, #68]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x416>
 8002fe8:	e054      	b.n	8003094 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fea:	4b10      	ldr	r3, [pc, #64]	@ (800302c <HAL_RCC_OscConfig+0x478>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fd fd3c 	bl	8000a6c <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7fd fd38 	bl	8000a6c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e045      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300a:	4b06      	ldr	r3, [pc, #24]	@ (8003024 <HAL_RCC_OscConfig+0x470>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x444>
 8003016:	e03d      	b.n	8003094 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d107      	bne.n	8003030 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e038      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
 8003024:	40023800 	.word	0x40023800
 8003028:	40007000 	.word	0x40007000
 800302c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003030:	4b1b      	ldr	r3, [pc, #108]	@ (80030a0 <HAL_RCC_OscConfig+0x4ec>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d028      	beq.n	8003090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d121      	bne.n	8003090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d11a      	bne.n	8003090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003060:	4013      	ands	r3, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003066:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003068:	4293      	cmp	r3, r2
 800306a:	d111      	bne.n	8003090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003076:	085b      	lsrs	r3, r3, #1
 8003078:	3b01      	subs	r3, #1
 800307a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d107      	bne.n	8003090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800

080030a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0cc      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b8:	4b68      	ldr	r3, [pc, #416]	@ (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d90c      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b65      	ldr	r3, [pc, #404]	@ (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b63      	ldr	r3, [pc, #396]	@ (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0b8      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f8:	4b59      	ldr	r3, [pc, #356]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a58      	ldr	r2, [pc, #352]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003102:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003110:	4b53      	ldr	r3, [pc, #332]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4a52      	ldr	r2, [pc, #328]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800311a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b50      	ldr	r3, [pc, #320]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	494d      	ldr	r1, [pc, #308]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d044      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b47      	ldr	r3, [pc, #284]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d119      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e07f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d003      	beq.n	8003162 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315e:	2b03      	cmp	r3, #3
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003162:	4b3f      	ldr	r3, [pc, #252]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e06f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	4b3b      	ldr	r3, [pc, #236]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e067      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003182:	4b37      	ldr	r3, [pc, #220]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f023 0203 	bic.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4934      	ldr	r1, [pc, #208]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003194:	f7fd fc6a 	bl	8000a6c <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319c:	f7fd fc66 	bl	8000a6c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e04f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 020c 	and.w	r2, r3, #12
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1eb      	bne.n	800319c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c4:	4b25      	ldr	r3, [pc, #148]	@ (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d20c      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b22      	ldr	r3, [pc, #136]	@ (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b20      	ldr	r3, [pc, #128]	@ (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e032      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f8:	4b19      	ldr	r3, [pc, #100]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4916      	ldr	r1, [pc, #88]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003216:	4b12      	ldr	r3, [pc, #72]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	490e      	ldr	r1, [pc, #56]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800322a:	f000 f821 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	490a      	ldr	r1, [pc, #40]	@ (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	4a09      	ldr	r2, [pc, #36]	@ (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003246:	4b09      	ldr	r3, [pc, #36]	@ (800326c <HAL_RCC_ClockConfig+0x1c8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd fbca 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023c00 	.word	0x40023c00
 8003260:	40023800 	.word	0x40023800
 8003264:	08008e24 	.word	0x08008e24
 8003268:	20000000 	.word	0x20000000
 800326c:	20000004 	.word	0x20000004

08003270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003274:	b094      	sub	sp, #80	@ 0x50
 8003276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003288:	4b79      	ldr	r3, [pc, #484]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b08      	cmp	r3, #8
 8003292:	d00d      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003294:	2b08      	cmp	r3, #8
 8003296:	f200 80e1 	bhi.w	800345c <HAL_RCC_GetSysClockFreq+0x1ec>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x34>
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0x3a>
 80032a2:	e0db      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b73      	ldr	r3, [pc, #460]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x204>)
 80032a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032a8:	e0db      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032aa:	4b73      	ldr	r3, [pc, #460]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x208>)
 80032ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032ae:	e0d8      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d063      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	099b      	lsrs	r3, r3, #6
 80032cc:	2200      	movs	r2, #0
 80032ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80032da:	2300      	movs	r3, #0
 80032dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80032de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032e2:	4622      	mov	r2, r4
 80032e4:	462b      	mov	r3, r5
 80032e6:	f04f 0000 	mov.w	r0, #0
 80032ea:	f04f 0100 	mov.w	r1, #0
 80032ee:	0159      	lsls	r1, r3, #5
 80032f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f4:	0150      	lsls	r0, r2, #5
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4621      	mov	r1, r4
 80032fc:	1a51      	subs	r1, r2, r1
 80032fe:	6139      	str	r1, [r7, #16]
 8003300:	4629      	mov	r1, r5
 8003302:	eb63 0301 	sbc.w	r3, r3, r1
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003314:	4659      	mov	r1, fp
 8003316:	018b      	lsls	r3, r1, #6
 8003318:	4651      	mov	r1, sl
 800331a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800331e:	4651      	mov	r1, sl
 8003320:	018a      	lsls	r2, r1, #6
 8003322:	4651      	mov	r1, sl
 8003324:	ebb2 0801 	subs.w	r8, r2, r1
 8003328:	4659      	mov	r1, fp
 800332a:	eb63 0901 	sbc.w	r9, r3, r1
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800333a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800333e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003342:	4690      	mov	r8, r2
 8003344:	4699      	mov	r9, r3
 8003346:	4623      	mov	r3, r4
 8003348:	eb18 0303 	adds.w	r3, r8, r3
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	462b      	mov	r3, r5
 8003350:	eb49 0303 	adc.w	r3, r9, r3
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003362:	4629      	mov	r1, r5
 8003364:	024b      	lsls	r3, r1, #9
 8003366:	4621      	mov	r1, r4
 8003368:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800336c:	4621      	mov	r1, r4
 800336e:	024a      	lsls	r2, r1, #9
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003376:	2200      	movs	r2, #0
 8003378:	62bb      	str	r3, [r7, #40]	@ 0x28
 800337a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800337c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003380:	f7fc ff34 	bl	80001ec <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4613      	mov	r3, r2
 800338a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800338c:	e058      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338e:	4b38      	ldr	r3, [pc, #224]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	099b      	lsrs	r3, r3, #6
 8003394:	2200      	movs	r2, #0
 8003396:	4618      	mov	r0, r3
 8003398:	4611      	mov	r1, r2
 800339a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800339e:	623b      	str	r3, [r7, #32]
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033a8:	4642      	mov	r2, r8
 80033aa:	464b      	mov	r3, r9
 80033ac:	f04f 0000 	mov.w	r0, #0
 80033b0:	f04f 0100 	mov.w	r1, #0
 80033b4:	0159      	lsls	r1, r3, #5
 80033b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ba:	0150      	lsls	r0, r2, #5
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4641      	mov	r1, r8
 80033c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033c6:	4649      	mov	r1, r9
 80033c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033e0:	ebb2 040a 	subs.w	r4, r2, sl
 80033e4:	eb63 050b 	sbc.w	r5, r3, fp
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	00eb      	lsls	r3, r5, #3
 80033f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033f6:	00e2      	lsls	r2, r4, #3
 80033f8:	4614      	mov	r4, r2
 80033fa:	461d      	mov	r5, r3
 80033fc:	4643      	mov	r3, r8
 80033fe:	18e3      	adds	r3, r4, r3
 8003400:	603b      	str	r3, [r7, #0]
 8003402:	464b      	mov	r3, r9
 8003404:	eb45 0303 	adc.w	r3, r5, r3
 8003408:	607b      	str	r3, [r7, #4]
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003416:	4629      	mov	r1, r5
 8003418:	028b      	lsls	r3, r1, #10
 800341a:	4621      	mov	r1, r4
 800341c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003420:	4621      	mov	r1, r4
 8003422:	028a      	lsls	r2, r1, #10
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800342a:	2200      	movs	r2, #0
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	61fa      	str	r2, [r7, #28]
 8003430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003434:	f7fc feda 	bl	80001ec <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4613      	mov	r3, r2
 800343e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	0c1b      	lsrs	r3, r3, #16
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	3301      	adds	r3, #1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003450:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800345a:	e002      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x204>)
 800345e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003464:	4618      	mov	r0, r3
 8003466:	3750      	adds	r7, #80	@ 0x50
 8003468:	46bd      	mov	sp, r7
 800346a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800
 8003474:	00f42400 	.word	0x00f42400
 8003478:	007a1200 	.word	0x007a1200

0800347c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003480:	4b03      	ldr	r3, [pc, #12]	@ (8003490 <HAL_RCC_GetHCLKFreq+0x14>)
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000000 	.word	0x20000000

08003494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e07b      	b.n	800359e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d108      	bne.n	80034c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034b6:	d009      	beq.n	80034cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	61da      	str	r2, [r3, #28]
 80034be:	e005      	b.n	80034cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd f996 	bl	8000818 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003502:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003550:	ea42 0103 	orr.w	r1, r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003558:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	f003 0104 	and.w	r1, r3, #4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	f003 0210 	and.w	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800358c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035a6:	b084      	sub	sp, #16
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	f107 001c 	add.w	r0, r7, #28
 80035b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035b8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d123      	bne.n	8003608 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80035d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035e8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d105      	bne.n	80035fc <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f001 fae9 	bl	8004bd4 <USB_CoreReset>
 8003602:	4603      	mov	r3, r0
 8003604:	73fb      	strb	r3, [r7, #15]
 8003606:	e01b      	b.n	8003640 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f001 fadd 	bl	8004bd4 <USB_CoreReset>
 800361a:	4603      	mov	r3, r0
 800361c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800361e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800362a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	639a      	str	r2, [r3, #56]	@ 0x38
 8003632:	e005      	b.n	8003640 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003638:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003640:	7fbb      	ldrb	r3, [r7, #30]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d10b      	bne.n	800365e <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f043 0206 	orr.w	r2, r3, #6
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f043 0220 	orr.w	r2, r3, #32
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800366a:	b004      	add	sp, #16
 800366c:	4770      	bx	lr
	...

08003670 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d165      	bne.n	8003750 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4a41      	ldr	r2, [pc, #260]	@ (800378c <USB_SetTurnaroundTime+0x11c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d906      	bls.n	800369a <USB_SetTurnaroundTime+0x2a>
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4a40      	ldr	r2, [pc, #256]	@ (8003790 <USB_SetTurnaroundTime+0x120>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d202      	bcs.n	800369a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003694:	230f      	movs	r3, #15
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	e062      	b.n	8003760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4a3c      	ldr	r2, [pc, #240]	@ (8003790 <USB_SetTurnaroundTime+0x120>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d306      	bcc.n	80036b0 <USB_SetTurnaroundTime+0x40>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4a3b      	ldr	r2, [pc, #236]	@ (8003794 <USB_SetTurnaroundTime+0x124>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d202      	bcs.n	80036b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80036aa:	230e      	movs	r3, #14
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	e057      	b.n	8003760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4a38      	ldr	r2, [pc, #224]	@ (8003794 <USB_SetTurnaroundTime+0x124>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d306      	bcc.n	80036c6 <USB_SetTurnaroundTime+0x56>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4a37      	ldr	r2, [pc, #220]	@ (8003798 <USB_SetTurnaroundTime+0x128>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d202      	bcs.n	80036c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80036c0:	230d      	movs	r3, #13
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e04c      	b.n	8003760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4a33      	ldr	r2, [pc, #204]	@ (8003798 <USB_SetTurnaroundTime+0x128>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d306      	bcc.n	80036dc <USB_SetTurnaroundTime+0x6c>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4a32      	ldr	r2, [pc, #200]	@ (800379c <USB_SetTurnaroundTime+0x12c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d802      	bhi.n	80036dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80036d6:	230c      	movs	r3, #12
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	e041      	b.n	8003760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4a2f      	ldr	r2, [pc, #188]	@ (800379c <USB_SetTurnaroundTime+0x12c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d906      	bls.n	80036f2 <USB_SetTurnaroundTime+0x82>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4a2e      	ldr	r2, [pc, #184]	@ (80037a0 <USB_SetTurnaroundTime+0x130>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d802      	bhi.n	80036f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80036ec:	230b      	movs	r3, #11
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	e036      	b.n	8003760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4a2a      	ldr	r2, [pc, #168]	@ (80037a0 <USB_SetTurnaroundTime+0x130>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d906      	bls.n	8003708 <USB_SetTurnaroundTime+0x98>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4a29      	ldr	r2, [pc, #164]	@ (80037a4 <USB_SetTurnaroundTime+0x134>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d802      	bhi.n	8003708 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003702:	230a      	movs	r3, #10
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	e02b      	b.n	8003760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4a26      	ldr	r2, [pc, #152]	@ (80037a4 <USB_SetTurnaroundTime+0x134>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d906      	bls.n	800371e <USB_SetTurnaroundTime+0xae>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4a25      	ldr	r2, [pc, #148]	@ (80037a8 <USB_SetTurnaroundTime+0x138>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d202      	bcs.n	800371e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003718:	2309      	movs	r3, #9
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	e020      	b.n	8003760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4a21      	ldr	r2, [pc, #132]	@ (80037a8 <USB_SetTurnaroundTime+0x138>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d306      	bcc.n	8003734 <USB_SetTurnaroundTime+0xc4>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4a20      	ldr	r2, [pc, #128]	@ (80037ac <USB_SetTurnaroundTime+0x13c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d802      	bhi.n	8003734 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800372e:	2308      	movs	r3, #8
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	e015      	b.n	8003760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4a1d      	ldr	r2, [pc, #116]	@ (80037ac <USB_SetTurnaroundTime+0x13c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d906      	bls.n	800374a <USB_SetTurnaroundTime+0xda>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4a1c      	ldr	r2, [pc, #112]	@ (80037b0 <USB_SetTurnaroundTime+0x140>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d202      	bcs.n	800374a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003744:	2307      	movs	r3, #7
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	e00a      	b.n	8003760 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800374a:	2306      	movs	r3, #6
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	e007      	b.n	8003760 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d102      	bne.n	800375c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003756:	2309      	movs	r3, #9
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	e001      	b.n	8003760 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800375c:	2309      	movs	r3, #9
 800375e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	029b      	lsls	r3, r3, #10
 8003774:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003778:	431a      	orrs	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	00d8acbf 	.word	0x00d8acbf
 8003790:	00e4e1c0 	.word	0x00e4e1c0
 8003794:	00f42400 	.word	0x00f42400
 8003798:	01067380 	.word	0x01067380
 800379c:	011a499f 	.word	0x011a499f
 80037a0:	01312cff 	.word	0x01312cff
 80037a4:	014ca43f 	.word	0x014ca43f
 80037a8:	016e3600 	.word	0x016e3600
 80037ac:	01a6ab1f 	.word	0x01a6ab1f
 80037b0:	01e84800 	.word	0x01e84800

080037b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f043 0201 	orr.w	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f023 0201 	bic.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d115      	bne.n	8003846 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003826:	200a      	movs	r0, #10
 8003828:	f7fd f92c 	bl	8000a84 <HAL_Delay>
      ms += 10U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	330a      	adds	r3, #10
 8003830:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f001 f93f 	bl	8004ab6 <USB_GetMode>
 8003838:	4603      	mov	r3, r0
 800383a:	2b01      	cmp	r3, #1
 800383c:	d01e      	beq.n	800387c <USB_SetCurrentMode+0x84>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2bc7      	cmp	r3, #199	@ 0xc7
 8003842:	d9f0      	bls.n	8003826 <USB_SetCurrentMode+0x2e>
 8003844:	e01a      	b.n	800387c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d115      	bne.n	8003878 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003858:	200a      	movs	r0, #10
 800385a:	f7fd f913 	bl	8000a84 <HAL_Delay>
      ms += 10U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	330a      	adds	r3, #10
 8003862:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f001 f926 	bl	8004ab6 <USB_GetMode>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <USB_SetCurrentMode+0x84>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2bc7      	cmp	r3, #199	@ 0xc7
 8003874:	d9f0      	bls.n	8003858 <USB_SetCurrentMode+0x60>
 8003876:	e001      	b.n	800387c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e005      	b.n	8003888 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2bc8      	cmp	r3, #200	@ 0xc8
 8003880:	d101      	bne.n	8003886 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003890:	b084      	sub	sp, #16
 8003892:	b580      	push	{r7, lr}
 8003894:	b086      	sub	sp, #24
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800389e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	e009      	b.n	80038c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	3340      	adds	r3, #64	@ 0x40
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	2200      	movs	r2, #0
 80038bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	3301      	adds	r3, #1
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b0e      	cmp	r3, #14
 80038c8:	d9f2      	bls.n	80038b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11c      	bne.n	800390c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038e0:	f043 0302 	orr.w	r3, r3, #2
 80038e4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003902:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	639a      	str	r2, [r3, #56]	@ 0x38
 800390a:	e00b      	b.n	8003924 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003910:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800392a:	461a      	mov	r2, r3
 800392c:	2300      	movs	r3, #0
 800392e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003930:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003934:	2b01      	cmp	r3, #1
 8003936:	d10d      	bne.n	8003954 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003940:	2100      	movs	r1, #0
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f968 	bl	8003c18 <USB_SetDevSpeed>
 8003948:	e008      	b.n	800395c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800394a:	2101      	movs	r1, #1
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f963 	bl	8003c18 <USB_SetDevSpeed>
 8003952:	e003      	b.n	800395c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003954:	2103      	movs	r1, #3
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f95e 	bl	8003c18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800395c:	2110      	movs	r1, #16
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f8fa 	bl	8003b58 <USB_FlushTxFifo>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f924 	bl	8003bbc <USB_FlushRxFifo>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003984:	461a      	mov	r2, r3
 8003986:	2300      	movs	r3, #0
 8003988:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003990:	461a      	mov	r2, r3
 8003992:	2300      	movs	r3, #0
 8003994:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800399c:	461a      	mov	r2, r3
 800399e:	2300      	movs	r3, #0
 80039a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	e043      	b.n	8003a30 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039be:	d118      	bne.n	80039f2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039d2:	461a      	mov	r2, r3
 80039d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e013      	b.n	8003a04 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039e8:	461a      	mov	r2, r3
 80039ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	e008      	b.n	8003a04 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039fe:	461a      	mov	r2, r3
 8003a00:	2300      	movs	r3, #0
 8003a02:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a10:	461a      	mov	r2, r3
 8003a12:	2300      	movs	r3, #0
 8003a14:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a22:	461a      	mov	r2, r3
 8003a24:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a34:	461a      	mov	r2, r3
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d3b5      	bcc.n	80039a8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	e043      	b.n	8003aca <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a58:	d118      	bne.n	8003a8c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10a      	bne.n	8003a76 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	e013      	b.n	8003a9e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a82:	461a      	mov	r2, r3
 8003a84:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	e008      	b.n	8003a9e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2300      	movs	r3, #0
 8003aae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003abc:	461a      	mov	r2, r3
 8003abe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ac2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ace:	461a      	mov	r2, r3
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d3b5      	bcc.n	8003a42 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ae8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003af6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003af8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d105      	bne.n	8003b0c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f043 0210 	orr.w	r2, r3, #16
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	4b10      	ldr	r3, [pc, #64]	@ (8003b54 <USB_DevInit+0x2c4>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b18:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f043 0208 	orr.w	r2, r3, #8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b2c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d107      	bne.n	8003b44 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b50:	b004      	add	sp, #16
 8003b52:	4770      	bx	lr
 8003b54:	803c3800 	.word	0x803c3800

08003b58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b72:	d901      	bls.n	8003b78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e01b      	b.n	8003bb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	daf2      	bge.n	8003b66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	019b      	lsls	r3, r3, #6
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3301      	adds	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b9c:	d901      	bls.n	8003ba2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e006      	b.n	8003bb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d0f0      	beq.n	8003b90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bd4:	d901      	bls.n	8003bda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e018      	b.n	8003c0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	daf2      	bge.n	8003bc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2210      	movs	r2, #16
 8003bea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bf8:	d901      	bls.n	8003bfe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e006      	b.n	8003c0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d0f0      	beq.n	8003bec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	68f9      	ldr	r1, [r7, #12]
 8003c34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b087      	sub	sp, #28
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0306 	and.w	r3, r3, #6
 8003c62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d102      	bne.n	8003c70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	75fb      	strb	r3, [r7, #23]
 8003c6e:	e00a      	b.n	8003c86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d002      	beq.n	8003c7c <USB_GetDevSpeed+0x32>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b06      	cmp	r3, #6
 8003c7a:	d102      	bne.n	8003c82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	75fb      	strb	r3, [r7, #23]
 8003c80:	e001      	b.n	8003c86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c82:	230f      	movs	r3, #15
 8003c84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	785b      	ldrb	r3, [r3, #1]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d13a      	bne.n	8003d26 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	68f9      	ldr	r1, [r7, #12]
 8003cca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d155      	bne.n	8003d94 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	791b      	ldrb	r3, [r3, #4]
 8003d02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	059b      	lsls	r3, r3, #22
 8003d0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	0151      	lsls	r1, r2, #5
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	440a      	add	r2, r1
 8003d16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	e036      	b.n	8003d94 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d2c:	69da      	ldr	r2, [r3, #28]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	2101      	movs	r1, #1
 8003d38:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	68f9      	ldr	r1, [r7, #12]
 8003d40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d11a      	bne.n	8003d94 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	791b      	ldrb	r3, [r3, #4]
 8003d78:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	0151      	lsls	r1, r2, #5
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	440a      	add	r2, r1
 8003d86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d92:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	785b      	ldrb	r3, [r3, #1]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d161      	bne.n	8003e84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003dd6:	d11f      	bne.n	8003e18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003df2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003df6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	0151      	lsls	r1, r2, #5
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	f003 030f 	and.w	r3, r3, #15
 8003e28:	2101      	movs	r1, #1
 8003e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	68f9      	ldr	r1, [r7, #12]
 8003e34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e38:	4013      	ands	r3, r2
 8003e3a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e42:	69da      	ldr	r2, [r3, #28]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	68f9      	ldr	r1, [r7, #12]
 8003e58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	0159      	lsls	r1, r3, #5
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	440b      	add	r3, r1
 8003e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4b35      	ldr	r3, [pc, #212]	@ (8003f54 <USB_DeactivateEndpoint+0x1b0>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]
 8003e82:	e060      	b.n	8003f46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e9a:	d11f      	bne.n	8003edc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	0151      	lsls	r1, r2, #5
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003eb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003eba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	0151      	lsls	r1, r2, #5
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ed6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003eda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	2101      	movs	r1, #1
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	041b      	lsls	r3, r3, #16
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	68f9      	ldr	r1, [r7, #12]
 8003ef8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003efc:	4013      	ands	r3, r2
 8003efe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	2101      	movs	r1, #1
 8003f12:	fa01 f303 	lsl.w	r3, r1, r3
 8003f16:	041b      	lsls	r3, r3, #16
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	68f9      	ldr	r1, [r7, #12]
 8003f1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f20:	4013      	ands	r3, r2
 8003f22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	0159      	lsls	r1, r3, #5
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	440b      	add	r3, r1
 8003f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <USB_DeactivateEndpoint+0x1b4>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	ec337800 	.word	0xec337800
 8003f58:	eff37800 	.word	0xeff37800

08003f5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	@ 0x28
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	4613      	mov	r3, r2
 8003f68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	f040 817f 	bne.w	800427c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d132      	bne.n	8003fec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	0151      	lsls	r1, r2, #5
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	440a      	add	r2, r1
 8003f9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fa0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003fa4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003fa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	0151      	lsls	r1, r2, #5
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	440a      	add	r2, r1
 8003fc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	0151      	lsls	r1, r2, #5
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	440a      	add	r2, r1
 8003fe0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fe4:	0cdb      	lsrs	r3, r3, #19
 8003fe6:	04db      	lsls	r3, r3, #19
 8003fe8:	6113      	str	r3, [r2, #16]
 8003fea:	e097      	b.n	800411c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	0151      	lsls	r1, r2, #5
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	440a      	add	r2, r1
 8004002:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004006:	0cdb      	lsrs	r3, r3, #19
 8004008:	04db      	lsls	r3, r3, #19
 800400a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	0151      	lsls	r1, r2, #5
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	440a      	add	r2, r1
 8004022:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004026:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800402a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800402e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d11a      	bne.n	800406c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	429a      	cmp	r2, r3
 8004040:	d903      	bls.n	800404a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	0151      	lsls	r1, r2, #5
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	440a      	add	r2, r1
 8004060:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004064:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004068:	6113      	str	r3, [r2, #16]
 800406a:	e044      	b.n	80040f6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	4413      	add	r3, r2
 8004076:	1e5a      	subs	r2, r3, #1
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004080:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	8afb      	ldrh	r3, [r7, #22]
 8004092:	04d9      	lsls	r1, r3, #19
 8004094:	4ba4      	ldr	r3, [pc, #656]	@ (8004328 <USB_EPStartXfer+0x3cc>)
 8004096:	400b      	ands	r3, r1
 8004098:	69b9      	ldr	r1, [r7, #24]
 800409a:	0148      	lsls	r0, r1, #5
 800409c:	69f9      	ldr	r1, [r7, #28]
 800409e:	4401      	add	r1, r0
 80040a0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80040a4:	4313      	orrs	r3, r2
 80040a6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	791b      	ldrb	r3, [r3, #4]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d122      	bne.n	80040f6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	0151      	lsls	r1, r2, #5
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	440a      	add	r2, r1
 80040c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040ca:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80040ce:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	8afb      	ldrh	r3, [r7, #22]
 80040e0:	075b      	lsls	r3, r3, #29
 80040e2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80040e6:	69b9      	ldr	r1, [r7, #24]
 80040e8:	0148      	lsls	r0, r1, #5
 80040ea:	69f9      	ldr	r1, [r7, #28]
 80040ec:	4401      	add	r1, r0
 80040ee:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80040f2:	4313      	orrs	r3, r2
 80040f4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410c:	69b9      	ldr	r1, [r7, #24]
 800410e:	0148      	lsls	r0, r1, #5
 8004110:	69f9      	ldr	r1, [r7, #28]
 8004112:	4401      	add	r1, r0
 8004114:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004118:	4313      	orrs	r3, r2
 800411a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d14b      	bne.n	80041ba <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	4413      	add	r3, r2
 8004132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004136:	461a      	mov	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	791b      	ldrb	r3, [r3, #4]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d128      	bne.n	8004198 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d110      	bne.n	8004178 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	0151      	lsls	r1, r2, #5
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	440a      	add	r2, r1
 800416c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004170:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e00f      	b.n	8004198 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	0151      	lsls	r1, r2, #5
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	440a      	add	r2, r1
 800418e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004196:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	0151      	lsls	r1, r2, #5
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	440a      	add	r2, r1
 80041ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041b2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	e166      	b.n	8004488 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041d4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80041d8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	791b      	ldrb	r3, [r3, #4]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d015      	beq.n	800420e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 814e 	beq.w	8004488 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	2101      	movs	r1, #1
 80041fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004202:	69f9      	ldr	r1, [r7, #28]
 8004204:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004208:	4313      	orrs	r3, r2
 800420a:	634b      	str	r3, [r1, #52]	@ 0x34
 800420c:	e13c      	b.n	8004488 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d110      	bne.n	8004240 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	0151      	lsls	r1, r2, #5
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	440a      	add	r2, r1
 8004234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004238:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e00f      	b.n	8004260 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	0151      	lsls	r1, r2, #5
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	440a      	add	r2, r1
 8004256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800425a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800425e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	68d9      	ldr	r1, [r3, #12]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	781a      	ldrb	r2, [r3, #0]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	b298      	uxth	r0, r3
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	4603      	mov	r3, r0
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f9b9 	bl	80045ec <USB_WritePacket>
 800427a:	e105      	b.n	8004488 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	0151      	lsls	r1, r2, #5
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	440a      	add	r2, r1
 8004292:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004296:	0cdb      	lsrs	r3, r3, #19
 8004298:	04db      	lsls	r3, r3, #19
 800429a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	0151      	lsls	r1, r2, #5
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	440a      	add	r2, r1
 80042b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042b6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80042ba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80042be:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d132      	bne.n	800432c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f4:	69b9      	ldr	r1, [r7, #24]
 80042f6:	0148      	lsls	r0, r1, #5
 80042f8:	69f9      	ldr	r1, [r7, #28]
 80042fa:	4401      	add	r1, r0
 80042fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004300:	4313      	orrs	r3, r2
 8004302:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	0151      	lsls	r1, r2, #5
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	440a      	add	r2, r1
 800431a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800431e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004322:	6113      	str	r3, [r2, #16]
 8004324:	e062      	b.n	80043ec <USB_EPStartXfer+0x490>
 8004326:	bf00      	nop
 8004328:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d123      	bne.n	800437c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434a:	69b9      	ldr	r1, [r7, #24]
 800434c:	0148      	lsls	r0, r1, #5
 800434e:	69f9      	ldr	r1, [r7, #28]
 8004350:	4401      	add	r1, r0
 8004352:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004356:	4313      	orrs	r3, r2
 8004358:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	0151      	lsls	r1, r2, #5
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	440a      	add	r2, r1
 8004370:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004374:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004378:	6113      	str	r3, [r2, #16]
 800437a:	e037      	b.n	80043ec <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4413      	add	r3, r2
 8004386:	1e5a      	subs	r2, r3, #1
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	8afa      	ldrh	r2, [r7, #22]
 8004398:	fb03 f202 	mul.w	r2, r3, r2
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	8afb      	ldrh	r3, [r7, #22]
 80043b0:	04d9      	lsls	r1, r3, #19
 80043b2:	4b38      	ldr	r3, [pc, #224]	@ (8004494 <USB_EPStartXfer+0x538>)
 80043b4:	400b      	ands	r3, r1
 80043b6:	69b9      	ldr	r1, [r7, #24]
 80043b8:	0148      	lsls	r0, r1, #5
 80043ba:	69f9      	ldr	r1, [r7, #28]
 80043bc:	4401      	add	r1, r0
 80043be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043c2:	4313      	orrs	r3, r2
 80043c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043dc:	69b9      	ldr	r1, [r7, #24]
 80043de:	0148      	lsls	r0, r1, #5
 80043e0:	69f9      	ldr	r1, [r7, #28]
 80043e2:	4401      	add	r1, r0
 80043e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043e8:	4313      	orrs	r3, r2
 80043ea:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d10d      	bne.n	800440e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d009      	beq.n	800440e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	68d9      	ldr	r1, [r3, #12]
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800440a:	460a      	mov	r2, r1
 800440c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	791b      	ldrb	r3, [r3, #4]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d128      	bne.n	8004468 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d110      	bne.n	8004448 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	0151      	lsls	r1, r2, #5
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	440a      	add	r2, r1
 800443c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004440:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e00f      	b.n	8004468 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	0151      	lsls	r1, r2, #5
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	440a      	add	r2, r1
 800445e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004466:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	0151      	lsls	r1, r2, #5
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	440a      	add	r2, r1
 800447e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004482:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004486:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	1ff80000 	.word	0x1ff80000

08004498 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	785b      	ldrb	r3, [r3, #1]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d14a      	bne.n	800454c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044ce:	f040 8086 	bne.w	80045de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	7812      	ldrb	r2, [r2, #0]
 80044e6:	0151      	lsls	r1, r2, #5
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	440a      	add	r2, r1
 80044ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80044f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	7812      	ldrb	r2, [r2, #0]
 800450a:	0151      	lsls	r1, r2, #5
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	440a      	add	r2, r1
 8004510:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004514:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004518:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3301      	adds	r3, #1
 800451e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004526:	4293      	cmp	r3, r2
 8004528:	d902      	bls.n	8004530 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	75fb      	strb	r3, [r7, #23]
          break;
 800452e:	e056      	b.n	80045de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004544:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004548:	d0e7      	beq.n	800451a <USB_EPStopXfer+0x82>
 800454a:	e048      	b.n	80045de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004560:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004564:	d13b      	bne.n	80045de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	7812      	ldrb	r2, [r2, #0]
 800457a:	0151      	lsls	r1, r2, #5
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	440a      	add	r2, r1
 8004580:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004584:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004588:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	7812      	ldrb	r2, [r2, #0]
 800459e:	0151      	lsls	r1, r2, #5
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	440a      	add	r2, r1
 80045a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3301      	adds	r3, #1
 80045b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d902      	bls.n	80045c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	75fb      	strb	r3, [r7, #23]
          break;
 80045c2:	e00c      	b.n	80045de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045dc:	d0e7      	beq.n	80045ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80045de:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b089      	sub	sp, #36	@ 0x24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	4611      	mov	r1, r2
 80045f8:	461a      	mov	r2, r3
 80045fa:	460b      	mov	r3, r1
 80045fc:	71fb      	strb	r3, [r7, #7]
 80045fe:	4613      	mov	r3, r2
 8004600:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800460a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800460e:	2b00      	cmp	r3, #0
 8004610:	d123      	bne.n	800465a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004612:	88bb      	ldrh	r3, [r7, #4]
 8004614:	3303      	adds	r3, #3
 8004616:	089b      	lsrs	r3, r3, #2
 8004618:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800461a:	2300      	movs	r3, #0
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	e018      	b.n	8004652 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	031a      	lsls	r2, r3, #12
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	4413      	add	r3, r2
 8004628:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800462c:	461a      	mov	r2, r3
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	3301      	adds	r3, #1
 8004638:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	3301      	adds	r3, #1
 800463e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	3301      	adds	r3, #1
 8004644:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	3301      	adds	r3, #1
 800464a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	3301      	adds	r3, #1
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	429a      	cmp	r2, r3
 8004658:	d3e2      	bcc.n	8004620 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3724      	adds	r7, #36	@ 0x24
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004668:	b480      	push	{r7}
 800466a:	b08b      	sub	sp, #44	@ 0x2c
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	4613      	mov	r3, r2
 8004674:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	089b      	lsrs	r3, r3, #2
 8004682:	b29b      	uxth	r3, r3
 8004684:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800468e:	2300      	movs	r3, #0
 8004690:	623b      	str	r3, [r7, #32]
 8004692:	e014      	b.n	80046be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	601a      	str	r2, [r3, #0]
    pDest++;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	3301      	adds	r3, #1
 80046a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	3301      	adds	r3, #1
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	3301      	adds	r3, #1
 80046b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	3301      	adds	r3, #1
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	3301      	adds	r3, #1
 80046bc:	623b      	str	r3, [r7, #32]
 80046be:	6a3a      	ldr	r2, [r7, #32]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d3e6      	bcc.n	8004694 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80046c6:	8bfb      	ldrh	r3, [r7, #30]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01e      	beq.n	800470a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d6:	461a      	mov	r2, r3
 80046d8:	f107 0310 	add.w	r3, r7, #16
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	701a      	strb	r2, [r3, #0]
      i++;
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	3301      	adds	r3, #1
 80046f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	3301      	adds	r3, #1
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80046fe:	8bfb      	ldrh	r3, [r7, #30]
 8004700:	3b01      	subs	r3, #1
 8004702:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004704:	8bfb      	ldrh	r3, [r7, #30]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1ea      	bne.n	80046e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800470c:	4618      	mov	r0, r3
 800470e:	372c      	adds	r7, #44	@ 0x2c
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d12c      	bne.n	800478e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	db12      	blt.n	800476c <USB_EPSetStall+0x54>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00f      	beq.n	800476c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	0151      	lsls	r1, r2, #5
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	440a      	add	r2, r1
 8004762:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004766:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800476a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	0151      	lsls	r1, r2, #5
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	440a      	add	r2, r1
 8004782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004786:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	e02b      	b.n	80047e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	db12      	blt.n	80047c6 <USB_EPSetStall+0xae>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00f      	beq.n	80047c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	0151      	lsls	r1, r2, #5
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	440a      	add	r2, r1
 80047bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	0151      	lsls	r1, r2, #5
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	440a      	add	r2, r1
 80047dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	785b      	ldrb	r3, [r3, #1]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d128      	bne.n	8004862 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	0151      	lsls	r1, r2, #5
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	440a      	add	r2, r1
 8004826:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800482a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800482e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	791b      	ldrb	r3, [r3, #4]
 8004834:	2b03      	cmp	r3, #3
 8004836:	d003      	beq.n	8004840 <USB_EPClearStall+0x4c>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	791b      	ldrb	r3, [r3, #4]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d138      	bne.n	80048b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	0151      	lsls	r1, r2, #5
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	440a      	add	r2, r1
 8004856:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800485a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	e027      	b.n	80048b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	440a      	add	r2, r1
 8004878:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800487c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004880:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	791b      	ldrb	r3, [r3, #4]
 8004886:	2b03      	cmp	r3, #3
 8004888:	d003      	beq.n	8004892 <USB_EPClearStall+0x9e>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	791b      	ldrb	r3, [r3, #4]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d10f      	bne.n	80048b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	0151      	lsls	r1, r2, #5
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	440a      	add	r2, r1
 80048a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048de:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80048e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80048f4:	68f9      	ldr	r1, [r7, #12]
 80048f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048fa:	4313      	orrs	r3, r2
 80048fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004926:	f023 0303 	bic.w	r3, r3, #3
 800492a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800493a:	f023 0302 	bic.w	r3, r3, #2
 800493e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004968:	f023 0303 	bic.w	r3, r3, #3
 800496c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800497c:	f043 0302 	orr.w	r3, r3, #2
 8004980:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4013      	ands	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049a8:	68fb      	ldr	r3, [r7, #12]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	4013      	ands	r3, r2
 80049d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	0c1b      	lsrs	r3, r3, #16
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b085      	sub	sp, #20
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	b29b      	uxth	r3, r3
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	460b      	mov	r3, r1
 8004a28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b087      	sub	sp, #28
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	460b      	mov	r3, r1
 8004a64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a7e:	78fb      	ldrb	r3, [r7, #3]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8a:	01db      	lsls	r3, r3, #7
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004aec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004af0:	f023 0307 	bic.w	r3, r3, #7
 8004af4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	460b      	mov	r3, r1
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	333c      	adds	r3, #60	@ 0x3c
 8004b2e:	3304      	adds	r3, #4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4a26      	ldr	r2, [pc, #152]	@ (8004bd0 <USB_EP0_OutStart+0xb8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d90a      	bls.n	8004b52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b4c:	d101      	bne.n	8004b52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e037      	b.n	8004bc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b58:	461a      	mov	r2, r3
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b80:	f043 0318 	orr.w	r3, r3, #24
 8004b84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b94:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004b98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004b9a:	7afb      	ldrb	r3, [r7, #11]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d10f      	bne.n	8004bc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bba:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004bbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	4f54300a 	.word	0x4f54300a

08004bd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3301      	adds	r3, #1
 8004be4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bec:	d901      	bls.n	8004bf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e01b      	b.n	8004c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	daf2      	bge.n	8004be0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f043 0201 	orr.w	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c16:	d901      	bls.n	8004c1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e006      	b.n	8004c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d0f0      	beq.n	8004c0a <USB_CoreReset+0x36>

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004c3c:	4904      	ldr	r1, [pc, #16]	@ (8004c50 <MX_FATFS_Init+0x18>)
 8004c3e:	4805      	ldr	r0, [pc, #20]	@ (8004c54 <MX_FATFS_Init+0x1c>)
 8004c40:	f003 fb76 	bl	8008330 <FATFS_LinkDriver>
 8004c44:	4603      	mov	r3, r0
 8004c46:	461a      	mov	r2, r3
 8004c48:	4b03      	ldr	r3, [pc, #12]	@ (8004c58 <MX_FATFS_Init+0x20>)
 8004c4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004c4c:	bf00      	nop
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	200101b0 	.word	0x200101b0
 8004c54:	2000000c 	.word	0x2000000c
 8004c58:	200101ac 	.word	0x200101ac

08004c5c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004c66:	4b06      	ldr	r3, [pc, #24]	@ (8004c80 <USER_initialize+0x24>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004c6c:	4b04      	ldr	r3, [pc, #16]	@ (8004c80 <USER_initialize+0x24>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	20000009 	.word	0x20000009

08004c84 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004c8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <USER_status+0x24>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004c94:	4b04      	ldr	r3, [pc, #16]	@ (8004ca8 <USER_status+0x24>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000009 	.word	0x20000009

08004cac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4603      	mov	r3, r0
 8004cba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004cbc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004cda:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	603a      	str	r2, [r7, #0]
 8004cf2:	71fb      	strb	r3, [r7, #7]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
    return res;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8004d18:	f44f 701d 	mov.w	r0, #628	@ 0x274
 8004d1c:	f003 ffd6 	bl	8008ccc <USBD_static_malloc>
 8004d20:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d109      	bne.n	8004d3c <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	32b0      	adds	r2, #176	@ 0xb0
 8004d32:	2100      	movs	r1, #0
 8004d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e06e      	b.n	8004e1a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	32b0      	adds	r2, #176	@ 0xb0
 8004d46:	68f9      	ldr	r1, [r7, #12]
 8004d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	32b0      	adds	r2, #176	@ 0xb0
 8004d56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7c1b      	ldrb	r3, [r3, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d12b      	bne.n	8004dc0 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004d68:	4b2e      	ldr	r3, [pc, #184]	@ (8004e24 <USBD_MSC_Init+0x118>)
 8004d6a:	7819      	ldrb	r1, [r3, #0]
 8004d6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d70:	2202      	movs	r2, #2
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f003 fe67 	bl	8008a46 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8004d78:	4b2a      	ldr	r3, [pc, #168]	@ (8004e24 <USBD_MSC_Init+0x118>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	f003 020f 	and.w	r2, r3, #15
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	440b      	add	r3, r1
 8004d8c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d90:	2201      	movs	r2, #1
 8004d92:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004d94:	4b24      	ldr	r3, [pc, #144]	@ (8004e28 <USBD_MSC_Init+0x11c>)
 8004d96:	7819      	ldrb	r1, [r3, #0]
 8004d98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f003 fe51 	bl	8008a46 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8004da4:	4b20      	ldr	r3, [pc, #128]	@ (8004e28 <USBD_MSC_Init+0x11c>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	f003 020f 	and.w	r2, r3, #15
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	3324      	adds	r3, #36	@ 0x24
 8004dba:	2201      	movs	r2, #1
 8004dbc:	801a      	strh	r2, [r3, #0]
 8004dbe:	e028      	b.n	8004e12 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004dc0:	4b18      	ldr	r3, [pc, #96]	@ (8004e24 <USBD_MSC_Init+0x118>)
 8004dc2:	7819      	ldrb	r1, [r3, #0]
 8004dc4:	2340      	movs	r3, #64	@ 0x40
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f003 fe3c 	bl	8008a46 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8004dce:	4b15      	ldr	r3, [pc, #84]	@ (8004e24 <USBD_MSC_Init+0x118>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	f003 020f 	and.w	r2, r3, #15
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004de6:	2201      	movs	r2, #1
 8004de8:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004dea:	4b0f      	ldr	r3, [pc, #60]	@ (8004e28 <USBD_MSC_Init+0x11c>)
 8004dec:	7819      	ldrb	r1, [r3, #0]
 8004dee:	2340      	movs	r3, #64	@ 0x40
 8004df0:	2202      	movs	r2, #2
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f003 fe27 	bl	8008a46 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8004df8:	4b0b      	ldr	r3, [pc, #44]	@ (8004e28 <USBD_MSC_Init+0x11c>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	f003 020f 	and.w	r2, r3, #15
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	3324      	adds	r3, #36	@ 0x24
 8004e0e:	2201      	movs	r2, #1
 8004e10:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fa2c 	bl	8005270 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000083 	.word	0x20000083
 8004e28:	20000082 	.word	0x20000082

08004e2c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8004e38:	4b26      	ldr	r3, [pc, #152]	@ (8004ed4 <USBD_MSC_DeInit+0xa8>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f003 fe27 	bl	8008a92 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8004e44:	4b23      	ldr	r3, [pc, #140]	@ (8004ed4 <USBD_MSC_DeInit+0xa8>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	f003 020f 	and.w	r2, r3, #15
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	440b      	add	r3, r1
 8004e58:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8004e60:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed8 <USBD_MSC_DeInit+0xac>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f003 fe13 	bl	8008a92 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed8 <USBD_MSC_DeInit+0xac>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	f003 020f 	and.w	r2, r3, #15
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	3324      	adds	r3, #36	@ 0x24
 8004e82:	2200      	movs	r2, #0
 8004e84:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	32b0      	adds	r2, #176	@ 0xb0
 8004e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d018      	beq.n	8004eca <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fa67 	bl	800536c <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	32b0      	adds	r2, #176	@ 0xb0
 8004ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f003 ff1b 	bl	8008ce8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	32b0      	adds	r2, #176	@ 0xb0
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000083 	.word	0x20000083
 8004ed8:	20000082 	.word	0x20000082

08004edc <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	32b0      	adds	r2, #176	@ 0xb0
 8004ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ef4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e0e1      	b.n	80050cc <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d053      	beq.n	8004fbc <USBD_MSC_Setup+0xe0>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	f040 80d1 	bne.w	80050bc <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	2bfe      	cmp	r3, #254	@ 0xfe
 8004f20:	d002      	beq.n	8004f28 <USBD_MSC_Setup+0x4c>
 8004f22:	2bff      	cmp	r3, #255	@ 0xff
 8004f24:	d02a      	beq.n	8004f7c <USBD_MSC_Setup+0xa0>
 8004f26:	e041      	b.n	8004fac <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	885b      	ldrh	r3, [r3, #2]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d11e      	bne.n	8004f6e <USBD_MSC_Setup+0x92>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	88db      	ldrh	r3, [r3, #6]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d11a      	bne.n	8004f6e <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	da15      	bge.n	8004f6e <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	33b0      	adds	r3, #176	@ 0xb0
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	4798      	blx	r3
 8004f56:	4603      	mov	r3, r0
 8004f58:	461a      	mov	r2, r3
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2201      	movs	r2, #1
 8004f62:	4619      	mov	r1, r3
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f003 f933 	bl	80081d0 <USBD_CtlSendData>
 8004f6a:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f6c:	e025      	b.n	8004fba <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8004f6e:	6839      	ldr	r1, [r7, #0]
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f003 f8b0 	bl	80080d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f76:	2303      	movs	r3, #3
 8004f78:	75fb      	strb	r3, [r7, #23]
          break;
 8004f7a:	e01e      	b.n	8004fba <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	885b      	ldrh	r3, [r3, #2]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10c      	bne.n	8004f9e <USBD_MSC_Setup+0xc2>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	88db      	ldrh	r3, [r3, #6]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d108      	bne.n	8004f9e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	db03      	blt.n	8004f9e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f9b4 	bl	8005304 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f9c:	e00d      	b.n	8004fba <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8004f9e:	6839      	ldr	r1, [r7, #0]
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f003 f898 	bl	80080d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	75fb      	strb	r3, [r7, #23]
          break;
 8004faa:	e006      	b.n	8004fba <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f003 f891 	bl	80080d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	75fb      	strb	r3, [r7, #23]
          break;
 8004fb8:	bf00      	nop
      }
      break;
 8004fba:	e086      	b.n	80050ca <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	785b      	ldrb	r3, [r3, #1]
 8004fc0:	2b0b      	cmp	r3, #11
 8004fc2:	d872      	bhi.n	80050aa <USBD_MSC_Setup+0x1ce>
 8004fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fcc <USBD_MSC_Setup+0xf0>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08004ffd 	.word	0x08004ffd
 8004fd0:	08005079 	.word	0x08005079
 8004fd4:	080050ab 	.word	0x080050ab
 8004fd8:	080050ab 	.word	0x080050ab
 8004fdc:	080050ab 	.word	0x080050ab
 8004fe0:	080050ab 	.word	0x080050ab
 8004fe4:	080050ab 	.word	0x080050ab
 8004fe8:	080050ab 	.word	0x080050ab
 8004fec:	080050ab 	.word	0x080050ab
 8004ff0:	080050ab 	.word	0x080050ab
 8004ff4:	08005027 	.word	0x08005027
 8004ff8:	08005051 	.word	0x08005051
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b03      	cmp	r3, #3
 8005006:	d107      	bne.n	8005018 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005008:	f107 030e 	add.w	r3, r7, #14
 800500c:	2202      	movs	r2, #2
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f003 f8dd 	bl	80081d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005016:	e050      	b.n	80050ba <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f003 f85b 	bl	80080d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005020:	2303      	movs	r3, #3
 8005022:	75fb      	strb	r3, [r7, #23]
          break;
 8005024:	e049      	b.n	80050ba <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b03      	cmp	r3, #3
 8005030:	d107      	bne.n	8005042 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	3304      	adds	r3, #4
 8005036:	2201      	movs	r2, #1
 8005038:	4619      	mov	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f003 f8c8 	bl	80081d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005040:	e03b      	b.n	80050ba <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8005042:	6839      	ldr	r1, [r7, #0]
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f003 f846 	bl	80080d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800504a:	2303      	movs	r3, #3
 800504c:	75fb      	strb	r3, [r7, #23]
          break;
 800504e:	e034      	b.n	80050ba <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b03      	cmp	r3, #3
 800505a:	d106      	bne.n	800506a <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	885b      	ldrh	r3, [r3, #2]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	461a      	mov	r2, r3
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005068:	e027      	b.n	80050ba <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800506a:	6839      	ldr	r1, [r7, #0]
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f003 f832 	bl	80080d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005072:	2303      	movs	r3, #3
 8005074:	75fb      	strb	r3, [r7, #23]
          break;
 8005076:	e020      	b.n	80050ba <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b03      	cmp	r3, #3
 8005082:	d119      	bne.n	80050b8 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	885b      	ldrh	r3, [r3, #2]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d115      	bne.n	80050b8 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	889b      	ldrh	r3, [r3, #4]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f003 fd1b 	bl	8008ad0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	889b      	ldrh	r3, [r3, #4]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	4619      	mov	r1, r3
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fb2e 	bl	8005704 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80050a8:	e006      	b.n	80050b8 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 80050aa:	6839      	ldr	r1, [r7, #0]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f003 f812 	bl	80080d6 <USBD_CtlError>
          ret = USBD_FAIL;
 80050b2:	2303      	movs	r3, #3
 80050b4:	75fb      	strb	r3, [r7, #23]
          break;
 80050b6:	e000      	b.n	80050ba <USBD_MSC_Setup+0x1de>
          break;
 80050b8:	bf00      	nop
      }
      break;
 80050ba:	e006      	b.n	80050ca <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 80050bc:	6839      	ldr	r1, [r7, #0]
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f003 f809 	bl	80080d6 <USBD_CtlError>
      ret = USBD_FAIL;
 80050c4:	2303      	movs	r3, #3
 80050c6:	75fb      	strb	r3, [r7, #23]
      break;
 80050c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80050ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	4619      	mov	r1, r3
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f959 	bl	800539c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8005100:	78fb      	ldrb	r3, [r7, #3]
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f983 	bl	8005410 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800511c:	2181      	movs	r1, #129	@ 0x81
 800511e:	4812      	ldr	r0, [pc, #72]	@ (8005168 <USBD_MSC_GetHSCfgDesc+0x54>)
 8005120:	f002 f9a4 	bl	800746c <USBD_GetEpDesc>
 8005124:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8005126:	2101      	movs	r1, #1
 8005128:	480f      	ldr	r0, [pc, #60]	@ (8005168 <USBD_MSC_GetHSCfgDesc+0x54>)
 800512a:	f002 f99f 	bl	800746c <USBD_GetEpDesc>
 800512e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d006      	beq.n	8005144 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	711a      	strb	r2, [r3, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f042 0202 	orr.w	r2, r2, #2
 8005142:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d006      	beq.n	8005158 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2200      	movs	r2, #0
 800514e:	711a      	strb	r2, [r3, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f042 0202 	orr.w	r2, r2, #2
 8005156:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800515e:	4b02      	ldr	r3, [pc, #8]	@ (8005168 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20000058 	.word	0x20000058

0800516c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8005174:	2181      	movs	r1, #129	@ 0x81
 8005176:	4812      	ldr	r0, [pc, #72]	@ (80051c0 <USBD_MSC_GetFSCfgDesc+0x54>)
 8005178:	f002 f978 	bl	800746c <USBD_GetEpDesc>
 800517c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800517e:	2101      	movs	r1, #1
 8005180:	480f      	ldr	r0, [pc, #60]	@ (80051c0 <USBD_MSC_GetFSCfgDesc+0x54>)
 8005182:	f002 f973 	bl	800746c <USBD_GetEpDesc>
 8005186:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d006      	beq.n	800519c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005196:	711a      	strb	r2, [r3, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d006      	beq.n	80051b0 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051aa:	711a      	strb	r2, [r3, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80051b6:	4b02      	ldr	r3, [pc, #8]	@ (80051c0 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20000058 	.word	0x20000058

080051c4 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80051cc:	2181      	movs	r1, #129	@ 0x81
 80051ce:	4812      	ldr	r0, [pc, #72]	@ (8005218 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80051d0:	f002 f94c 	bl	800746c <USBD_GetEpDesc>
 80051d4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80051d6:	2101      	movs	r1, #1
 80051d8:	480f      	ldr	r0, [pc, #60]	@ (8005218 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80051da:	f002 f947 	bl	800746c <USBD_GetEpDesc>
 80051de:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d006      	beq.n	80051f4 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051ee:	711a      	strb	r2, [r3, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d006      	beq.n	8005208 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005202:	711a      	strb	r2, [r3, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800520e:	4b02      	ldr	r3, [pc, #8]	@ (8005218 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20000058 	.word	0x20000058

0800521c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	220a      	movs	r2, #10
 8005228:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800522a:	4b03      	ldr	r3, [pc, #12]	@ (8005238 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	20000078 	.word	0x20000078

0800523c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800524c:	2303      	movs	r3, #3
 800524e:	e009      	b.n	8005264 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	33b0      	adds	r3, #176	@ 0xb0
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	32b0      	adds	r2, #176	@ 0xb0
 8005282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005286:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d032      	beq.n	80052f4 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	33b0      	adds	r3, #176	@ 0xb0
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2000      	movs	r0, #0
 80052c6:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80052c8:	4b0c      	ldr	r3, [pc, #48]	@ (80052fc <MSC_BOT_Init+0x8c>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	4619      	mov	r1, r3
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f003 fbfe 	bl	8008ad0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80052d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005300 <MSC_BOT_Init+0x90>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	4619      	mov	r1, r3
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f003 fbf8 	bl	8008ad0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80052e0:	4b06      	ldr	r3, [pc, #24]	@ (80052fc <MSC_BOT_Init+0x8c>)
 80052e2:	7819      	ldrb	r1, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80052ea:	231f      	movs	r3, #31
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f003 fcb8 	bl	8008c62 <USBD_LL_PrepareReceive>
 80052f2:	e000      	b.n	80052f6 <MSC_BOT_Init+0x86>
    return;
 80052f4:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000083 	.word	0x20000083
 8005300:	20000082 	.word	0x20000082

08005304 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	32b0      	adds	r2, #176	@ 0xb0
 8005316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d01b      	beq.n	800535a <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2201      	movs	r2, #1
 800532c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800532e:	4b0d      	ldr	r3, [pc, #52]	@ (8005364 <MSC_BOT_Reset+0x60>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	4619      	mov	r1, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f003 fc09 	bl	8008b4c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800533a:	4b0b      	ldr	r3, [pc, #44]	@ (8005368 <MSC_BOT_Reset+0x64>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f003 fc03 	bl	8008b4c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8005346:	4b08      	ldr	r3, [pc, #32]	@ (8005368 <MSC_BOT_Reset+0x64>)
 8005348:	7819      	ldrb	r1, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8005350:	231f      	movs	r3, #31
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f003 fc85 	bl	8008c62 <USBD_LL_PrepareReceive>
 8005358:	e000      	b.n	800535c <MSC_BOT_Reset+0x58>
    return;
 800535a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000082 	.word	0x20000082
 8005368:	20000083 	.word	0x20000083

0800536c <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	32b0      	adds	r2, #176	@ 0xb0
 800537e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005382:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	721a      	strb	r2, [r3, #8]
  }
}
 8005390:	bf00      	nop
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	32b0      	adds	r2, #176	@ 0xb0
 80053b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d020      	beq.n	8005400 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	7a1b      	ldrb	r3, [r3, #8]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d005      	beq.n	80053d2 <MSC_BOT_DataIn+0x36>
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	db1c      	blt.n	8005404 <MSC_BOT_DataIn+0x68>
 80053ca:	3b03      	subs	r3, #3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d819      	bhi.n	8005404 <MSC_BOT_DataIn+0x68>
 80053d0:	e011      	b.n	80053f6 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80053de:	461a      	mov	r2, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f9c9 	bl	8005778 <SCSI_ProcessCmd>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	da0d      	bge.n	8005408 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80053ec:	2101      	movs	r1, #1
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f90c 	bl	800560c <MSC_BOT_SendCSW>
      }
      break;
 80053f4:	e008      	b.n	8005408 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80053f6:	2100      	movs	r1, #0
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f907 	bl	800560c <MSC_BOT_SendCSW>
      break;
 80053fe:	e004      	b.n	800540a <MSC_BOT_DataIn+0x6e>
    return;
 8005400:	bf00      	nop
 8005402:	e002      	b.n	800540a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8005404:	bf00      	nop
 8005406:	e000      	b.n	800540a <MSC_BOT_DataIn+0x6e>
      break;
 8005408:	bf00      	nop
  }
}
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	32b0      	adds	r2, #176	@ 0xb0
 8005426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800542a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01c      	beq.n	800546c <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	7a1b      	ldrb	r3, [r3, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <MSC_BOT_DataOut+0x30>
 800543a:	2b01      	cmp	r3, #1
 800543c:	d004      	beq.n	8005448 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800543e:	e018      	b.n	8005472 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f819 	bl	8005478 <MSC_BOT_CBW_Decode>
      break;
 8005446:	e014      	b.n	8005472 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8005454:	461a      	mov	r2, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f98e 	bl	8005778 <SCSI_ProcessCmd>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	da06      	bge.n	8005470 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005462:	2101      	movs	r1, #1
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f8d1 	bl	800560c <MSC_BOT_SendCSW>
      break;
 800546a:	e001      	b.n	8005470 <MSC_BOT_DataOut+0x60>
    return;
 800546c:	bf00      	nop
 800546e:	e000      	b.n	8005472 <MSC_BOT_DataOut+0x62>
      break;
 8005470:	bf00      	nop
  }
}
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	32b0      	adds	r2, #176	@ 0xb0
 800548a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d079      	beq.n	800558a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80054ae:	4b3a      	ldr	r3, [pc, #232]	@ (8005598 <MSC_BOT_CBW_Decode+0x120>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f003 fbf5 	bl	8008ca4 <USBD_LL_GetRxDataSize>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b1f      	cmp	r3, #31
 80054be:	d114      	bne.n	80054ea <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80054c6:	4a35      	ldr	r2, [pc, #212]	@ (800559c <MSC_BOT_CBW_Decode+0x124>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d10e      	bne.n	80054ea <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d809      	bhi.n	80054ea <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d90e      	bls.n	8005508 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80054f0:	2320      	movs	r3, #32
 80054f2:	2205      	movs	r2, #5
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fe54 	bl	80061a2 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2202      	movs	r2, #2
 80054fe:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f8bd 	bl	8005680 <MSC_BOT_Abort>
 8005506:	e043      	b.n	8005590 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8005514:	461a      	mov	r2, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f92e 	bl	8005778 <SCSI_ProcessCmd>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	da0c      	bge.n	800553c <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	7a1b      	ldrb	r3, [r3, #8]
 8005526:	2b05      	cmp	r3, #5
 8005528:	d104      	bne.n	8005534 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800552a:	2101      	movs	r1, #1
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f86d 	bl	800560c <MSC_BOT_SendCSW>
 8005532:	e02d      	b.n	8005590 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f8a3 	bl	8005680 <MSC_BOT_Abort>
 800553a:	e029      	b.n	8005590 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	7a1b      	ldrb	r3, [r3, #8]
 8005540:	2b02      	cmp	r3, #2
 8005542:	d024      	beq.n	800558e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005548:	2b01      	cmp	r3, #1
 800554a:	d020      	beq.n	800558e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005550:	2b03      	cmp	r3, #3
 8005552:	d01c      	beq.n	800558e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d009      	beq.n	8005570 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f103 0110 	add.w	r1, r3, #16
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	461a      	mov	r2, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f819 	bl	80055a0 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800556e:	e00f      	b.n	8005590 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005578:	2100      	movs	r1, #0
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f846 	bl	800560c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8005580:	e006      	b.n	8005590 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f87c 	bl	8005680 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8005588:	e002      	b.n	8005590 <MSC_BOT_CBW_Decode+0x118>
    return;
 800558a:	bf00      	nop
 800558c:	e000      	b.n	8005590 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800558e:	bf00      	nop
    }
  }
}
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000083 	.word	0x20000083
 800559c:	43425355 	.word	0x43425355

080055a0 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	32b0      	adds	r2, #176	@ 0xb0
 80055b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ba:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d01e      	beq.n	8005600 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	4293      	cmp	r3, r2
 80055cc:	bf28      	it	cs
 80055ce:	4613      	movcs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	1ad2      	subs	r2, r2, r3
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2204      	movs	r2, #4
 80055ee:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 80055f0:	4b05      	ldr	r3, [pc, #20]	@ (8005608 <MSC_BOT_SendData+0x68>)
 80055f2:	7819      	ldrb	r1, [r3, #0]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f003 fb11 	bl	8008c20 <USBD_LL_Transmit>
 80055fe:	e000      	b.n	8005602 <MSC_BOT_SendData+0x62>
    return;
 8005600:	bf00      	nop
}
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000082 	.word	0x20000082

0800560c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	32b0      	adds	r2, #176	@ 0xb0
 8005622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005626:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01d      	beq.n	800566a <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4a10      	ldr	r2, [pc, #64]	@ (8005674 <MSC_BOT_SendCSW+0x68>)
 8005632:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8005644:	4b0c      	ldr	r3, [pc, #48]	@ (8005678 <MSC_BOT_SendCSW+0x6c>)
 8005646:	7819      	ldrb	r1, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 800564e:	230d      	movs	r3, #13
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f003 fae5 	bl	8008c20 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8005656:	4b09      	ldr	r3, [pc, #36]	@ (800567c <MSC_BOT_SendCSW+0x70>)
 8005658:	7819      	ldrb	r1, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8005660:	231f      	movs	r3, #31
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f003 fafd 	bl	8008c62 <USBD_LL_PrepareReceive>
 8005668:	e000      	b.n	800566c <MSC_BOT_SendCSW+0x60>
    return;
 800566a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	53425355 	.word	0x53425355
 8005678:	20000082 	.word	0x20000082
 800567c:	20000083 	.word	0x20000083

08005680 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	32b0      	adds	r2, #176	@ 0xb0
 8005692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005696:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d02a      	beq.n	80056f4 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10e      	bne.n	80056c6 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d009      	beq.n	80056c6 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d105      	bne.n	80056c6 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80056ba:	4b10      	ldr	r3, [pc, #64]	@ (80056fc <MSC_BOT_Abort+0x7c>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f003 fa24 	bl	8008b0e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80056c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005700 <MSC_BOT_Abort+0x80>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	4619      	mov	r1, r3
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f003 fa1e 	bl	8008b0e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	7a5b      	ldrb	r3, [r3, #9]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d10d      	bne.n	80056f6 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80056da:	4b09      	ldr	r3, [pc, #36]	@ (8005700 <MSC_BOT_Abort+0x80>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f003 fa14 	bl	8008b0e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80056e6:	4b05      	ldr	r3, [pc, #20]	@ (80056fc <MSC_BOT_Abort+0x7c>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f003 fa0e 	bl	8008b0e <USBD_LL_StallEP>
 80056f2:	e000      	b.n	80056f6 <MSC_BOT_Abort+0x76>
    return;
 80056f4:	bf00      	nop
  }
}
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000083 	.word	0x20000083
 8005700:	20000082 	.word	0x20000082

08005704 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	32b0      	adds	r2, #176	@ 0xb0
 800571a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800571e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01d      	beq.n	8005762 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	7a5b      	ldrb	r3, [r3, #9]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d10c      	bne.n	8005748 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800572e:	4b10      	ldr	r3, [pc, #64]	@ (8005770 <MSC_BOT_CplClrFeature+0x6c>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f003 f9ea 	bl	8008b0e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800573a:	4b0e      	ldr	r3, [pc, #56]	@ (8005774 <MSC_BOT_CplClrFeature+0x70>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f003 f9e4 	bl	8008b0e <USBD_LL_StallEP>
 8005746:	e00f      	b.n	8005768 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8005748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800574c:	2b00      	cmp	r3, #0
 800574e:	da0a      	bge.n	8005766 <MSC_BOT_CplClrFeature+0x62>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	7a5b      	ldrb	r3, [r3, #9]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d006      	beq.n	8005766 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005758:	2101      	movs	r1, #1
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff ff56 	bl	800560c <MSC_BOT_SendCSW>
 8005760:	e002      	b.n	8005768 <MSC_BOT_CplClrFeature+0x64>
    return;
 8005762:	bf00      	nop
 8005764:	e000      	b.n	8005768 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8005766:	bf00      	nop
  }
}
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20000082 	.word	0x20000082
 8005774:	20000083 	.word	0x20000083

08005778 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	460b      	mov	r3, r1
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	32b0      	adds	r2, #176	@ 0xb0
 8005790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005794:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d102      	bne.n	80057a2 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800579c:	f04f 33ff 	mov.w	r3, #4294967295
 80057a0:	e168      	b.n	8005a74 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2baa      	cmp	r3, #170	@ 0xaa
 80057a8:	f000 8144 	beq.w	8005a34 <SCSI_ProcessCmd+0x2bc>
 80057ac:	2baa      	cmp	r3, #170	@ 0xaa
 80057ae:	f300 8153 	bgt.w	8005a58 <SCSI_ProcessCmd+0x2e0>
 80057b2:	2ba8      	cmp	r3, #168	@ 0xa8
 80057b4:	f000 812c 	beq.w	8005a10 <SCSI_ProcessCmd+0x298>
 80057b8:	2ba8      	cmp	r3, #168	@ 0xa8
 80057ba:	f300 814d 	bgt.w	8005a58 <SCSI_ProcessCmd+0x2e0>
 80057be:	2b5a      	cmp	r3, #90	@ 0x5a
 80057c0:	f300 80c0 	bgt.w	8005944 <SCSI_ProcessCmd+0x1cc>
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f2c0 8147 	blt.w	8005a58 <SCSI_ProcessCmd+0x2e0>
 80057ca:	2b5a      	cmp	r3, #90	@ 0x5a
 80057cc:	f200 8144 	bhi.w	8005a58 <SCSI_ProcessCmd+0x2e0>
 80057d0:	a201      	add	r2, pc, #4	@ (adr r2, 80057d8 <SCSI_ProcessCmd+0x60>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	0800594b 	.word	0x0800594b
 80057dc:	08005a59 	.word	0x08005a59
 80057e0:	08005a59 	.word	0x08005a59
 80057e4:	0800595d 	.word	0x0800595d
 80057e8:	08005a59 	.word	0x08005a59
 80057ec:	08005a59 	.word	0x08005a59
 80057f0:	08005a59 	.word	0x08005a59
 80057f4:	08005a59 	.word	0x08005a59
 80057f8:	08005a59 	.word	0x08005a59
 80057fc:	08005a59 	.word	0x08005a59
 8005800:	08005a59 	.word	0x08005a59
 8005804:	08005a59 	.word	0x08005a59
 8005808:	08005a59 	.word	0x08005a59
 800580c:	08005a59 	.word	0x08005a59
 8005810:	08005a59 	.word	0x08005a59
 8005814:	08005a59 	.word	0x08005a59
 8005818:	08005a59 	.word	0x08005a59
 800581c:	08005a59 	.word	0x08005a59
 8005820:	0800596f 	.word	0x0800596f
 8005824:	08005a59 	.word	0x08005a59
 8005828:	08005a59 	.word	0x08005a59
 800582c:	08005a59 	.word	0x08005a59
 8005830:	08005a59 	.word	0x08005a59
 8005834:	08005a59 	.word	0x08005a59
 8005838:	08005a59 	.word	0x08005a59
 800583c:	08005a59 	.word	0x08005a59
 8005840:	080059a5 	.word	0x080059a5
 8005844:	08005981 	.word	0x08005981
 8005848:	08005a59 	.word	0x08005a59
 800584c:	08005a59 	.word	0x08005a59
 8005850:	08005993 	.word	0x08005993
 8005854:	08005a59 	.word	0x08005a59
 8005858:	08005a59 	.word	0x08005a59
 800585c:	08005a59 	.word	0x08005a59
 8005860:	08005a59 	.word	0x08005a59
 8005864:	080059c9 	.word	0x080059c9
 8005868:	08005a59 	.word	0x08005a59
 800586c:	080059db 	.word	0x080059db
 8005870:	08005a59 	.word	0x08005a59
 8005874:	08005a59 	.word	0x08005a59
 8005878:	080059ff 	.word	0x080059ff
 800587c:	08005a59 	.word	0x08005a59
 8005880:	08005a23 	.word	0x08005a23
 8005884:	08005a59 	.word	0x08005a59
 8005888:	08005a59 	.word	0x08005a59
 800588c:	08005a59 	.word	0x08005a59
 8005890:	08005a59 	.word	0x08005a59
 8005894:	08005a47 	.word	0x08005a47
 8005898:	08005a59 	.word	0x08005a59
 800589c:	08005a59 	.word	0x08005a59
 80058a0:	08005a59 	.word	0x08005a59
 80058a4:	08005a59 	.word	0x08005a59
 80058a8:	08005a59 	.word	0x08005a59
 80058ac:	08005a59 	.word	0x08005a59
 80058b0:	08005a59 	.word	0x08005a59
 80058b4:	08005a59 	.word	0x08005a59
 80058b8:	08005a59 	.word	0x08005a59
 80058bc:	08005a59 	.word	0x08005a59
 80058c0:	08005a59 	.word	0x08005a59
 80058c4:	08005a59 	.word	0x08005a59
 80058c8:	08005a59 	.word	0x08005a59
 80058cc:	08005a59 	.word	0x08005a59
 80058d0:	08005a59 	.word	0x08005a59
 80058d4:	08005a59 	.word	0x08005a59
 80058d8:	08005a59 	.word	0x08005a59
 80058dc:	08005a59 	.word	0x08005a59
 80058e0:	08005a59 	.word	0x08005a59
 80058e4:	08005a59 	.word	0x08005a59
 80058e8:	08005a59 	.word	0x08005a59
 80058ec:	08005a59 	.word	0x08005a59
 80058f0:	08005a59 	.word	0x08005a59
 80058f4:	08005a59 	.word	0x08005a59
 80058f8:	08005a59 	.word	0x08005a59
 80058fc:	08005a59 	.word	0x08005a59
 8005900:	08005a59 	.word	0x08005a59
 8005904:	08005a59 	.word	0x08005a59
 8005908:	08005a59 	.word	0x08005a59
 800590c:	08005a59 	.word	0x08005a59
 8005910:	08005a59 	.word	0x08005a59
 8005914:	08005a59 	.word	0x08005a59
 8005918:	08005a59 	.word	0x08005a59
 800591c:	08005a59 	.word	0x08005a59
 8005920:	08005a59 	.word	0x08005a59
 8005924:	08005a59 	.word	0x08005a59
 8005928:	08005a59 	.word	0x08005a59
 800592c:	08005a59 	.word	0x08005a59
 8005930:	08005a59 	.word	0x08005a59
 8005934:	08005a59 	.word	0x08005a59
 8005938:	08005a59 	.word	0x08005a59
 800593c:	08005a59 	.word	0x08005a59
 8005940:	080059b7 	.word	0x080059b7
 8005944:	2b9e      	cmp	r3, #158	@ 0x9e
 8005946:	d051      	beq.n	80059ec <SCSI_ProcessCmd+0x274>
 8005948:	e086      	b.n	8005a58 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800594a:	7afb      	ldrb	r3, [r7, #11]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	4619      	mov	r1, r3
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 f893 	bl	8005a7c <SCSI_TestUnitReady>
 8005956:	4603      	mov	r3, r0
 8005958:	75fb      	strb	r3, [r7, #23]
      break;
 800595a:	e089      	b.n	8005a70 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800595c:	7afb      	ldrb	r3, [r7, #11]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	4619      	mov	r1, r3
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 fb9a 	bl	800609c <SCSI_RequestSense>
 8005968:	4603      	mov	r3, r0
 800596a:	75fb      	strb	r3, [r7, #23]
      break;
 800596c:	e080      	b.n	8005a70 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800596e:	7afb      	ldrb	r3, [r7, #11]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	4619      	mov	r1, r3
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f8db 	bl	8005b30 <SCSI_Inquiry>
 800597a:	4603      	mov	r3, r0
 800597c:	75fb      	strb	r3, [r7, #23]
      break;
 800597e:	e077      	b.n	8005a70 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8005980:	7afb      	ldrb	r3, [r7, #11]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	4619      	mov	r1, r3
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fc56 	bl	8006238 <SCSI_StartStopUnit>
 800598c:	4603      	mov	r3, r0
 800598e:	75fb      	strb	r3, [r7, #23]
      break;
 8005990:	e06e      	b.n	8005a70 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8005992:	7afb      	ldrb	r3, [r7, #11]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	4619      	mov	r1, r3
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 fca2 	bl	80062e2 <SCSI_AllowPreventRemovable>
 800599e:	4603      	mov	r3, r0
 80059a0:	75fb      	strb	r3, [r7, #23]
      break;
 80059a2:	e065      	b.n	8005a70 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80059a4:	7afb      	ldrb	r3, [r7, #11]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	4619      	mov	r1, r3
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 faea 	bl	8005f84 <SCSI_ModeSense6>
 80059b0:	4603      	mov	r3, r0
 80059b2:	75fb      	strb	r3, [r7, #23]
      break;
 80059b4:	e05c      	b.n	8005a70 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80059b6:	7afb      	ldrb	r3, [r7, #11]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	4619      	mov	r1, r3
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 fb27 	bl	8006010 <SCSI_ModeSense10>
 80059c2:	4603      	mov	r3, r0
 80059c4:	75fb      	strb	r3, [r7, #23]
      break;
 80059c6:	e053      	b.n	8005a70 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80059c8:	7afb      	ldrb	r3, [r7, #11]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4619      	mov	r1, r3
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fa5c 	bl	8005e8c <SCSI_ReadFormatCapacity>
 80059d4:	4603      	mov	r3, r0
 80059d6:	75fb      	strb	r3, [r7, #23]
      break;
 80059d8:	e04a      	b.n	8005a70 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80059da:	7afb      	ldrb	r3, [r7, #11]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	4619      	mov	r1, r3
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f921 	bl	8005c28 <SCSI_ReadCapacity10>
 80059e6:	4603      	mov	r3, r0
 80059e8:	75fb      	strb	r3, [r7, #23]
      break;
 80059ea:	e041      	b.n	8005a70 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80059ec:	7afb      	ldrb	r3, [r7, #11]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	4619      	mov	r1, r3
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f996 	bl	8005d24 <SCSI_ReadCapacity16>
 80059f8:	4603      	mov	r3, r0
 80059fa:	75fb      	strb	r3, [r7, #23]
      break;
 80059fc:	e038      	b.n	8005a70 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80059fe:	7afb      	ldrb	r3, [r7, #11]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	4619      	mov	r1, r3
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 fc99 	bl	800633c <SCSI_Read10>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a0e:	e02f      	b.n	8005a70 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8005a10:	7afb      	ldrb	r3, [r7, #11]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	4619      	mov	r1, r3
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 fd3a 	bl	8006490 <SCSI_Read12>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a20:	e026      	b.n	8005a70 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8005a22:	7afb      	ldrb	r3, [r7, #11]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	4619      	mov	r1, r3
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 fde5 	bl	80065f8 <SCSI_Write10>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	75fb      	strb	r3, [r7, #23]
      break;
 8005a32:	e01d      	b.n	8005a70 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8005a34:	7afb      	ldrb	r3, [r7, #11]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 feb2 	bl	80067a4 <SCSI_Write12>
 8005a40:	4603      	mov	r3, r0
 8005a42:	75fb      	strb	r3, [r7, #23]
      break;
 8005a44:	e014      	b.n	8005a70 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8005a46:	7afb      	ldrb	r3, [r7, #11]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 ff8f 	bl	8006970 <SCSI_Verify10>
 8005a52:	4603      	mov	r3, r0
 8005a54:	75fb      	strb	r3, [r7, #23]
      break;
 8005a56:	e00b      	b.n	8005a70 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8005a58:	7af9      	ldrb	r1, [r7, #11]
 8005a5a:	2320      	movs	r3, #32
 8005a5c:	2205      	movs	r2, #5
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fb9f 	bl	80061a2 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	2202      	movs	r2, #2
 8005a68:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8005a6a:	23ff      	movs	r3, #255	@ 0xff
 8005a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a6e:	bf00      	nop
  }

  return ret;
 8005a70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	460b      	mov	r3, r1
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	32b0      	adds	r2, #176	@ 0xb0
 8005a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a98:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d102      	bne.n	8005aa6 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8005aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa4:	e03f      	b.n	8005b26 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00a      	beq.n	8005ac6 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005ab6:	2320      	movs	r3, #32
 8005ab8:	2205      	movs	r2, #5
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 fb71 	bl	80061a2 <SCSI_SenseCode>

    return -1;
 8005ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac4:	e02f      	b.n	8005b26 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d10b      	bne.n	8005ae8 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005ad0:	7af9      	ldrb	r1, [r7, #11]
 8005ad2:	233a      	movs	r3, #58	@ 0x3a
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 fb63 	bl	80061a2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2205      	movs	r2, #5
 8005ae0:	721a      	strb	r2, [r3, #8]
    return -1;
 8005ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae6:	e01e      	b.n	8005b26 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	33b0      	adds	r3, #176	@ 0xb0
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	7afa      	ldrb	r2, [r7, #11]
 8005afc:	4610      	mov	r0, r2
 8005afe:	4798      	blx	r3
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005b06:	7af9      	ldrb	r1, [r7, #11]
 8005b08:	233a      	movs	r3, #58	@ 0x3a
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 fb48 	bl	80061a2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2205      	movs	r2, #5
 8005b16:	721a      	strb	r2, [r3, #8]

    return -1;
 8005b18:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1c:	e003      	b.n	8005b26 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2200      	movs	r2, #0
 8005b22:	60da      	str	r2, [r3, #12]

  return 0;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	607a      	str	r2, [r7, #4]
 8005b3c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	32b0      	adds	r2, #176	@ 0xb0
 8005b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d102      	bne.n	8005b5a <SCSI_Inquiry+0x2a>
  {
    return -1;
 8005b54:	f04f 33ff 	mov.w	r3, #4294967295
 8005b58:	e05e      	b.n	8005c18 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10a      	bne.n	8005b7a <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005b6a:	2320      	movs	r3, #32
 8005b6c:	2205      	movs	r2, #5
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fb17 	bl	80061a2 <SCSI_SenseCode>
    return -1;
 8005b74:	f04f 33ff 	mov.w	r3, #4294967295
 8005b78:	e04e      	b.n	8005c18 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d020      	beq.n	8005bca <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3302      	adds	r3, #2
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d105      	bne.n	8005b9e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8005b92:	2206      	movs	r2, #6
 8005b94:	4922      	ldr	r1, [pc, #136]	@ (8005c20 <SCSI_Inquiry+0xf0>)
 8005b96:	69b8      	ldr	r0, [r7, #24]
 8005b98:	f001 f870 	bl	8006c7c <SCSI_UpdateBotData>
 8005b9c:	e03b      	b.n	8005c16 <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3302      	adds	r3, #2
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b80      	cmp	r3, #128	@ 0x80
 8005ba6:	d105      	bne.n	8005bb4 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8005ba8:	2208      	movs	r2, #8
 8005baa:	491e      	ldr	r1, [pc, #120]	@ (8005c24 <SCSI_Inquiry+0xf4>)
 8005bac:	69b8      	ldr	r0, [r7, #24]
 8005bae:	f001 f865 	bl	8006c7c <SCSI_UpdateBotData>
 8005bb2:	e030      	b.n	8005c16 <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005bba:	2324      	movs	r3, #36	@ 0x24
 8005bbc:	2205      	movs	r2, #5
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 faef 	bl	80061a2 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8005bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc8:	e026      	b.n	8005c18 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	33b0      	adds	r3, #176	@ 0xb0
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8005bda:	69d9      	ldr	r1, [r3, #28]
 8005bdc:	7afa      	ldrb	r2, [r7, #11]
 8005bde:	4613      	mov	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8005be6:	440b      	add	r3, r1
 8005be8:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	3304      	adds	r3, #4
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	3305      	adds	r3, #5
 8005bf2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	8bfb      	ldrh	r3, [r7, #30]
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d303      	bcc.n	8005c0a <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3304      	adds	r3, #4
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8005c0a:	8bfb      	ldrh	r3, [r7, #30]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6979      	ldr	r1, [r7, #20]
 8005c10:	69b8      	ldr	r0, [r7, #24]
 8005c12:	f001 f833 	bl	8006c7c <SCSI_UpdateBotData>
  }

  return 0;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3720      	adds	r7, #32
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000084 	.word	0x20000084
 8005c24:	2000008c 	.word	0x2000008c

08005c28 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	460b      	mov	r3, r1
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	32b0      	adds	r2, #176	@ 0xb0
 8005c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c44:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d102      	bne.n	8005c52 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8005c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c50:	e064      	b.n	8005d1c <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	33b0      	adds	r3, #176	@ 0xb0
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8005c70:	7af8      	ldrb	r0, [r7, #11]
 8005c72:	4798      	blx	r3
 8005c74:	4603      	mov	r3, r0
 8005c76:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005c78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d104      	bne.n	8005c8a <SCSI_ReadCapacity10+0x62>
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d108      	bne.n	8005c9c <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005c8a:	7af9      	ldrb	r1, [r7, #11]
 8005c8c:	233a      	movs	r3, #58	@ 0x3a
 8005c8e:	2202      	movs	r2, #2
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 fa86 	bl	80061a2 <SCSI_SenseCode>
    return -1;
 8005c96:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9a:	e03f      	b.n	8005d1c <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	0e1b      	lsrs	r3, r3, #24
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	0c1b      	lsrs	r3, r3, #16
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	0a1b      	lsrs	r3, r3, #8
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005ce2:	161b      	asrs	r3, r3, #24
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005cf0:	141b      	asrs	r3, r3, #16
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005cfe:	0a1b      	lsrs	r3, r3, #8
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2208      	movs	r2, #8
 8005d18:	60da      	str	r2, [r3, #12]

  return 0;
 8005d1a:	2300      	movs	r3, #0

}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	32b0      	adds	r2, #176	@ 0xb0
 8005d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d40:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8005d48:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4c:	e09a      	b.n	8005e84 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	33b0      	adds	r3, #176	@ 0xb0
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8005d6c:	7af8      	ldrb	r0, [r7, #11]
 8005d6e:	4798      	blx	r3
 8005d70:	4603      	mov	r3, r0
 8005d72:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005d74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <SCSI_ReadCapacity16+0x62>
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d108      	bne.n	8005d98 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005d86:	7af9      	ldrb	r1, [r7, #11]
 8005d88:	233a      	movs	r3, #58	@ 0x3a
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 fa08 	bl	80061a2 <SCSI_SenseCode>
    return -1;
 8005d92:	f04f 33ff 	mov.w	r3, #4294967295
 8005d96:	e075      	b.n	8005e84 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	330a      	adds	r3, #10
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	330b      	adds	r3, #11
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005da8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	330c      	adds	r3, #12
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005db2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	320d      	adds	r2, #13
 8005db8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005dba:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	e008      	b.n	8005dd8 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	3310      	adds	r3, #16
 8005dce:	2200      	movs	r2, #0
 8005dd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d3f1      	bcc.n	8005dc6 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005de8:	3b01      	subs	r3, #1
 8005dea:	0e1b      	lsrs	r3, r3, #24
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	0c1b      	lsrs	r3, r3, #16
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	0a1b      	lsrs	r3, r3, #8
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005e28:	161b      	asrs	r3, r3, #24
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005e36:	141b      	asrs	r3, r3, #16
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005e44:	0a1b      	lsrs	r3, r3, #8
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	330a      	adds	r3, #10
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	330b      	adds	r3, #11
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005e6a:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	330c      	adds	r3, #12
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005e74:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	320d      	adds	r2, #13
 8005e7a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005e7c:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	60da      	str	r2, [r3, #12]

  return 0;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3720      	adds	r7, #32
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	460b      	mov	r3, r1
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	32b0      	adds	r2, #176	@ 0xb0
 8005ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d102      	bne.n	8005eb6 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8005eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb4:	e061      	b.n	8005f7a <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	33b0      	adds	r3, #176	@ 0xb0
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f107 0214 	add.w	r2, r7, #20
 8005ecc:	f107 0110 	add.w	r1, r7, #16
 8005ed0:	7af8      	ldrb	r0, [r7, #11]
 8005ed2:	4798      	blx	r3
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d104      	bne.n	8005eea <SCSI_ReadFormatCapacity+0x5e>
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d108      	bne.n	8005efc <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005eea:	7af9      	ldrb	r1, [r7, #11]
 8005eec:	233a      	movs	r3, #58	@ 0x3a
 8005eee:	2202      	movs	r2, #2
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 f956 	bl	80061a2 <SCSI_SenseCode>
    return -1;
 8005ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8005efa:	e03e      	b.n	8005f7a <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8005efc:	2300      	movs	r3, #0
 8005efe:	83fb      	strh	r3, [r7, #30]
 8005f00:	e007      	b.n	8005f12 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8005f02:	8bfb      	ldrh	r3, [r7, #30]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4413      	add	r3, r2
 8005f08:	2200      	movs	r2, #0
 8005f0a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8005f0c:	8bfb      	ldrh	r3, [r7, #30]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	83fb      	strh	r3, [r7, #30]
 8005f12:	8bfb      	ldrh	r3, [r7, #30]
 8005f14:	2b0b      	cmp	r3, #11
 8005f16:	d9f4      	bls.n	8005f02 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	2208      	movs	r2, #8
 8005f1c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	0e1b      	lsrs	r3, r3, #24
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2202      	movs	r2, #2
 8005f52:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005f54:	8abb      	ldrh	r3, [r7, #20]
 8005f56:	141b      	asrs	r3, r3, #16
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8005f5e:	8abb      	ldrh	r3, [r7, #20]
 8005f60:	0a1b      	lsrs	r3, r3, #8
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8005f6a:	8abb      	ldrh	r3, [r7, #20]
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	220c      	movs	r2, #12
 8005f76:	60da      	str	r2, [r3, #12]

  return 0;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3720      	adds	r7, #32
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	32b0      	adds	r2, #176	@ 0xb0
 8005f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8005fa2:	2304      	movs	r3, #4
 8005fa4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d102      	bne.n	8005fb2 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8005fac:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb0:	e027      	b.n	8006002 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	33b0      	adds	r3, #176	@ 0xb0
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	7afa      	ldrb	r2, [r7, #11]
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	4798      	blx	r3
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d006      	beq.n	8005fde <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8005fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800600c <SCSI_ModeSense6+0x88>)
 8005fd2:	789b      	ldrb	r3, [r3, #2]
 8005fd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	4b0c      	ldr	r3, [pc, #48]	@ (800600c <SCSI_ModeSense6+0x88>)
 8005fdc:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	8afb      	ldrh	r3, [r7, #22]
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d303      	bcc.n	8005ff4 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8005ff4:	8afb      	ldrh	r3, [r7, #22]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	4904      	ldr	r1, [pc, #16]	@ (800600c <SCSI_ModeSense6+0x88>)
 8005ffa:	6938      	ldr	r0, [r7, #16]
 8005ffc:	f000 fe3e 	bl	8006c7c <SCSI_UpdateBotData>

  return 0;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000094 	.word	0x20000094

08006010 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	460b      	mov	r3, r1
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	32b0      	adds	r2, #176	@ 0xb0
 8006028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800602e:	2308      	movs	r3, #8
 8006030:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8006038:	f04f 33ff 	mov.w	r3, #4294967295
 800603c:	e027      	b.n	800608e <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	33b0      	adds	r3, #176	@ 0xb0
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	7afa      	ldrb	r2, [r7, #11]
 8006052:	4610      	mov	r0, r2
 8006054:	4798      	blx	r3
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d006      	beq.n	800606a <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800605c:	4b0e      	ldr	r3, [pc, #56]	@ (8006098 <SCSI_ModeSense10+0x88>)
 800605e:	78db      	ldrb	r3, [r3, #3]
 8006060:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006064:	b2da      	uxtb	r2, r3
 8006066:	4b0c      	ldr	r3, [pc, #48]	@ (8006098 <SCSI_ModeSense10+0x88>)
 8006068:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3308      	adds	r3, #8
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	8afb      	ldrh	r3, [r7, #22]
 8006074:	4293      	cmp	r3, r2
 8006076:	d303      	bcc.n	8006080 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3308      	adds	r3, #8
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8006080:	8afb      	ldrh	r3, [r7, #22]
 8006082:	461a      	mov	r2, r3
 8006084:	4904      	ldr	r1, [pc, #16]	@ (8006098 <SCSI_ModeSense10+0x88>)
 8006086:	6938      	ldr	r0, [r7, #16]
 8006088:	f000 fdf8 	bl	8006c7c <SCSI_UpdateBotData>

  return 0;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000098 	.word	0x20000098

0800609c <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	460b      	mov	r3, r1
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	32b0      	adds	r2, #176	@ 0xb0
 80060b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d102      	bne.n	80060c6 <SCSI_RequestSense+0x2a>
  {
    return -1;
 80060c0:	f04f 33ff 	mov.w	r3, #4294967295
 80060c4:	e069      	b.n	800619a <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80060d6:	2320      	movs	r3, #32
 80060d8:	2205      	movs	r2, #5
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f861 	bl	80061a2 <SCSI_SenseCode>
    return -1;
 80060e0:	f04f 33ff 	mov.w	r3, #4294967295
 80060e4:	e059      	b.n	800619a <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80060e6:	2300      	movs	r3, #0
 80060e8:	75fb      	strb	r3, [r7, #23]
 80060ea:	e007      	b.n	80060fc <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 80060ec:	7dfb      	ldrb	r3, [r7, #23]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4413      	add	r3, r2
 80060f2:	2200      	movs	r2, #0
 80060f4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80060f6:	7dfb      	ldrb	r3, [r7, #23]
 80060f8:	3301      	adds	r3, #1
 80060fa:	75fb      	strb	r3, [r7, #23]
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
 80060fe:	2b11      	cmp	r3, #17
 8006100:	d9f4      	bls.n	80060ec <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2270      	movs	r2, #112	@ 0x70
 8006106:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	220c      	movs	r2, #12
 800610c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800611a:	429a      	cmp	r2, r3
 800611c:	d02e      	beq.n	800617c <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006124:	461a      	mov	r2, r3
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	3248      	adds	r2, #72	@ 0x48
 800612a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	3348      	adds	r3, #72	@ 0x48
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	4413      	add	r3, r2
 8006140:	791a      	ldrb	r2, [r3, #4]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	3348      	adds	r3, #72	@ 0x48
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	4413      	add	r3, r2
 8006154:	795a      	ldrb	r2, [r3, #5]
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006160:	3301      	adds	r3, #1
 8006162:	b2da      	uxtb	r2, r3
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006170:	2b04      	cmp	r3, #4
 8006172:	d103      	bne.n	800617c <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2212      	movs	r2, #18
 8006180:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3304      	adds	r3, #4
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b12      	cmp	r3, #18
 800618a:	d805      	bhi.n	8006198 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3304      	adds	r3, #4
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	4608      	mov	r0, r1
 80061ac:	4611      	mov	r1, r2
 80061ae:	461a      	mov	r2, r3
 80061b0:	4603      	mov	r3, r0
 80061b2:	70fb      	strb	r3, [r7, #3]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70bb      	strb	r3, [r7, #2]
 80061b8:	4613      	mov	r3, r2
 80061ba:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	32b0      	adds	r2, #176	@ 0xb0
 80061c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ca:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d02c      	beq.n	800622c <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80061d8:	461a      	mov	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3248      	adds	r2, #72	@ 0x48
 80061de:	78b9      	ldrb	r1, [r7, #2]
 80061e0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	3348      	adds	r3, #72	@ 0x48
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	4413      	add	r3, r2
 80061f2:	787a      	ldrb	r2, [r7, #1]
 80061f4:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	3348      	adds	r3, #72	@ 0x48
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	4413      	add	r3, r2
 8006204:	2200      	movs	r2, #0
 8006206:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800620e:	3301      	adds	r3, #1
 8006210:	b2da      	uxtb	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800621e:	2b04      	cmp	r3, #4
 8006220:	d105      	bne.n	800622e <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 800622a:	e000      	b.n	800622e <SCSI_SenseCode+0x8c>
    return;
 800622c:	bf00      	nop
  }
}
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	460b      	mov	r3, r1
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	32b0      	adds	r2, #176	@ 0xb0
 8006250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006254:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d102      	bne.n	8006262 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800625c:	f04f 33ff 	mov.w	r3, #4294967295
 8006260:	e03b      	b.n	80062da <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8006268:	2b01      	cmp	r3, #1
 800626a:	d10f      	bne.n	800628c <SCSI_StartStopUnit+0x54>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d108      	bne.n	800628c <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800627a:	7af9      	ldrb	r1, [r7, #11]
 800627c:	2324      	movs	r3, #36	@ 0x24
 800627e:	2205      	movs	r2, #5
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff ff8e 	bl	80061a2 <SCSI_SenseCode>

    return -1;
 8006286:	f04f 33ff 	mov.w	r3, #4294967295
 800628a:	e026      	b.n	80062da <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3304      	adds	r3, #4
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	2b01      	cmp	r3, #1
 8006298:	d104      	bne.n	80062a4 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80062a2:	e016      	b.n	80062d2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3304      	adds	r3, #4
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d104      	bne.n	80062bc <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2202      	movs	r2, #2
 80062b6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80062ba:	e00a      	b.n	80062d2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3304      	adds	r3, #4
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d103      	bne.n	80062d2 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2200      	movs	r2, #0
 80062d6:	60da      	str	r2, [r3, #12]

  return 0;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b087      	sub	sp, #28
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	460b      	mov	r3, r1
 80062ec:	607a      	str	r2, [r7, #4]
 80062ee:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	32b0      	adds	r2, #176	@ 0xb0
 80062fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fe:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d102      	bne.n	800630c <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8006306:	f04f 33ff 	mov.w	r3, #4294967295
 800630a:	e011      	b.n	8006330 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3304      	adds	r3, #4
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d104      	bne.n	8006320 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800631e:	e003      	b.n	8006328 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2200      	movs	r2, #0
 800632c:	60da      	str	r2, [r3, #12]

  return 0;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	460b      	mov	r3, r1
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	32b0      	adds	r2, #176	@ 0xb0
 8006354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006358:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d102      	bne.n	8006366 <SCSI_Read10+0x2a>
  {
    return -1;
 8006360:	f04f 33ff 	mov.w	r3, #4294967295
 8006364:	e090      	b.n	8006488 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	7a1b      	ldrb	r3, [r3, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	f040 8082 	bne.w	8006474 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8006376:	b25b      	sxtb	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	db0a      	blt.n	8006392 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006382:	2320      	movs	r3, #32
 8006384:	2205      	movs	r2, #5
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f7ff ff0b 	bl	80061a2 <SCSI_SenseCode>
      return -1;
 800638c:	f04f 33ff 	mov.w	r3, #4294967295
 8006390:	e07a      	b.n	8006488 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8006398:	2b02      	cmp	r3, #2
 800639a:	d108      	bne.n	80063ae <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800639c:	7af9      	ldrb	r1, [r7, #11]
 800639e:	233a      	movs	r3, #58	@ 0x3a
 80063a0:	2202      	movs	r2, #2
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f7ff fefd 	bl	80061a2 <SCSI_SenseCode>

      return -1;
 80063a8:	f04f 33ff 	mov.w	r3, #4294967295
 80063ac:	e06c      	b.n	8006488 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	33b0      	adds	r3, #176	@ 0xb0
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	7afa      	ldrb	r2, [r7, #11]
 80063c2:	4610      	mov	r0, r2
 80063c4:	4798      	blx	r3
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d008      	beq.n	80063de <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80063cc:	7af9      	ldrb	r1, [r7, #11]
 80063ce:	233a      	movs	r3, #58	@ 0x3a
 80063d0:	2202      	movs	r2, #2
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f7ff fee5 	bl	80061a2 <SCSI_SenseCode>
      return -1;
 80063d8:	f04f 33ff 	mov.w	r3, #4294967295
 80063dc:	e054      	b.n	8006488 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3302      	adds	r3, #2
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3303      	adds	r3, #3
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80063ee:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3304      	adds	r3, #4
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80063f8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	3205      	adds	r2, #5
 80063fe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8006400:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3307      	adds	r3, #7
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	021b      	lsls	r3, r3, #8
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	3208      	adds	r2, #8
 8006414:	7812      	ldrb	r2, [r2, #0]
 8006416:	431a      	orrs	r2, r3
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800642a:	7af9      	ldrb	r1, [r7, #11]
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 fadc 	bl	80069ea <SCSI_CheckAddressRange>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	da02      	bge.n	800643e <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006438:	f04f 33ff 	mov.w	r3, #4294967295
 800643c:	e024      	b.n	8006488 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800644a:	6979      	ldr	r1, [r7, #20]
 800644c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 8006450:	fb01 f303 	mul.w	r3, r1, r3
 8006454:	429a      	cmp	r2, r3
 8006456:	d00a      	beq.n	800646e <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800645e:	2320      	movs	r3, #32
 8006460:	2205      	movs	r2, #5
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f7ff fe9d 	bl	80061a2 <SCSI_SenseCode>
      return -1;
 8006468:	f04f 33ff 	mov.w	r3, #4294967295
 800646c:	e00c      	b.n	8006488 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2202      	movs	r2, #2
 8006472:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800647a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800647c:	7afb      	ldrb	r3, [r7, #11]
 800647e:	4619      	mov	r1, r3
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 fadf 	bl	8006a44 <SCSI_ProcessRead>
 8006486:	4603      	mov	r3, r0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	460b      	mov	r3, r1
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	32b0      	adds	r2, #176	@ 0xb0
 80064a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ac:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d102      	bne.n	80064ba <SCSI_Read12+0x2a>
  {
    return -1;
 80064b4:	f04f 33ff 	mov.w	r3, #4294967295
 80064b8:	e09a      	b.n	80065f0 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	7a1b      	ldrb	r3, [r3, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f040 808c 	bne.w	80065dc <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80064ca:	b25b      	sxtb	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	db0a      	blt.n	80064e6 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80064d6:	2320      	movs	r3, #32
 80064d8:	2205      	movs	r2, #5
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f7ff fe61 	bl	80061a2 <SCSI_SenseCode>
      return -1;
 80064e0:	f04f 33ff 	mov.w	r3, #4294967295
 80064e4:	e084      	b.n	80065f0 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d108      	bne.n	8006502 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80064f0:	7af9      	ldrb	r1, [r7, #11]
 80064f2:	233a      	movs	r3, #58	@ 0x3a
 80064f4:	2202      	movs	r2, #2
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f7ff fe53 	bl	80061a2 <SCSI_SenseCode>
      return -1;
 80064fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006500:	e076      	b.n	80065f0 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	33b0      	adds	r3, #176	@ 0xb0
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	7afa      	ldrb	r2, [r7, #11]
 8006516:	4610      	mov	r0, r2
 8006518:	4798      	blx	r3
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006520:	7af9      	ldrb	r1, [r7, #11]
 8006522:	233a      	movs	r3, #58	@ 0x3a
 8006524:	2202      	movs	r2, #2
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f7ff fe3b 	bl	80061a2 <SCSI_SenseCode>
      return -1;
 800652c:	f04f 33ff 	mov.w	r3, #4294967295
 8006530:	e05e      	b.n	80065f0 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3302      	adds	r3, #2
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3303      	adds	r3, #3
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006542:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800654c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	3205      	adds	r2, #5
 8006552:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8006554:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3306      	adds	r3, #6
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3307      	adds	r3, #7
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800656c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3308      	adds	r3, #8
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8006576:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	3209      	adds	r2, #9
 800657c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800657e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006592:	7af9      	ldrb	r1, [r7, #11]
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 fa28 	bl	80069ea <SCSI_CheckAddressRange>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	da02      	bge.n	80065a6 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80065a0:	f04f 33ff 	mov.w	r3, #4294967295
 80065a4:	e024      	b.n	80065f0 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80065b2:	6979      	ldr	r1, [r7, #20]
 80065b4:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 80065b8:	fb01 f303 	mul.w	r3, r1, r3
 80065bc:	429a      	cmp	r2, r3
 80065be:	d00a      	beq.n	80065d6 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80065c6:	2320      	movs	r3, #32
 80065c8:	2205      	movs	r2, #5
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f7ff fde9 	bl	80061a2 <SCSI_SenseCode>
      return -1;
 80065d0:	f04f 33ff 	mov.w	r3, #4294967295
 80065d4:	e00c      	b.n	80065f0 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2202      	movs	r2, #2
 80065da:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065e2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80065e4:	7afb      	ldrb	r3, [r7, #11]
 80065e6:	4619      	mov	r1, r3
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fa2b 	bl	8006a44 <SCSI_ProcessRead>
 80065ee:	4603      	mov	r3, r0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	460b      	mov	r3, r1
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	32b0      	adds	r2, #176	@ 0xb0
 8006610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006614:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d102      	bne.n	8006622 <SCSI_Write10+0x2a>
  {
    return -1;
 800661c:	f04f 33ff 	mov.w	r3, #4294967295
 8006620:	e0ba      	b.n	8006798 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	7a1b      	ldrb	r3, [r3, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	f040 80b0 	bne.w	800678c <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800663c:	2320      	movs	r3, #32
 800663e:	2205      	movs	r2, #5
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f7ff fdae 	bl	80061a2 <SCSI_SenseCode>
      return -1;
 8006646:	f04f 33ff 	mov.w	r3, #4294967295
 800664a:	e0a5      	b.n	8006798 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8006652:	b25b      	sxtb	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	da0a      	bge.n	800666e <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800665e:	2320      	movs	r3, #32
 8006660:	2205      	movs	r2, #5
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff fd9d 	bl	80061a2 <SCSI_SenseCode>
      return -1;
 8006668:	f04f 33ff 	mov.w	r3, #4294967295
 800666c:	e094      	b.n	8006798 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	33b0      	adds	r3, #176	@ 0xb0
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	7afa      	ldrb	r2, [r7, #11]
 8006682:	4610      	mov	r0, r2
 8006684:	4798      	blx	r3
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d008      	beq.n	800669e <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800668c:	7af9      	ldrb	r1, [r7, #11]
 800668e:	233a      	movs	r3, #58	@ 0x3a
 8006690:	2202      	movs	r2, #2
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f7ff fd85 	bl	80061a2 <SCSI_SenseCode>
      return -1;
 8006698:	f04f 33ff 	mov.w	r3, #4294967295
 800669c:	e07c      	b.n	8006798 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	33b0      	adds	r3, #176	@ 0xb0
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	7afa      	ldrb	r2, [r7, #11]
 80066b2:	4610      	mov	r0, r2
 80066b4:	4798      	blx	r3
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d008      	beq.n	80066ce <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80066bc:	7af9      	ldrb	r1, [r7, #11]
 80066be:	2327      	movs	r3, #39	@ 0x27
 80066c0:	2202      	movs	r2, #2
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7ff fd6d 	bl	80061a2 <SCSI_SenseCode>
      return -1;
 80066c8:	f04f 33ff 	mov.w	r3, #4294967295
 80066cc:	e064      	b.n	8006798 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	3302      	adds	r3, #2
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3303      	adds	r3, #3
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80066de:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3304      	adds	r3, #4
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80066e8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	3205      	adds	r2, #5
 80066ee:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80066f0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3307      	adds	r3, #7
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	3208      	adds	r2, #8
 8006704:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006706:	431a      	orrs	r2, r3
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800671a:	7af9      	ldrb	r1, [r7, #11]
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 f964 	bl	80069ea <SCSI_CheckAddressRange>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	da02      	bge.n	800672e <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006728:	f04f 33ff 	mov.w	r3, #4294967295
 800672c:	e034      	b.n	8006798 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800673a:	fb02 f303 	mul.w	r3, r2, r3
 800673e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	429a      	cmp	r2, r3
 800674a:	d00a      	beq.n	8006762 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006752:	2320      	movs	r3, #32
 8006754:	2205      	movs	r2, #5
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f7ff fd23 	bl	80061a2 <SCSI_SenseCode>
      return -1;
 800675c:	f04f 33ff 	mov.w	r3, #4294967295
 8006760:	e01a      	b.n	8006798 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006768:	bf28      	it	cs
 800676a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800676e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	2201      	movs	r2, #1
 8006774:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8006776:	4b0a      	ldr	r3, [pc, #40]	@ (80067a0 <SCSI_Write10+0x1a8>)
 8006778:	7819      	ldrb	r1, [r3, #0]
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f103 0210 	add.w	r2, r3, #16
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f002 fa6d 	bl	8008c62 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8006788:	2300      	movs	r3, #0
 800678a:	e005      	b.n	8006798 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800678c:	7afb      	ldrb	r3, [r7, #11]
 800678e:	4619      	mov	r1, r3
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 f9dd 	bl	8006b50 <SCSI_ProcessWrite>
 8006796:	4603      	mov	r3, r0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20000083 	.word	0x20000083

080067a4 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	460b      	mov	r3, r1
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	32b0      	adds	r2, #176	@ 0xb0
 80067bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d102      	bne.n	80067ce <SCSI_Write12+0x2a>
  {
    return -1;
 80067c8:	f04f 33ff 	mov.w	r3, #4294967295
 80067cc:	e0ca      	b.n	8006964 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	7a1b      	ldrb	r3, [r3, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f040 80c0 	bne.w	8006958 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80067e8:	2320      	movs	r3, #32
 80067ea:	2205      	movs	r2, #5
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7ff fcd8 	bl	80061a2 <SCSI_SenseCode>
      return -1;
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295
 80067f6:	e0b5      	b.n	8006964 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80067fe:	b25b      	sxtb	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	da0a      	bge.n	800681a <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800680a:	2320      	movs	r3, #32
 800680c:	2205      	movs	r2, #5
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f7ff fcc7 	bl	80061a2 <SCSI_SenseCode>
      return -1;
 8006814:	f04f 33ff 	mov.w	r3, #4294967295
 8006818:	e0a4      	b.n	8006964 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	33b0      	adds	r3, #176	@ 0xb0
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	7afa      	ldrb	r2, [r7, #11]
 800682e:	4610      	mov	r0, r2
 8006830:	4798      	blx	r3
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006838:	7af9      	ldrb	r1, [r7, #11]
 800683a:	233a      	movs	r3, #58	@ 0x3a
 800683c:	2202      	movs	r2, #2
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f7ff fcaf 	bl	80061a2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2205      	movs	r2, #5
 8006848:	721a      	strb	r2, [r3, #8]
      return -1;
 800684a:	f04f 33ff 	mov.w	r3, #4294967295
 800684e:	e089      	b.n	8006964 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	33b0      	adds	r3, #176	@ 0xb0
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	7afa      	ldrb	r2, [r7, #11]
 8006864:	4610      	mov	r0, r2
 8006866:	4798      	blx	r3
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00b      	beq.n	8006886 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800686e:	7af9      	ldrb	r1, [r7, #11]
 8006870:	2327      	movs	r3, #39	@ 0x27
 8006872:	2202      	movs	r2, #2
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f7ff fc94 	bl	80061a2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2205      	movs	r2, #5
 800687e:	721a      	strb	r2, [r3, #8]
      return -1;
 8006880:	f04f 33ff 	mov.w	r3, #4294967295
 8006884:	e06e      	b.n	8006964 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	3302      	adds	r3, #2
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3303      	adds	r3, #3
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006896:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3304      	adds	r3, #4
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80068a0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	3205      	adds	r2, #5
 80068a6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80068a8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3306      	adds	r3, #6
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3307      	adds	r3, #7
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80068c0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3308      	adds	r3, #8
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80068ca:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	3209      	adds	r2, #9
 80068d0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80068d2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80068e6:	7af9      	ldrb	r1, [r7, #11]
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 f87e 	bl	80069ea <SCSI_CheckAddressRange>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	da02      	bge.n	80068fa <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80068f4:	f04f 33ff 	mov.w	r3, #4294967295
 80068f8:	e034      	b.n	8006964 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8006906:	fb02 f303 	mul.w	r3, r2, r3
 800690a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	429a      	cmp	r2, r3
 8006916:	d00a      	beq.n	800692e <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800691e:	2320      	movs	r3, #32
 8006920:	2205      	movs	r2, #5
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f7ff fc3d 	bl	80061a2 <SCSI_SenseCode>
      return -1;
 8006928:	f04f 33ff 	mov.w	r3, #4294967295
 800692c:	e01a      	b.n	8006964 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006934:	bf28      	it	cs
 8006936:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800693a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2201      	movs	r2, #1
 8006940:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8006942:	4b0a      	ldr	r3, [pc, #40]	@ (800696c <SCSI_Write12+0x1c8>)
 8006944:	7819      	ldrb	r1, [r3, #0]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f103 0210 	add.w	r2, r3, #16
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f002 f987 	bl	8008c62 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8006954:	2300      	movs	r3, #0
 8006956:	e005      	b.n	8006964 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8006958:	7afb      	ldrb	r3, [r7, #11]
 800695a:	4619      	mov	r1, r3
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f8f7 	bl	8006b50 <SCSI_ProcessWrite>
 8006962:	4603      	mov	r3, r0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20000083 	.word	0x20000083

08006970 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	460b      	mov	r3, r1
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	32b0      	adds	r2, #176	@ 0xb0
 8006988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d102      	bne.n	800699a <SCSI_Verify10+0x2a>
  {
    return -1;
 8006994:	f04f 33ff 	mov.w	r3, #4294967295
 8006998:	e023      	b.n	80069e2 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3301      	adds	r3, #1
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d008      	beq.n	80069ba <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80069a8:	7af9      	ldrb	r1, [r7, #11]
 80069aa:	2324      	movs	r3, #36	@ 0x24
 80069ac:	2205      	movs	r2, #5
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f7ff fbf7 	bl	80061a2 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80069b4:	f04f 33ff 	mov.w	r3, #4294967295
 80069b8:	e013      	b.n	80069e2 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80069c6:	7af9      	ldrb	r1, [r7, #11]
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 f80e 	bl	80069ea <SCSI_CheckAddressRange>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	da02      	bge.n	80069da <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 80069d4:	f04f 33ff 	mov.w	r3, #4294967295
 80069d8:	e003      	b.n	80069e2 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2200      	movs	r2, #0
 80069de:	60da      	str	r2, [r3, #12]

  return 0;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b086      	sub	sp, #24
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]
 80069f6:	460b      	mov	r3, r1
 80069f8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	32b0      	adds	r2, #176	@ 0xb0
 8006a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d102      	bne.n	8006a16 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8006a10:	f04f 33ff 	mov.w	r3, #4294967295
 8006a14:	e011      	b.n	8006a3a <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	441a      	add	r2, r3
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d908      	bls.n	8006a38 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8006a26:	7af9      	ldrb	r1, [r7, #11]
 8006a28:	2321      	movs	r3, #33	@ 0x21
 8006a2a:	2205      	movs	r2, #5
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f7ff fbb8 	bl	80061a2 <SCSI_SenseCode>
    return -1;
 8006a32:	f04f 33ff 	mov.w	r3, #4294967295
 8006a36:	e000      	b.n	8006a3a <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006a44:	b590      	push	{r4, r7, lr}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	32b0      	adds	r2, #176	@ 0xb0
 8006a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d102      	bne.n	8006a6c <SCSI_ProcessRead+0x28>
  {
    return -1;
 8006a66:	f04f 33ff 	mov.w	r3, #4294967295
 8006a6a:	e06a      	b.n	8006b42 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8006a78:	fb02 f303 	mul.w	r3, r2, r3
 8006a7c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a84:	bf28      	it	cs
 8006a86:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8006a8a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	33b0      	adds	r3, #176	@ 0xb0
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	691c      	ldr	r4, [r3, #16]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f103 0110 	add.w	r1, r3, #16
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	78f8      	ldrb	r0, [r7, #3]
 8006abc:	47a0      	blx	r4
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	da08      	bge.n	8006ad6 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006ac4:	78f9      	ldrb	r1, [r7, #3]
 8006ac6:	2311      	movs	r3, #17
 8006ac8:	2204      	movs	r2, #4
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fb69 	bl	80061a2 <SCSI_SenseCode>
    return -1;
 8006ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad4:	e035      	b.n	8006b42 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8006ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8006b4c <SCSI_ProcessRead+0x108>)
 8006ad8:	7819      	ldrb	r1, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f103 0210 	add.w	r2, r3, #16
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f002 f89c 	bl	8008c20 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006af4:	4619      	mov	r1, r3
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006afc:	441a      	add	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006b10:	4619      	mov	r1, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b18:	1ad2      	subs	r2, r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	1ad2      	subs	r2, r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d102      	bne.n	8006b40 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2203      	movs	r2, #3
 8006b3e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd90      	pop	{r4, r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000082 	.word	0x20000082

08006b50 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006b50:	b590      	push	{r4, r7, lr}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	32b0      	adds	r2, #176	@ 0xb0
 8006b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d102      	bne.n	8006b78 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8006b72:	f04f 33ff 	mov.w	r3, #4294967295
 8006b76:	e07a      	b.n	8006c6e <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8006b84:	fb02 f303 	mul.w	r3, r2, r3
 8006b88:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b90:	bf28      	it	cs
 8006b92:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8006b96:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	33b0      	adds	r3, #176	@ 0xb0
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	695c      	ldr	r4, [r3, #20]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f103 0110 	add.w	r1, r3, #16
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	78f8      	ldrb	r0, [r7, #3]
 8006bc8:	47a0      	blx	r4
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	da08      	bge.n	8006be2 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8006bd0:	78f9      	ldrb	r1, [r7, #3]
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	2204      	movs	r2, #4
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7ff fae3 	bl	80061a2 <SCSI_SenseCode>
    return -1;
 8006bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006be0:	e045      	b.n	8006c6e <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006bee:	4619      	mov	r1, r3
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bf6:	441a      	add	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c12:	1ad2      	subs	r2, r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	1ad2      	subs	r2, r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d104      	bne.n	8006c3e <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006c34:	2100      	movs	r1, #0
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fe fce8 	bl	800560c <MSC_BOT_SendCSW>
 8006c3c:	e016      	b.n	8006c6c <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8006c4a:	fb02 f303 	mul.w	r3, r2, r3
 8006c4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c52:	bf28      	it	cs
 8006c54:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8006c58:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8006c5a:	4b07      	ldr	r3, [pc, #28]	@ (8006c78 <SCSI_ProcessWrite+0x128>)
 8006c5c:	7819      	ldrb	r1, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f103 0210 	add.w	r2, r3, #16
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 fffb 	bl	8008c62 <USBD_LL_PrepareReceive>
  }

  return 0;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd90      	pop	{r4, r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000083 	.word	0x20000083

08006c7c <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8006c8a:	88fb      	ldrh	r3, [r7, #6]
 8006c8c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d102      	bne.n	8006c9a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8006c94:	f04f 33ff 	mov.w	r3, #4294967295
 8006c98:	e013      	b.n	8006cc2 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8006c9a:	8afa      	ldrh	r2, [r7, #22]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8006ca0:	e00b      	b.n	8006cba <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8006ca2:	8afb      	ldrh	r3, [r7, #22]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8006ca8:	8afb      	ldrh	r3, [r7, #22]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	441a      	add	r2, r3
 8006cae:	8afb      	ldrh	r3, [r7, #22]
 8006cb0:	7811      	ldrb	r1, [r2, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	460a      	mov	r2, r1
 8006cb8:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8006cba:	8afb      	ldrh	r3, [r7, #22]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1f0      	bne.n	8006ca2 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b086      	sub	sp, #24
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e01f      	b.n	8006d26 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	79fa      	ldrb	r2, [r7, #7]
 8006d18:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f001 fe2c 	bl	8008978 <USBD_LL_Init>
 8006d20:	4603      	mov	r3, r0
 8006d22:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e025      	b.n	8006d92 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	32ae      	adds	r2, #174	@ 0xae
 8006d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00f      	beq.n	8006d82 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	32ae      	adds	r2, #174	@ 0xae
 8006d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d72:	f107 020e 	add.w	r2, r7, #14
 8006d76:	4610      	mov	r0, r2
 8006d78:	4798      	blx	r3
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f001 fe34 	bl	8008a10 <USBD_LL_Start>
 8006da8:	4603      	mov	r3, r0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dba:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d009      	beq.n	8006df6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	78fa      	ldrb	r2, [r7, #3]
 8006dec:	4611      	mov	r1, r2
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	4798      	blx	r3
 8006df2:	4603      	mov	r3, r0
 8006df4:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	78fa      	ldrb	r2, [r7, #3]
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	4798      	blx	r3
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006e26:	2303      	movs	r3, #3
 8006e28:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f001 f90b 	bl	8008062 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d01a      	beq.n	8006ea6 <USBD_LL_SetupStage+0x72>
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d822      	bhi.n	8006eba <USBD_LL_SetupStage+0x86>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <USBD_LL_SetupStage+0x4a>
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d00a      	beq.n	8006e92 <USBD_LL_SetupStage+0x5e>
 8006e7c:	e01d      	b.n	8006eba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fb62 	bl	8007550 <USBD_StdDevReq>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e90:	e020      	b.n	8006ed4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fbca 	bl	8007634 <USBD_StdItfReq>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea4:	e016      	b.n	8006ed4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006eac:	4619      	mov	r1, r3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fc2c 	bl	800770c <USBD_StdEPReq>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8006eb8:	e00c      	b.n	8006ed4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ec0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 fe20 	bl	8008b0e <USBD_LL_StallEP>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed2:	bf00      	nop
  }

  return ret;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b086      	sub	sp, #24
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	607a      	str	r2, [r7, #4]
 8006eea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006ef0:	7afb      	ldrb	r3, [r7, #11]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d16e      	bne.n	8006fd4 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006efc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	f040 8098 	bne.w	800703a <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d913      	bls.n	8006f3e <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	689a      	ldr	r2, [r3, #8]
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	1ad2      	subs	r2, r2, r3
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	68da      	ldr	r2, [r3, #12]
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	bf28      	it	cs
 8006f30:	4613      	movcs	r3, r2
 8006f32:	461a      	mov	r2, r3
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f001 f976 	bl	8008228 <USBD_CtlContinueRx>
 8006f3c:	e07d      	b.n	800703a <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006f44:	f003 031f 	and.w	r3, r3, #31
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d014      	beq.n	8006f76 <USBD_LL_DataOutStage+0x98>
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d81d      	bhi.n	8006f8c <USBD_LL_DataOutStage+0xae>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <USBD_LL_DataOutStage+0x7c>
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d003      	beq.n	8006f60 <USBD_LL_DataOutStage+0x82>
 8006f58:	e018      	b.n	8006f8c <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	75bb      	strb	r3, [r7, #22]
            break;
 8006f5e:	e018      	b.n	8006f92 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	4619      	mov	r1, r3
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 fa64 	bl	8007438 <USBD_CoreFindIF>
 8006f70:	4603      	mov	r3, r0
 8006f72:	75bb      	strb	r3, [r7, #22]
            break;
 8006f74:	e00d      	b.n	8006f92 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	4619      	mov	r1, r3
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 fa66 	bl	8007452 <USBD_CoreFindEP>
 8006f86:	4603      	mov	r3, r0
 8006f88:	75bb      	strb	r3, [r7, #22]
            break;
 8006f8a:	e002      	b.n	8006f92 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	75bb      	strb	r3, [r7, #22]
            break;
 8006f90:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006f92:	7dbb      	ldrb	r3, [r7, #22]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d119      	bne.n	8006fcc <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d113      	bne.n	8006fcc <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006fa4:	7dba      	ldrb	r2, [r7, #22]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	32ae      	adds	r2, #174	@ 0xae
 8006faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006fb4:	7dba      	ldrb	r2, [r7, #22]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006fbc:	7dba      	ldrb	r2, [r7, #22]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	32ae      	adds	r2, #174	@ 0xae
 8006fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f001 f93c 	bl	800824a <USBD_CtlSendStatus>
 8006fd2:	e032      	b.n	800703a <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006fd4:	7afb      	ldrb	r3, [r7, #11]
 8006fd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	4619      	mov	r1, r3
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 fa37 	bl	8007452 <USBD_CoreFindEP>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fe8:	7dbb      	ldrb	r3, [r7, #22]
 8006fea:	2bff      	cmp	r3, #255	@ 0xff
 8006fec:	d025      	beq.n	800703a <USBD_LL_DataOutStage+0x15c>
 8006fee:	7dbb      	ldrb	r3, [r7, #22]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d122      	bne.n	800703a <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d117      	bne.n	8007030 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007000:	7dba      	ldrb	r2, [r7, #22]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	32ae      	adds	r2, #174	@ 0xae
 8007006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00f      	beq.n	8007030 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007010:	7dba      	ldrb	r2, [r7, #22]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007018:	7dba      	ldrb	r2, [r7, #22]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	32ae      	adds	r2, #174	@ 0xae
 800701e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	7afa      	ldrb	r2, [r7, #11]
 8007026:	4611      	mov	r1, r2
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	4798      	blx	r3
 800702c:	4603      	mov	r3, r0
 800702e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007036:	7dfb      	ldrb	r3, [r7, #23]
 8007038:	e000      	b.n	800703c <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	460b      	mov	r3, r1
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007052:	7afb      	ldrb	r3, [r7, #11]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d16f      	bne.n	8007138 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3314      	adds	r3, #20
 800705c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007064:	2b02      	cmp	r3, #2
 8007066:	d15a      	bne.n	800711e <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	429a      	cmp	r2, r3
 8007072:	d914      	bls.n	800709e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	1ad2      	subs	r2, r2, r3
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	461a      	mov	r2, r3
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f001 f8bb 	bl	8008206 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007090:	2300      	movs	r3, #0
 8007092:	2200      	movs	r2, #0
 8007094:	2100      	movs	r1, #0
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f001 fde3 	bl	8008c62 <USBD_LL_PrepareReceive>
 800709c:	e03f      	b.n	800711e <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d11c      	bne.n	80070e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d316      	bcc.n	80070e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d20f      	bcs.n	80070e4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070c4:	2200      	movs	r2, #0
 80070c6:	2100      	movs	r1, #0
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f001 f89c 	bl	8008206 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070d6:	2300      	movs	r3, #0
 80070d8:	2200      	movs	r2, #0
 80070da:	2100      	movs	r1, #0
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f001 fdc0 	bl	8008c62 <USBD_LL_PrepareReceive>
 80070e2:	e01c      	b.n	800711e <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d10f      	bne.n	8007110 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d009      	beq.n	8007110 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007110:	2180      	movs	r1, #128	@ 0x80
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f001 fcfb 	bl	8008b0e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f001 f8a9 	bl	8008270 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d03a      	beq.n	800719e <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f7ff fe42 	bl	8006db2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007136:	e032      	b.n	800719e <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007138:	7afb      	ldrb	r3, [r7, #11]
 800713a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800713e:	b2db      	uxtb	r3, r3
 8007140:	4619      	mov	r1, r3
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 f985 	bl	8007452 <USBD_CoreFindEP>
 8007148:	4603      	mov	r3, r0
 800714a:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800714c:	7dfb      	ldrb	r3, [r7, #23]
 800714e:	2bff      	cmp	r3, #255	@ 0xff
 8007150:	d025      	beq.n	800719e <USBD_LL_DataInStage+0x15a>
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d122      	bne.n	800719e <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b03      	cmp	r3, #3
 8007162:	d11c      	bne.n	800719e <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007164:	7dfa      	ldrb	r2, [r7, #23]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	32ae      	adds	r2, #174	@ 0xae
 800716a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d014      	beq.n	800719e <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007174:	7dfa      	ldrb	r2, [r7, #23]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800717c:	7dfa      	ldrb	r2, [r7, #23]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	32ae      	adds	r2, #174	@ 0xae
 8007182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	7afa      	ldrb	r2, [r7, #11]
 800718a:	4611      	mov	r1, r2
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	4798      	blx	r3
 8007190:	4603      	mov	r3, r0
 8007192:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007194:	7dbb      	ldrb	r3, [r7, #22]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800719a:	7dbb      	ldrb	r3, [r7, #22]
 800719c:	e000      	b.n	80071a0 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d014      	beq.n	800720e <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00e      	beq.n	800720e <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6852      	ldr	r2, [r2, #4]
 80071fc:	b2d2      	uxtb	r2, r2
 80071fe:	4611      	mov	r1, r2
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	4798      	blx	r3
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800720a:	2303      	movs	r3, #3
 800720c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800720e:	2340      	movs	r3, #64	@ 0x40
 8007210:	2200      	movs	r2, #0
 8007212:	2100      	movs	r1, #0
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 fc16 	bl	8008a46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2240      	movs	r2, #64	@ 0x40
 8007226:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800722a:	2340      	movs	r3, #64	@ 0x40
 800722c:	2200      	movs	r2, #0
 800722e:	2180      	movs	r1, #128	@ 0x80
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 fc08 	bl	8008a46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2240      	movs	r2, #64	@ 0x40
 8007240:	621a      	str	r2, [r3, #32]

  return ret;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	78fa      	ldrb	r2, [r7, #3]
 800725c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b04      	cmp	r3, #4
 800727e:	d006      	beq.n	800728e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007286:	b2da      	uxtb	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2204      	movs	r2, #4
 8007292:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d106      	bne.n	80072c6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d110      	bne.n	800730a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00b      	beq.n	800730a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	32ae      	adds	r2, #174	@ 0xae
 800732a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007332:	2303      	movs	r3, #3
 8007334:	e01c      	b.n	8007370 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b03      	cmp	r3, #3
 8007340:	d115      	bne.n	800736e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	32ae      	adds	r2, #174	@ 0xae
 800734c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00b      	beq.n	800736e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	32ae      	adds	r2, #174	@ 0xae
 8007360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	78fa      	ldrb	r2, [r7, #3]
 8007368:	4611      	mov	r1, r2
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	32ae      	adds	r2, #174	@ 0xae
 800738e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007396:	2303      	movs	r3, #3
 8007398:	e01c      	b.n	80073d4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d115      	bne.n	80073d2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	32ae      	adds	r2, #174	@ 0xae
 80073b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00b      	beq.n	80073d2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	32ae      	adds	r2, #174	@ 0xae
 80073c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ca:	78fa      	ldrb	r2, [r7, #3]
 80073cc:	4611      	mov	r1, r2
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00e      	beq.n	800742e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6852      	ldr	r2, [r2, #4]
 800741c:	b2d2      	uxtb	r2, r2
 800741e:	4611      	mov	r1, r2
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	4798      	blx	r3
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800742a:	2303      	movs	r3, #3
 800742c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007444:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007446:	4618      	mov	r0, r3
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	460b      	mov	r3, r1
 800745c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800745e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007480:	2300      	movs	r3, #0
 8007482:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	885b      	ldrh	r3, [r3, #2]
 8007488:	b29b      	uxth	r3, r3
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	7812      	ldrb	r2, [r2, #0]
 800748e:	4293      	cmp	r3, r2
 8007490:	d91f      	bls.n	80074d2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007498:	e013      	b.n	80074c2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800749a:	f107 030a 	add.w	r3, r7, #10
 800749e:	4619      	mov	r1, r3
 80074a0:	6978      	ldr	r0, [r7, #20]
 80074a2:	f000 f81b 	bl	80074dc <USBD_GetNextDesc>
 80074a6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	785b      	ldrb	r3, [r3, #1]
 80074ac:	2b05      	cmp	r3, #5
 80074ae:	d108      	bne.n	80074c2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	789b      	ldrb	r3, [r3, #2]
 80074b8:	78fa      	ldrb	r2, [r7, #3]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d008      	beq.n	80074d0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80074be:	2300      	movs	r3, #0
 80074c0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	885b      	ldrh	r3, [r3, #2]
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	897b      	ldrh	r3, [r7, #10]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d8e5      	bhi.n	800749a <USBD_GetEpDesc+0x2e>
 80074ce:	e000      	b.n	80074d2 <USBD_GetEpDesc+0x66>
          break;
 80074d0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80074d2:	693b      	ldr	r3, [r7, #16]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	7812      	ldrb	r2, [r2, #0]
 80074f2:	4413      	add	r3, r2
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4413      	add	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007506:	68fb      	ldr	r3, [r7, #12]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	3301      	adds	r3, #1
 800752a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007532:	8a3b      	ldrh	r3, [r7, #16]
 8007534:	021b      	lsls	r3, r3, #8
 8007536:	b21a      	sxth	r2, r3
 8007538:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800753c:	4313      	orrs	r3, r2
 800753e:	b21b      	sxth	r3, r3
 8007540:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007542:	89fb      	ldrh	r3, [r7, #14]
}
 8007544:	4618      	mov	r0, r3
 8007546:	371c      	adds	r7, #28
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007566:	2b40      	cmp	r3, #64	@ 0x40
 8007568:	d005      	beq.n	8007576 <USBD_StdDevReq+0x26>
 800756a:	2b40      	cmp	r3, #64	@ 0x40
 800756c:	d857      	bhi.n	800761e <USBD_StdDevReq+0xce>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00f      	beq.n	8007592 <USBD_StdDevReq+0x42>
 8007572:	2b20      	cmp	r3, #32
 8007574:	d153      	bne.n	800761e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	32ae      	adds	r2, #174	@ 0xae
 8007580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	4798      	blx	r3
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]
      break;
 8007590:	e04a      	b.n	8007628 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	2b09      	cmp	r3, #9
 8007598:	d83b      	bhi.n	8007612 <USBD_StdDevReq+0xc2>
 800759a:	a201      	add	r2, pc, #4	@ (adr r2, 80075a0 <USBD_StdDevReq+0x50>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075f5 	.word	0x080075f5
 80075a4:	08007609 	.word	0x08007609
 80075a8:	08007613 	.word	0x08007613
 80075ac:	080075ff 	.word	0x080075ff
 80075b0:	08007613 	.word	0x08007613
 80075b4:	080075d3 	.word	0x080075d3
 80075b8:	080075c9 	.word	0x080075c9
 80075bc:	08007613 	.word	0x08007613
 80075c0:	080075eb 	.word	0x080075eb
 80075c4:	080075dd 	.word	0x080075dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fa3c 	bl	8007a48 <USBD_GetDescriptor>
          break;
 80075d0:	e024      	b.n	800761c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fba1 	bl	8007d1c <USBD_SetAddress>
          break;
 80075da:	e01f      	b.n	800761c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fbe0 	bl	8007da4 <USBD_SetConfig>
 80075e4:	4603      	mov	r3, r0
 80075e6:	73fb      	strb	r3, [r7, #15]
          break;
 80075e8:	e018      	b.n	800761c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fc83 	bl	8007ef8 <USBD_GetConfig>
          break;
 80075f2:	e013      	b.n	800761c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fcb4 	bl	8007f64 <USBD_GetStatus>
          break;
 80075fc:	e00e      	b.n	800761c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fce3 	bl	8007fcc <USBD_SetFeature>
          break;
 8007606:	e009      	b.n	800761c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fd07 	bl	800801e <USBD_ClrFeature>
          break;
 8007610:	e004      	b.n	800761c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fd5e 	bl	80080d6 <USBD_CtlError>
          break;
 800761a:	bf00      	nop
      }
      break;
 800761c:	e004      	b.n	8007628 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fd58 	bl	80080d6 <USBD_CtlError>
      break;
 8007626:	bf00      	nop
  }

  return ret;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop

08007634 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800764a:	2b40      	cmp	r3, #64	@ 0x40
 800764c:	d005      	beq.n	800765a <USBD_StdItfReq+0x26>
 800764e:	2b40      	cmp	r3, #64	@ 0x40
 8007650:	d852      	bhi.n	80076f8 <USBD_StdItfReq+0xc4>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <USBD_StdItfReq+0x26>
 8007656:	2b20      	cmp	r3, #32
 8007658:	d14e      	bne.n	80076f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007660:	b2db      	uxtb	r3, r3
 8007662:	3b01      	subs	r3, #1
 8007664:	2b02      	cmp	r3, #2
 8007666:	d840      	bhi.n	80076ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	889b      	ldrh	r3, [r3, #4]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b01      	cmp	r3, #1
 8007670:	d836      	bhi.n	80076e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	889b      	ldrh	r3, [r3, #4]
 8007676:	b2db      	uxtb	r3, r3
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff fedc 	bl	8007438 <USBD_CoreFindIF>
 8007680:	4603      	mov	r3, r0
 8007682:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	2bff      	cmp	r3, #255	@ 0xff
 8007688:	d01d      	beq.n	80076c6 <USBD_StdItfReq+0x92>
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d11a      	bne.n	80076c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007690:	7bba      	ldrb	r2, [r7, #14]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	32ae      	adds	r2, #174	@ 0xae
 8007696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00f      	beq.n	80076c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80076a0:	7bba      	ldrb	r2, [r7, #14]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80076a8:	7bba      	ldrb	r2, [r7, #14]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	32ae      	adds	r2, #174	@ 0xae
 80076ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	4798      	blx	r3
 80076ba:	4603      	mov	r3, r0
 80076bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80076be:	e004      	b.n	80076ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80076c0:	2303      	movs	r3, #3
 80076c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80076c4:	e001      	b.n	80076ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80076c6:	2303      	movs	r3, #3
 80076c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	88db      	ldrh	r3, [r3, #6]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d110      	bne.n	80076f4 <USBD_StdItfReq+0xc0>
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10d      	bne.n	80076f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fdb6 	bl	800824a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076de:	e009      	b.n	80076f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fcf7 	bl	80080d6 <USBD_CtlError>
          break;
 80076e8:	e004      	b.n	80076f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fcf2 	bl	80080d6 <USBD_CtlError>
          break;
 80076f2:	e000      	b.n	80076f6 <USBD_StdItfReq+0xc2>
          break;
 80076f4:	bf00      	nop
      }
      break;
 80076f6:	e004      	b.n	8007702 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fceb 	bl	80080d6 <USBD_CtlError>
      break;
 8007700:	bf00      	nop
  }

  return ret;
 8007702:	7bfb      	ldrb	r3, [r7, #15]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	889b      	ldrh	r3, [r3, #4]
 800771e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007728:	2b40      	cmp	r3, #64	@ 0x40
 800772a:	d007      	beq.n	800773c <USBD_StdEPReq+0x30>
 800772c:	2b40      	cmp	r3, #64	@ 0x40
 800772e:	f200 817f 	bhi.w	8007a30 <USBD_StdEPReq+0x324>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d02a      	beq.n	800778c <USBD_StdEPReq+0x80>
 8007736:	2b20      	cmp	r3, #32
 8007738:	f040 817a 	bne.w	8007a30 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800773c:	7bbb      	ldrb	r3, [r7, #14]
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff fe86 	bl	8007452 <USBD_CoreFindEP>
 8007746:	4603      	mov	r3, r0
 8007748:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800774a:	7b7b      	ldrb	r3, [r7, #13]
 800774c:	2bff      	cmp	r3, #255	@ 0xff
 800774e:	f000 8174 	beq.w	8007a3a <USBD_StdEPReq+0x32e>
 8007752:	7b7b      	ldrb	r3, [r7, #13]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f040 8170 	bne.w	8007a3a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800775a:	7b7a      	ldrb	r2, [r7, #13]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007762:	7b7a      	ldrb	r2, [r7, #13]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	32ae      	adds	r2, #174	@ 0xae
 8007768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 8163 	beq.w	8007a3a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007774:	7b7a      	ldrb	r2, [r7, #13]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	32ae      	adds	r2, #174	@ 0xae
 800777a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	4798      	blx	r3
 8007786:	4603      	mov	r3, r0
 8007788:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800778a:	e156      	b.n	8007a3a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	785b      	ldrb	r3, [r3, #1]
 8007790:	2b03      	cmp	r3, #3
 8007792:	d008      	beq.n	80077a6 <USBD_StdEPReq+0x9a>
 8007794:	2b03      	cmp	r3, #3
 8007796:	f300 8145 	bgt.w	8007a24 <USBD_StdEPReq+0x318>
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 809b 	beq.w	80078d6 <USBD_StdEPReq+0x1ca>
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d03c      	beq.n	800781e <USBD_StdEPReq+0x112>
 80077a4:	e13e      	b.n	8007a24 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d002      	beq.n	80077b8 <USBD_StdEPReq+0xac>
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d016      	beq.n	80077e4 <USBD_StdEPReq+0xd8>
 80077b6:	e02c      	b.n	8007812 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077b8:	7bbb      	ldrb	r3, [r7, #14]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00d      	beq.n	80077da <USBD_StdEPReq+0xce>
 80077be:	7bbb      	ldrb	r3, [r7, #14]
 80077c0:	2b80      	cmp	r3, #128	@ 0x80
 80077c2:	d00a      	beq.n	80077da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 f9a0 	bl	8008b0e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077ce:	2180      	movs	r1, #128	@ 0x80
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 f99c 	bl	8008b0e <USBD_LL_StallEP>
 80077d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077d8:	e020      	b.n	800781c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fc7a 	bl	80080d6 <USBD_CtlError>
              break;
 80077e2:	e01b      	b.n	800781c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	885b      	ldrh	r3, [r3, #2]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10e      	bne.n	800780a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00b      	beq.n	800780a <USBD_StdEPReq+0xfe>
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	2b80      	cmp	r3, #128	@ 0x80
 80077f6:	d008      	beq.n	800780a <USBD_StdEPReq+0xfe>
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	88db      	ldrh	r3, [r3, #6]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d104      	bne.n	800780a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f001 f982 	bl	8008b0e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fd1d 	bl	800824a <USBD_CtlSendStatus>

              break;
 8007810:	e004      	b.n	800781c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fc5e 	bl	80080d6 <USBD_CtlError>
              break;
 800781a:	bf00      	nop
          }
          break;
 800781c:	e107      	b.n	8007a2e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	d002      	beq.n	8007830 <USBD_StdEPReq+0x124>
 800782a:	2b03      	cmp	r3, #3
 800782c:	d016      	beq.n	800785c <USBD_StdEPReq+0x150>
 800782e:	e04b      	b.n	80078c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00d      	beq.n	8007852 <USBD_StdEPReq+0x146>
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	2b80      	cmp	r3, #128	@ 0x80
 800783a:	d00a      	beq.n	8007852 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 f964 	bl	8008b0e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007846:	2180      	movs	r1, #128	@ 0x80
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 f960 	bl	8008b0e <USBD_LL_StallEP>
 800784e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007850:	e040      	b.n	80078d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fc3e 	bl	80080d6 <USBD_CtlError>
              break;
 800785a:	e03b      	b.n	80078d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	885b      	ldrh	r3, [r3, #2]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d136      	bne.n	80078d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800786a:	2b00      	cmp	r3, #0
 800786c:	d004      	beq.n	8007878 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800786e:	7bbb      	ldrb	r3, [r7, #14]
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 f96a 	bl	8008b4c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fce6 	bl	800824a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff fde5 	bl	8007452 <USBD_CoreFindEP>
 8007888:	4603      	mov	r3, r0
 800788a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800788c:	7b7b      	ldrb	r3, [r7, #13]
 800788e:	2bff      	cmp	r3, #255	@ 0xff
 8007890:	d01f      	beq.n	80078d2 <USBD_StdEPReq+0x1c6>
 8007892:	7b7b      	ldrb	r3, [r7, #13]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d11c      	bne.n	80078d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007898:	7b7a      	ldrb	r2, [r7, #13]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80078a0:	7b7a      	ldrb	r2, [r7, #13]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	32ae      	adds	r2, #174	@ 0xae
 80078a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d010      	beq.n	80078d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078b0:	7b7a      	ldrb	r2, [r7, #13]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	32ae      	adds	r2, #174	@ 0xae
 80078b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	4798      	blx	r3
 80078c2:	4603      	mov	r3, r0
 80078c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80078c6:	e004      	b.n	80078d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fc03 	bl	80080d6 <USBD_CtlError>
              break;
 80078d0:	e000      	b.n	80078d4 <USBD_StdEPReq+0x1c8>
              break;
 80078d2:	bf00      	nop
          }
          break;
 80078d4:	e0ab      	b.n	8007a2e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d002      	beq.n	80078e8 <USBD_StdEPReq+0x1dc>
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d032      	beq.n	800794c <USBD_StdEPReq+0x240>
 80078e6:	e097      	b.n	8007a18 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d007      	beq.n	80078fe <USBD_StdEPReq+0x1f2>
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b80      	cmp	r3, #128	@ 0x80
 80078f2:	d004      	beq.n	80078fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fbed 	bl	80080d6 <USBD_CtlError>
                break;
 80078fc:	e091      	b.n	8007a22 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007902:	2b00      	cmp	r3, #0
 8007904:	da0b      	bge.n	800791e <USBD_StdEPReq+0x212>
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800790c:	4613      	mov	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	3310      	adds	r3, #16
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	4413      	add	r3, r2
 800791a:	3304      	adds	r3, #4
 800791c:	e00b      	b.n	8007936 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007924:	4613      	mov	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	4413      	add	r3, r2
 8007934:	3304      	adds	r3, #4
 8007936:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2202      	movs	r2, #2
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fc43 	bl	80081d0 <USBD_CtlSendData>
              break;
 800794a:	e06a      	b.n	8007a22 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800794c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007950:	2b00      	cmp	r3, #0
 8007952:	da11      	bge.n	8007978 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	f003 020f 	and.w	r2, r3, #15
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	4613      	mov	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	440b      	add	r3, r1
 8007966:	3324      	adds	r3, #36	@ 0x24
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d117      	bne.n	800799e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fbb0 	bl	80080d6 <USBD_CtlError>
                  break;
 8007976:	e054      	b.n	8007a22 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	f003 020f 	and.w	r2, r3, #15
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	4613      	mov	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	440b      	add	r3, r1
 800798a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d104      	bne.n	800799e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fb9d 	bl	80080d6 <USBD_CtlError>
                  break;
 800799c:	e041      	b.n	8007a22 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800799e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	da0b      	bge.n	80079be <USBD_StdEPReq+0x2b2>
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079ac:	4613      	mov	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	3310      	adds	r3, #16
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	4413      	add	r3, r2
 80079ba:	3304      	adds	r3, #4
 80079bc:	e00b      	b.n	80079d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079be:	7bbb      	ldrb	r3, [r7, #14]
 80079c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079c4:	4613      	mov	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	4413      	add	r3, r2
 80079d4:	3304      	adds	r3, #4
 80079d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <USBD_StdEPReq+0x2d8>
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	2b80      	cmp	r3, #128	@ 0x80
 80079e2:	d103      	bne.n	80079ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	e00e      	b.n	8007a0a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 f8ca 	bl	8008b8a <USBD_LL_IsStallEP>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2201      	movs	r2, #1
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	e002      	b.n	8007a0a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2200      	movs	r2, #0
 8007a08:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fbdd 	bl	80081d0 <USBD_CtlSendData>
              break;
 8007a16:	e004      	b.n	8007a22 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fb5b 	bl	80080d6 <USBD_CtlError>
              break;
 8007a20:	bf00      	nop
          }
          break;
 8007a22:	e004      	b.n	8007a2e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fb55 	bl	80080d6 <USBD_CtlError>
          break;
 8007a2c:	bf00      	nop
      }
      break;
 8007a2e:	e005      	b.n	8007a3c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fb4f 	bl	80080d6 <USBD_CtlError>
      break;
 8007a38:	e000      	b.n	8007a3c <USBD_StdEPReq+0x330>
      break;
 8007a3a:	bf00      	nop
  }

  return ret;
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	885b      	ldrh	r3, [r3, #2]
 8007a62:	0a1b      	lsrs	r3, r3, #8
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	3b01      	subs	r3, #1
 8007a68:	2b06      	cmp	r3, #6
 8007a6a:	f200 8128 	bhi.w	8007cbe <USBD_GetDescriptor+0x276>
 8007a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a74 <USBD_GetDescriptor+0x2c>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007a91 	.word	0x08007a91
 8007a78:	08007aa9 	.word	0x08007aa9
 8007a7c:	08007ae9 	.word	0x08007ae9
 8007a80:	08007cbf 	.word	0x08007cbf
 8007a84:	08007cbf 	.word	0x08007cbf
 8007a88:	08007c5f 	.word	0x08007c5f
 8007a8c:	08007c8b 	.word	0x08007c8b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	7c12      	ldrb	r2, [r2, #16]
 8007a9c:	f107 0108 	add.w	r1, r7, #8
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	4798      	blx	r3
 8007aa4:	60f8      	str	r0, [r7, #12]
      break;
 8007aa6:	e112      	b.n	8007cce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	7c1b      	ldrb	r3, [r3, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10d      	bne.n	8007acc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab8:	f107 0208 	add.w	r2, r7, #8
 8007abc:	4610      	mov	r0, r2
 8007abe:	4798      	blx	r3
 8007ac0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007aca:	e100      	b.n	8007cce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad4:	f107 0208 	add.w	r2, r7, #8
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4798      	blx	r3
 8007adc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	701a      	strb	r2, [r3, #0]
      break;
 8007ae6:	e0f2      	b.n	8007cce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	885b      	ldrh	r3, [r3, #2]
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b05      	cmp	r3, #5
 8007af0:	f200 80ac 	bhi.w	8007c4c <USBD_GetDescriptor+0x204>
 8007af4:	a201      	add	r2, pc, #4	@ (adr r2, 8007afc <USBD_GetDescriptor+0xb4>)
 8007af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afa:	bf00      	nop
 8007afc:	08007b15 	.word	0x08007b15
 8007b00:	08007b49 	.word	0x08007b49
 8007b04:	08007b7d 	.word	0x08007b7d
 8007b08:	08007bb1 	.word	0x08007bb1
 8007b0c:	08007be5 	.word	0x08007be5
 8007b10:	08007c19 	.word	0x08007c19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	7c12      	ldrb	r2, [r2, #16]
 8007b2c:	f107 0108 	add.w	r1, r7, #8
 8007b30:	4610      	mov	r0, r2
 8007b32:	4798      	blx	r3
 8007b34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b36:	e091      	b.n	8007c5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 facb 	bl	80080d6 <USBD_CtlError>
            err++;
 8007b40:	7afb      	ldrb	r3, [r7, #11]
 8007b42:	3301      	adds	r3, #1
 8007b44:	72fb      	strb	r3, [r7, #11]
          break;
 8007b46:	e089      	b.n	8007c5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	7c12      	ldrb	r2, [r2, #16]
 8007b60:	f107 0108 	add.w	r1, r7, #8
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b6a:	e077      	b.n	8007c5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fab1 	bl	80080d6 <USBD_CtlError>
            err++;
 8007b74:	7afb      	ldrb	r3, [r7, #11]
 8007b76:	3301      	adds	r3, #1
 8007b78:	72fb      	strb	r3, [r7, #11]
          break;
 8007b7a:	e06f      	b.n	8007c5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00b      	beq.n	8007ba0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	7c12      	ldrb	r2, [r2, #16]
 8007b94:	f107 0108 	add.w	r1, r7, #8
 8007b98:	4610      	mov	r0, r2
 8007b9a:	4798      	blx	r3
 8007b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b9e:	e05d      	b.n	8007c5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa97 	bl	80080d6 <USBD_CtlError>
            err++;
 8007ba8:	7afb      	ldrb	r3, [r7, #11]
 8007baa:	3301      	adds	r3, #1
 8007bac:	72fb      	strb	r3, [r7, #11]
          break;
 8007bae:	e055      	b.n	8007c5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00b      	beq.n	8007bd4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	7c12      	ldrb	r2, [r2, #16]
 8007bc8:	f107 0108 	add.w	r1, r7, #8
 8007bcc:	4610      	mov	r0, r2
 8007bce:	4798      	blx	r3
 8007bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bd2:	e043      	b.n	8007c5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fa7d 	bl	80080d6 <USBD_CtlError>
            err++;
 8007bdc:	7afb      	ldrb	r3, [r7, #11]
 8007bde:	3301      	adds	r3, #1
 8007be0:	72fb      	strb	r3, [r7, #11]
          break;
 8007be2:	e03b      	b.n	8007c5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	7c12      	ldrb	r2, [r2, #16]
 8007bfc:	f107 0108 	add.w	r1, r7, #8
 8007c00:	4610      	mov	r0, r2
 8007c02:	4798      	blx	r3
 8007c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c06:	e029      	b.n	8007c5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fa63 	bl	80080d6 <USBD_CtlError>
            err++;
 8007c10:	7afb      	ldrb	r3, [r7, #11]
 8007c12:	3301      	adds	r3, #1
 8007c14:	72fb      	strb	r3, [r7, #11]
          break;
 8007c16:	e021      	b.n	8007c5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00b      	beq.n	8007c3c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	7c12      	ldrb	r2, [r2, #16]
 8007c30:	f107 0108 	add.w	r1, r7, #8
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
 8007c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c3a:	e00f      	b.n	8007c5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fa49 	bl	80080d6 <USBD_CtlError>
            err++;
 8007c44:	7afb      	ldrb	r3, [r7, #11]
 8007c46:	3301      	adds	r3, #1
 8007c48:	72fb      	strb	r3, [r7, #11]
          break;
 8007c4a:	e007      	b.n	8007c5c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fa41 	bl	80080d6 <USBD_CtlError>
          err++;
 8007c54:	7afb      	ldrb	r3, [r7, #11]
 8007c56:	3301      	adds	r3, #1
 8007c58:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007c5a:	bf00      	nop
      }
      break;
 8007c5c:	e037      	b.n	8007cce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	7c1b      	ldrb	r3, [r3, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d109      	bne.n	8007c7a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c6e:	f107 0208 	add.w	r2, r7, #8
 8007c72:	4610      	mov	r0, r2
 8007c74:	4798      	blx	r3
 8007c76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c78:	e029      	b.n	8007cce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fa2a 	bl	80080d6 <USBD_CtlError>
        err++;
 8007c82:	7afb      	ldrb	r3, [r7, #11]
 8007c84:	3301      	adds	r3, #1
 8007c86:	72fb      	strb	r3, [r7, #11]
      break;
 8007c88:	e021      	b.n	8007cce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	7c1b      	ldrb	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10d      	bne.n	8007cae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c9a:	f107 0208 	add.w	r2, r7, #8
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	4798      	blx	r3
 8007ca2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	2207      	movs	r2, #7
 8007caa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cac:	e00f      	b.n	8007cce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fa10 	bl	80080d6 <USBD_CtlError>
        err++;
 8007cb6:	7afb      	ldrb	r3, [r7, #11]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	72fb      	strb	r3, [r7, #11]
      break;
 8007cbc:	e007      	b.n	8007cce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fa08 	bl	80080d6 <USBD_CtlError>
      err++;
 8007cc6:	7afb      	ldrb	r3, [r7, #11]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	72fb      	strb	r3, [r7, #11]
      break;
 8007ccc:	bf00      	nop
  }

  if (err != 0U)
 8007cce:	7afb      	ldrb	r3, [r7, #11]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d11e      	bne.n	8007d12 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	88db      	ldrh	r3, [r3, #6]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d016      	beq.n	8007d0a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007cdc:	893b      	ldrh	r3, [r7, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00e      	beq.n	8007d00 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	88da      	ldrh	r2, [r3, #6]
 8007ce6:	893b      	ldrh	r3, [r7, #8]
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	bf28      	it	cs
 8007cec:	4613      	movcs	r3, r2
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cf2:	893b      	ldrh	r3, [r7, #8]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	68f9      	ldr	r1, [r7, #12]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fa69 	bl	80081d0 <USBD_CtlSendData>
 8007cfe:	e009      	b.n	8007d14 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f9e7 	bl	80080d6 <USBD_CtlError>
 8007d08:	e004      	b.n	8007d14 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa9d 	bl	800824a <USBD_CtlSendStatus>
 8007d10:	e000      	b.n	8007d14 <USBD_GetDescriptor+0x2cc>
    return;
 8007d12:	bf00      	nop
  }
}
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop

08007d1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	889b      	ldrh	r3, [r3, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d131      	bne.n	8007d92 <USBD_SetAddress+0x76>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	88db      	ldrh	r3, [r3, #6]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d12d      	bne.n	8007d92 <USBD_SetAddress+0x76>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	885b      	ldrh	r3, [r3, #2]
 8007d3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d3c:	d829      	bhi.n	8007d92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	885b      	ldrh	r3, [r3, #2]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d104      	bne.n	8007d60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f9bc 	bl	80080d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d5e:	e01d      	b.n	8007d9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	7bfa      	ldrb	r2, [r7, #15]
 8007d64:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 ff38 	bl	8008be2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa69 	bl	800824a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2202      	movs	r2, #2
 8007d82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d86:	e009      	b.n	8007d9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d90:	e004      	b.n	8007d9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f99e 	bl	80080d6 <USBD_CtlError>
  }
}
 8007d9a:	bf00      	nop
 8007d9c:	bf00      	nop
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	885b      	ldrh	r3, [r3, #2]
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	4b4e      	ldr	r3, [pc, #312]	@ (8007ef4 <USBD_SetConfig+0x150>)
 8007dba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8007ef4 <USBD_SetConfig+0x150>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d905      	bls.n	8007dd0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f985 	bl	80080d6 <USBD_CtlError>
    return USBD_FAIL;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e08c      	b.n	8007eea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d002      	beq.n	8007de2 <USBD_SetConfig+0x3e>
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d029      	beq.n	8007e34 <USBD_SetConfig+0x90>
 8007de0:	e075      	b.n	8007ece <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007de2:	4b44      	ldr	r3, [pc, #272]	@ (8007ef4 <USBD_SetConfig+0x150>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d020      	beq.n	8007e2c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007dea:	4b42      	ldr	r3, [pc, #264]	@ (8007ef4 <USBD_SetConfig+0x150>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007df4:	4b3f      	ldr	r3, [pc, #252]	@ (8007ef4 <USBD_SetConfig+0x150>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7fe ffe4 	bl	8006dc8 <USBD_SetClassConfig>
 8007e00:	4603      	mov	r3, r0
 8007e02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d008      	beq.n	8007e1c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f962 	bl	80080d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2202      	movs	r2, #2
 8007e16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e1a:	e065      	b.n	8007ee8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fa14 	bl	800824a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2203      	movs	r2, #3
 8007e26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007e2a:	e05d      	b.n	8007ee8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fa0c 	bl	800824a <USBD_CtlSendStatus>
      break;
 8007e32:	e059      	b.n	8007ee8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007e34:	4b2f      	ldr	r3, [pc, #188]	@ (8007ef4 <USBD_SetConfig+0x150>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d112      	bne.n	8007e62 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007e44:	4b2b      	ldr	r3, [pc, #172]	@ (8007ef4 <USBD_SetConfig+0x150>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e4e:	4b29      	ldr	r3, [pc, #164]	@ (8007ef4 <USBD_SetConfig+0x150>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7fe ffd3 	bl	8006e00 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f9f5 	bl	800824a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e60:	e042      	b.n	8007ee8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007e62:	4b24      	ldr	r3, [pc, #144]	@ (8007ef4 <USBD_SetConfig+0x150>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d02a      	beq.n	8007ec6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7fe ffc1 	bl	8006e00 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ef4 <USBD_SetConfig+0x150>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e88:	4b1a      	ldr	r3, [pc, #104]	@ (8007ef4 <USBD_SetConfig+0x150>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7fe ff9a 	bl	8006dc8 <USBD_SetClassConfig>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00f      	beq.n	8007ebe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f918 	bl	80080d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7fe ffa6 	bl	8006e00 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007ebc:	e014      	b.n	8007ee8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f9c3 	bl	800824a <USBD_CtlSendStatus>
      break;
 8007ec4:	e010      	b.n	8007ee8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f9bf 	bl	800824a <USBD_CtlSendStatus>
      break;
 8007ecc:	e00c      	b.n	8007ee8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f900 	bl	80080d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ed6:	4b07      	ldr	r3, [pc, #28]	@ (8007ef4 <USBD_SetConfig+0x150>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7fe ff8f 	bl	8006e00 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee6:	bf00      	nop
  }

  return ret;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	200101b4 	.word	0x200101b4

08007ef8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	88db      	ldrh	r3, [r3, #6]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d004      	beq.n	8007f14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f8e2 	bl	80080d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f12:	e023      	b.n	8007f5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	dc02      	bgt.n	8007f26 <USBD_GetConfig+0x2e>
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	dc03      	bgt.n	8007f2c <USBD_GetConfig+0x34>
 8007f24:	e015      	b.n	8007f52 <USBD_GetConfig+0x5a>
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d00b      	beq.n	8007f42 <USBD_GetConfig+0x4a>
 8007f2a:	e012      	b.n	8007f52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3308      	adds	r3, #8
 8007f36:	2201      	movs	r2, #1
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f948 	bl	80081d0 <USBD_CtlSendData>
        break;
 8007f40:	e00c      	b.n	8007f5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	3304      	adds	r3, #4
 8007f46:	2201      	movs	r2, #1
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f940 	bl	80081d0 <USBD_CtlSendData>
        break;
 8007f50:	e004      	b.n	8007f5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f8be 	bl	80080d6 <USBD_CtlError>
        break;
 8007f5a:	bf00      	nop
}
 8007f5c:	bf00      	nop
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	3b01      	subs	r3, #1
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d81e      	bhi.n	8007fba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	88db      	ldrh	r3, [r3, #6]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d004      	beq.n	8007f8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f8a5 	bl	80080d6 <USBD_CtlError>
        break;
 8007f8c:	e01a      	b.n	8007fc4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d005      	beq.n	8007faa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f043 0202 	orr.w	r2, r3, #2
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	330c      	adds	r3, #12
 8007fae:	2202      	movs	r2, #2
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f90c 	bl	80081d0 <USBD_CtlSendData>
      break;
 8007fb8:	e004      	b.n	8007fc4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f88a 	bl	80080d6 <USBD_CtlError>
      break;
 8007fc2:	bf00      	nop
  }
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	885b      	ldrh	r3, [r3, #2]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d107      	bne.n	8007fee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f92f 	bl	800824a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007fec:	e013      	b.n	8008016 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	885b      	ldrh	r3, [r3, #2]
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d10b      	bne.n	800800e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	889b      	ldrh	r3, [r3, #4]
 8007ffa:	0a1b      	lsrs	r3, r3, #8
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f91f 	bl	800824a <USBD_CtlSendStatus>
}
 800800c:	e003      	b.n	8008016 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f860 	bl	80080d6 <USBD_CtlError>
}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800802e:	b2db      	uxtb	r3, r3
 8008030:	3b01      	subs	r3, #1
 8008032:	2b02      	cmp	r3, #2
 8008034:	d80b      	bhi.n	800804e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	885b      	ldrh	r3, [r3, #2]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d10c      	bne.n	8008058 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f8ff 	bl	800824a <USBD_CtlSendStatus>
      }
      break;
 800804c:	e004      	b.n	8008058 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f840 	bl	80080d6 <USBD_CtlError>
      break;
 8008056:	e000      	b.n	800805a <USBD_ClrFeature+0x3c>
      break;
 8008058:	bf00      	nop
  }
}
 800805a:	bf00      	nop
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	781a      	ldrb	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3301      	adds	r3, #1
 800807c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	781a      	ldrb	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f7ff fa41 	bl	8007514 <SWAPBYTE>
 8008092:	4603      	mov	r3, r0
 8008094:	461a      	mov	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3301      	adds	r3, #1
 800809e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3301      	adds	r3, #1
 80080a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f7ff fa34 	bl	8007514 <SWAPBYTE>
 80080ac:	4603      	mov	r3, r0
 80080ae:	461a      	mov	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3301      	adds	r3, #1
 80080b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	3301      	adds	r3, #1
 80080be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f7ff fa27 	bl	8007514 <SWAPBYTE>
 80080c6:	4603      	mov	r3, r0
 80080c8:	461a      	mov	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	80da      	strh	r2, [r3, #6]
}
 80080ce:	bf00      	nop
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b082      	sub	sp, #8
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80080e0:	2180      	movs	r1, #128	@ 0x80
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fd13 	bl	8008b0e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80080e8:	2100      	movs	r1, #0
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fd0f 	bl	8008b0e <USBD_LL_StallEP>
}
 80080f0:	bf00      	nop
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d042      	beq.n	8008194 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008112:	6938      	ldr	r0, [r7, #16]
 8008114:	f000 f842 	bl	800819c <USBD_GetLen>
 8008118:	4603      	mov	r3, r0
 800811a:	3301      	adds	r3, #1
 800811c:	005b      	lsls	r3, r3, #1
 800811e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008122:	d808      	bhi.n	8008136 <USBD_GetString+0x3e>
 8008124:	6938      	ldr	r0, [r7, #16]
 8008126:	f000 f839 	bl	800819c <USBD_GetLen>
 800812a:	4603      	mov	r3, r0
 800812c:	3301      	adds	r3, #1
 800812e:	b29b      	uxth	r3, r3
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	b29a      	uxth	r2, r3
 8008134:	e001      	b.n	800813a <USBD_GetString+0x42>
 8008136:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	4413      	add	r3, r2
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	7812      	ldrb	r2, [r2, #0]
 8008148:	701a      	strb	r2, [r3, #0]
  idx++;
 800814a:	7dfb      	ldrb	r3, [r7, #23]
 800814c:	3301      	adds	r3, #1
 800814e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008150:	7dfb      	ldrb	r3, [r7, #23]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	4413      	add	r3, r2
 8008156:	2203      	movs	r2, #3
 8008158:	701a      	strb	r2, [r3, #0]
  idx++;
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	3301      	adds	r3, #1
 800815e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008160:	e013      	b.n	800818a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	4413      	add	r3, r2
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	7812      	ldrb	r2, [r2, #0]
 800816c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	3301      	adds	r3, #1
 8008172:	613b      	str	r3, [r7, #16]
    idx++;
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	3301      	adds	r3, #1
 8008178:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800817a:	7dfb      	ldrb	r3, [r7, #23]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	4413      	add	r3, r2
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]
    idx++;
 8008184:	7dfb      	ldrb	r3, [r7, #23]
 8008186:	3301      	adds	r3, #1
 8008188:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1e7      	bne.n	8008162 <USBD_GetString+0x6a>
 8008192:	e000      	b.n	8008196 <USBD_GetString+0x9e>
    return;
 8008194:	bf00      	nop
  }
}
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80081ac:	e005      	b.n	80081ba <USBD_GetLen+0x1e>
  {
    len++;
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
 80081b0:	3301      	adds	r3, #1
 80081b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	3301      	adds	r3, #1
 80081b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1f5      	bne.n	80081ae <USBD_GetLen+0x12>
  }

  return len;
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2202      	movs	r2, #2
 80081e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	2100      	movs	r1, #0
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f000 fd12 	bl	8008c20 <USBD_LL_Transmit>

  return USBD_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b084      	sub	sp, #16
 800820a:	af00      	add	r7, sp, #0
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	2100      	movs	r1, #0
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 fd01 	bl	8008c20 <USBD_LL_Transmit>

  return USBD_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	2100      	movs	r1, #0
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 fd11 	bl	8008c62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2204      	movs	r2, #4
 8008256:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800825a:	2300      	movs	r3, #0
 800825c:	2200      	movs	r2, #0
 800825e:	2100      	movs	r1, #0
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fcdd 	bl	8008c20 <USBD_LL_Transmit>

  return USBD_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2205      	movs	r2, #5
 800827c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008280:	2300      	movs	r3, #0
 8008282:	2200      	movs	r2, #0
 8008284:	2100      	movs	r1, #0
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fceb 	bl	8008c62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
	...

08008298 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	4613      	mov	r3, r2
 80082a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80082a6:	2301      	movs	r3, #1
 80082a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80082ae:	4b1f      	ldr	r3, [pc, #124]	@ (800832c <FATFS_LinkDriverEx+0x94>)
 80082b0:	7a5b      	ldrb	r3, [r3, #9]
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d131      	bne.n	800831c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80082b8:	4b1c      	ldr	r3, [pc, #112]	@ (800832c <FATFS_LinkDriverEx+0x94>)
 80082ba:	7a5b      	ldrb	r3, [r3, #9]
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	461a      	mov	r2, r3
 80082c0:	4b1a      	ldr	r3, [pc, #104]	@ (800832c <FATFS_LinkDriverEx+0x94>)
 80082c2:	2100      	movs	r1, #0
 80082c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80082c6:	4b19      	ldr	r3, [pc, #100]	@ (800832c <FATFS_LinkDriverEx+0x94>)
 80082c8:	7a5b      	ldrb	r3, [r3, #9]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	4a17      	ldr	r2, [pc, #92]	@ (800832c <FATFS_LinkDriverEx+0x94>)
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80082d6:	4b15      	ldr	r3, [pc, #84]	@ (800832c <FATFS_LinkDriverEx+0x94>)
 80082d8:	7a5b      	ldrb	r3, [r3, #9]
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	461a      	mov	r2, r3
 80082de:	4b13      	ldr	r3, [pc, #76]	@ (800832c <FATFS_LinkDriverEx+0x94>)
 80082e0:	4413      	add	r3, r2
 80082e2:	79fa      	ldrb	r2, [r7, #7]
 80082e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80082e6:	4b11      	ldr	r3, [pc, #68]	@ (800832c <FATFS_LinkDriverEx+0x94>)
 80082e8:	7a5b      	ldrb	r3, [r3, #9]
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	b2d1      	uxtb	r1, r2
 80082f0:	4a0e      	ldr	r2, [pc, #56]	@ (800832c <FATFS_LinkDriverEx+0x94>)
 80082f2:	7251      	strb	r1, [r2, #9]
 80082f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80082f6:	7dbb      	ldrb	r3, [r7, #22]
 80082f8:	3330      	adds	r3, #48	@ 0x30
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	3301      	adds	r3, #1
 8008304:	223a      	movs	r2, #58	@ 0x3a
 8008306:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	3302      	adds	r3, #2
 800830c:	222f      	movs	r2, #47	@ 0x2f
 800830e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	3303      	adds	r3, #3
 8008314:	2200      	movs	r2, #0
 8008316:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800831c:	7dfb      	ldrb	r3, [r7, #23]
}
 800831e:	4618      	mov	r0, r3
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	200101b8 	.word	0x200101b8

08008330 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800833a:	2200      	movs	r2, #0
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7ff ffaa 	bl	8008298 <FATFS_LinkDriverEx>
 8008344:	4603      	mov	r3, r0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
	...

08008350 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008354:	2200      	movs	r2, #0
 8008356:	4912      	ldr	r1, [pc, #72]	@ (80083a0 <MX_USB_DEVICE_Init+0x50>)
 8008358:	4812      	ldr	r0, [pc, #72]	@ (80083a4 <MX_USB_DEVICE_Init+0x54>)
 800835a:	f7fe fcb8 	bl	8006cce <USBD_Init>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008364:	f7f8 fa24 	bl	80007b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8008368:	490f      	ldr	r1, [pc, #60]	@ (80083a8 <MX_USB_DEVICE_Init+0x58>)
 800836a:	480e      	ldr	r0, [pc, #56]	@ (80083a4 <MX_USB_DEVICE_Init+0x54>)
 800836c:	f7fe fcdf 	bl	8006d2e <USBD_RegisterClass>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008376:	f7f8 fa1b 	bl	80007b0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800837a:	490c      	ldr	r1, [pc, #48]	@ (80083ac <MX_USB_DEVICE_Init+0x5c>)
 800837c:	4809      	ldr	r0, [pc, #36]	@ (80083a4 <MX_USB_DEVICE_Init+0x54>)
 800837e:	f7fc ff5d 	bl	800523c <USBD_MSC_RegisterStorage>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008388:	f7f8 fa12 	bl	80007b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800838c:	4805      	ldr	r0, [pc, #20]	@ (80083a4 <MX_USB_DEVICE_Init+0x54>)
 800838e:	f7fe fd04 	bl	8006d9a <USBD_Start>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008398:	f7f8 fa0a 	bl	80007b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800839c:	bf00      	nop
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	200000a0 	.word	0x200000a0
 80083a4:	200101c4 	.word	0x200101c4
 80083a8:	20000020 	.word	0x20000020
 80083ac:	200000f0 	.word	0x200000f0

080083b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	4603      	mov	r3, r0
 80083b8:	6039      	str	r1, [r7, #0]
 80083ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	2212      	movs	r2, #18
 80083c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083c2:	4b03      	ldr	r3, [pc, #12]	@ (80083d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	200000bc 	.word	0x200000bc

080083d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	4603      	mov	r3, r0
 80083dc:	6039      	str	r1, [r7, #0]
 80083de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2204      	movs	r2, #4
 80083e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083e6:	4b03      	ldr	r3, [pc, #12]	@ (80083f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	200000d0 	.word	0x200000d0

080083f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	4603      	mov	r3, r0
 8008400:	6039      	str	r1, [r7, #0]
 8008402:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008404:	79fb      	ldrb	r3, [r7, #7]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d105      	bne.n	8008416 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	4907      	ldr	r1, [pc, #28]	@ (800842c <USBD_FS_ProductStrDescriptor+0x34>)
 800840e:	4808      	ldr	r0, [pc, #32]	@ (8008430 <USBD_FS_ProductStrDescriptor+0x38>)
 8008410:	f7ff fe72 	bl	80080f8 <USBD_GetString>
 8008414:	e004      	b.n	8008420 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	4904      	ldr	r1, [pc, #16]	@ (800842c <USBD_FS_ProductStrDescriptor+0x34>)
 800841a:	4805      	ldr	r0, [pc, #20]	@ (8008430 <USBD_FS_ProductStrDescriptor+0x38>)
 800841c:	f7ff fe6c 	bl	80080f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008420:	4b02      	ldr	r3, [pc, #8]	@ (800842c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	200104a0 	.word	0x200104a0
 8008430:	08008de0 	.word	0x08008de0

08008434 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	4603      	mov	r3, r0
 800843c:	6039      	str	r1, [r7, #0]
 800843e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	4904      	ldr	r1, [pc, #16]	@ (8008454 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008444:	4804      	ldr	r0, [pc, #16]	@ (8008458 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008446:	f7ff fe57 	bl	80080f8 <USBD_GetString>
  return USBD_StrDesc;
 800844a:	4b02      	ldr	r3, [pc, #8]	@ (8008454 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800844c:	4618      	mov	r0, r3
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	200104a0 	.word	0x200104a0
 8008458:	08008df4 	.word	0x08008df4

0800845c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	6039      	str	r1, [r7, #0]
 8008466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	221a      	movs	r2, #26
 800846c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800846e:	f000 f843 	bl	80084f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008472:	4b02      	ldr	r3, [pc, #8]	@ (800847c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	200000d4 	.word	0x200000d4

08008480 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	6039      	str	r1, [r7, #0]
 800848a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800848c:	79fb      	ldrb	r3, [r7, #7]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d105      	bne.n	800849e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	4907      	ldr	r1, [pc, #28]	@ (80084b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008496:	4808      	ldr	r0, [pc, #32]	@ (80084b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008498:	f7ff fe2e 	bl	80080f8 <USBD_GetString>
 800849c:	e004      	b.n	80084a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	4904      	ldr	r1, [pc, #16]	@ (80084b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084a2:	4805      	ldr	r0, [pc, #20]	@ (80084b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084a4:	f7ff fe28 	bl	80080f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084a8:	4b02      	ldr	r3, [pc, #8]	@ (80084b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	200104a0 	.word	0x200104a0
 80084b8:	08008e08 	.word	0x08008e08

080084bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	4603      	mov	r3, r0
 80084c4:	6039      	str	r1, [r7, #0]
 80084c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084c8:	79fb      	ldrb	r3, [r7, #7]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d105      	bne.n	80084da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	4907      	ldr	r1, [pc, #28]	@ (80084f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084d2:	4808      	ldr	r0, [pc, #32]	@ (80084f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084d4:	f7ff fe10 	bl	80080f8 <USBD_GetString>
 80084d8:	e004      	b.n	80084e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	4904      	ldr	r1, [pc, #16]	@ (80084f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084de:	4805      	ldr	r0, [pc, #20]	@ (80084f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084e0:	f7ff fe0a 	bl	80080f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084e4:	4b02      	ldr	r3, [pc, #8]	@ (80084f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	200104a0 	.word	0x200104a0
 80084f4:	08008e14 	.word	0x08008e14

080084f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084fe:	4b0f      	ldr	r3, [pc, #60]	@ (800853c <Get_SerialNum+0x44>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008504:	4b0e      	ldr	r3, [pc, #56]	@ (8008540 <Get_SerialNum+0x48>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800850a:	4b0e      	ldr	r3, [pc, #56]	@ (8008544 <Get_SerialNum+0x4c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4413      	add	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d009      	beq.n	8008532 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800851e:	2208      	movs	r2, #8
 8008520:	4909      	ldr	r1, [pc, #36]	@ (8008548 <Get_SerialNum+0x50>)
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 f814 	bl	8008550 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008528:	2204      	movs	r2, #4
 800852a:	4908      	ldr	r1, [pc, #32]	@ (800854c <Get_SerialNum+0x54>)
 800852c:	68b8      	ldr	r0, [r7, #8]
 800852e:	f000 f80f 	bl	8008550 <IntToUnicode>
  }
}
 8008532:	bf00      	nop
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	1fff7a10 	.word	0x1fff7a10
 8008540:	1fff7a14 	.word	0x1fff7a14
 8008544:	1fff7a18 	.word	0x1fff7a18
 8008548:	200000d6 	.word	0x200000d6
 800854c:	200000e6 	.word	0x200000e6

08008550 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	4613      	mov	r3, r2
 800855c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008562:	2300      	movs	r3, #0
 8008564:	75fb      	strb	r3, [r7, #23]
 8008566:	e027      	b.n	80085b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	0f1b      	lsrs	r3, r3, #28
 800856c:	2b09      	cmp	r3, #9
 800856e:	d80b      	bhi.n	8008588 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	0f1b      	lsrs	r3, r3, #28
 8008574:	b2da      	uxtb	r2, r3
 8008576:	7dfb      	ldrb	r3, [r7, #23]
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	4619      	mov	r1, r3
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	440b      	add	r3, r1
 8008580:	3230      	adds	r2, #48	@ 0x30
 8008582:	b2d2      	uxtb	r2, r2
 8008584:	701a      	strb	r2, [r3, #0]
 8008586:	e00a      	b.n	800859e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	0f1b      	lsrs	r3, r3, #28
 800858c:	b2da      	uxtb	r2, r3
 800858e:	7dfb      	ldrb	r3, [r7, #23]
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	4619      	mov	r1, r3
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	440b      	add	r3, r1
 8008598:	3237      	adds	r2, #55	@ 0x37
 800859a:	b2d2      	uxtb	r2, r2
 800859c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	011b      	lsls	r3, r3, #4
 80085a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	3301      	adds	r3, #1
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	4413      	add	r3, r2
 80085ae:	2200      	movs	r2, #0
 80085b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085b2:	7dfb      	ldrb	r3, [r7, #23]
 80085b4:	3301      	adds	r3, #1
 80085b6:	75fb      	strb	r3, [r7, #23]
 80085b8:	7dfa      	ldrb	r2, [r7, #23]
 80085ba:	79fb      	ldrb	r3, [r7, #7]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d3d3      	bcc.n	8008568 <IntToUnicode+0x18>
  }
}
 80085c0:	bf00      	nop
 80085c2:	bf00      	nop
 80085c4:	371c      	adds	r7, #28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	4603      	mov	r3, r0
 80085d6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 80085d8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80085da:	4618      	mov	r0, r3
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b085      	sub	sp, #20
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	4603      	mov	r3, r0
 80085ee:	60b9      	str	r1, [r7, #8]
 80085f0:	607a      	str	r2, [r7, #4]
 80085f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2280      	movs	r2, #128	@ 0x80
 80085f8:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008600:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8008602:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008604:	4618      	mov	r0, r3
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800861a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800861c:	4618      	mov	r0, r3
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	4603      	mov	r3, r0
 8008630:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 8008632:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	607a      	str	r2, [r7, #4]
 800864a:	461a      	mov	r2, r3
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]
 8008650:	4613      	mov	r3, r2
 8008652:	81bb      	strh	r3, [r7, #12]
//  UNUSED(lun);
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);

	memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	025b      	lsls	r3, r3, #9
 8008658:	4a10      	ldr	r2, [pc, #64]	@ (800869c <STORAGE_Read_FS+0x5c>)
 800865a:	1899      	adds	r1, r3, r2
 800865c:	89bb      	ldrh	r3, [r7, #12]
 800865e:	025b      	lsls	r3, r3, #9
 8008660:	461a      	mov	r2, r3
 8008662:	68b8      	ldr	r0, [r7, #8]
 8008664:	f000 fba2 	bl	8008dac <memcpy>

	for (int i = ((STORAGE_BLK_NBR*STORAGE_BLK_SIZ)/2); i < (STORAGE_BLK_NBR*STORAGE_BLK_SIZ); i++) {
 8008668:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800866c:	617b      	str	r3, [r7, #20]
 800866e:	e00c      	b.n	800868a <STORAGE_Read_FS+0x4a>
	    if (buffer[i] != 0) {
 8008670:	4a0a      	ldr	r2, [pc, #40]	@ (800869c <STORAGE_Read_FS+0x5c>)
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	4413      	add	r3, r2
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <STORAGE_Read_FS+0x44>
	    	USB_data_read_flag = 1;
 800867c:	4b08      	ldr	r3, [pc, #32]	@ (80086a0 <STORAGE_Read_FS+0x60>)
 800867e:	2201      	movs	r2, #1
 8008680:	701a      	strb	r2, [r3, #0]
	        break;
 8008682:	e006      	b.n	8008692 <STORAGE_Read_FS+0x52>
	for (int i = ((STORAGE_BLK_NBR*STORAGE_BLK_SIZ)/2); i < (STORAGE_BLK_NBR*STORAGE_BLK_SIZ); i++) {
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	3301      	adds	r3, #1
 8008688:	617b      	str	r3, [r7, #20]
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008690:	dbee      	blt.n	8008670 <STORAGE_Read_FS+0x30>
	    }
	}


  return (USBD_OK);
 8008692:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 8008694:	4618      	mov	r0, r3
 8008696:	3718      	adds	r7, #24
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	20000184 	.word	0x20000184
 80086a0:	20010184 	.word	0x20010184

080086a4 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60b9      	str	r1, [r7, #8]
 80086ac:	607a      	str	r2, [r7, #4]
 80086ae:	461a      	mov	r2, r3
 80086b0:	4603      	mov	r3, r0
 80086b2:	73fb      	strb	r3, [r7, #15]
 80086b4:	4613      	mov	r3, r2
 80086b6:	81bb      	strh	r3, [r7, #12]
//  UNUSED(lun);
//  UNUSED(buf);
//  UNUSED(blk_addr);
//  UNUSED(blk_len);

	memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	025b      	lsls	r3, r3, #9
 80086bc:	4a06      	ldr	r2, [pc, #24]	@ (80086d8 <STORAGE_Write_FS+0x34>)
 80086be:	1898      	adds	r0, r3, r2
 80086c0:	89bb      	ldrh	r3, [r7, #12]
 80086c2:	025b      	lsls	r3, r3, #9
 80086c4:	461a      	mov	r2, r3
 80086c6:	68b9      	ldr	r1, [r7, #8]
 80086c8:	f000 fb70 	bl	8008dac <memcpy>
  return (USBD_OK);
 80086cc:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	20000184 	.word	0x20000184

080086dc <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80086e0:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08a      	sub	sp, #40	@ 0x28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086f4:	f107 0314 	add.w	r3, r7, #20
 80086f8:	2200      	movs	r2, #0
 80086fa:	601a      	str	r2, [r3, #0]
 80086fc:	605a      	str	r2, [r3, #4]
 80086fe:	609a      	str	r2, [r3, #8]
 8008700:	60da      	str	r2, [r3, #12]
 8008702:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800870c:	d13a      	bne.n	8008784 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800870e:	2300      	movs	r3, #0
 8008710:	613b      	str	r3, [r7, #16]
 8008712:	4b1e      	ldr	r3, [pc, #120]	@ (800878c <HAL_PCD_MspInit+0xa0>)
 8008714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008716:	4a1d      	ldr	r2, [pc, #116]	@ (800878c <HAL_PCD_MspInit+0xa0>)
 8008718:	f043 0301 	orr.w	r3, r3, #1
 800871c:	6313      	str	r3, [r2, #48]	@ 0x30
 800871e:	4b1b      	ldr	r3, [pc, #108]	@ (800878c <HAL_PCD_MspInit+0xa0>)
 8008720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	613b      	str	r3, [r7, #16]
 8008728:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800872a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800872e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008730:	2302      	movs	r3, #2
 8008732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008734:	2300      	movs	r3, #0
 8008736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008738:	2303      	movs	r3, #3
 800873a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800873c:	230a      	movs	r3, #10
 800873e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008740:	f107 0314 	add.w	r3, r7, #20
 8008744:	4619      	mov	r1, r3
 8008746:	4812      	ldr	r0, [pc, #72]	@ (8008790 <HAL_PCD_MspInit+0xa4>)
 8008748:	f7f8 fdd8 	bl	80012fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800874c:	4b0f      	ldr	r3, [pc, #60]	@ (800878c <HAL_PCD_MspInit+0xa0>)
 800874e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008750:	4a0e      	ldr	r2, [pc, #56]	@ (800878c <HAL_PCD_MspInit+0xa0>)
 8008752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008756:	6353      	str	r3, [r2, #52]	@ 0x34
 8008758:	2300      	movs	r3, #0
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	4b0b      	ldr	r3, [pc, #44]	@ (800878c <HAL_PCD_MspInit+0xa0>)
 800875e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008760:	4a0a      	ldr	r2, [pc, #40]	@ (800878c <HAL_PCD_MspInit+0xa0>)
 8008762:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008766:	6453      	str	r3, [r2, #68]	@ 0x44
 8008768:	4b08      	ldr	r3, [pc, #32]	@ (800878c <HAL_PCD_MspInit+0xa0>)
 800876a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800876c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008770:	60fb      	str	r3, [r7, #12]
 8008772:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008774:	2200      	movs	r2, #0
 8008776:	2100      	movs	r1, #0
 8008778:	2043      	movs	r0, #67	@ 0x43
 800877a:	f7f8 fa82 	bl	8000c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800877e:	2043      	movs	r0, #67	@ 0x43
 8008780:	f7f8 fa9b 	bl	8000cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008784:	bf00      	nop
 8008786:	3728      	adds	r7, #40	@ 0x28
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	40023800 	.word	0x40023800
 8008790:	40020000 	.word	0x40020000

08008794 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80087a8:	4619      	mov	r1, r3
 80087aa:	4610      	mov	r0, r2
 80087ac:	f7fe fb42 	bl	8006e34 <USBD_LL_SetupStage>
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80087ca:	78fa      	ldrb	r2, [r7, #3]
 80087cc:	6879      	ldr	r1, [r7, #4]
 80087ce:	4613      	mov	r3, r2
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	4413      	add	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	440b      	add	r3, r1
 80087d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	4619      	mov	r1, r3
 80087e2:	f7fe fb7c 	bl	8006ede <USBD_LL_DataOutStage>
}
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	460b      	mov	r3, r1
 80087f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008800:	78fa      	ldrb	r2, [r7, #3]
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	4613      	mov	r3, r2
 8008806:	00db      	lsls	r3, r3, #3
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	440b      	add	r3, r1
 800880e:	3320      	adds	r3, #32
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	78fb      	ldrb	r3, [r7, #3]
 8008814:	4619      	mov	r1, r3
 8008816:	f7fe fc15 	bl	8007044 <USBD_LL_DataInStage>
}
 800881a:	bf00      	nop
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b082      	sub	sp, #8
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe fd4f 	bl	80072d4 <USBD_LL_SOF>
}
 8008836:	bf00      	nop
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008846:	2301      	movs	r3, #1
 8008848:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	79db      	ldrb	r3, [r3, #7]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d102      	bne.n	8008858 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]
 8008856:	e008      	b.n	800886a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	79db      	ldrb	r3, [r3, #7]
 800885c:	2b02      	cmp	r3, #2
 800885e:	d102      	bne.n	8008866 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008860:	2301      	movs	r3, #1
 8008862:	73fb      	strb	r3, [r7, #15]
 8008864:	e001      	b.n	800886a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008866:	f7f7 ffa3 	bl	80007b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008870:	7bfa      	ldrb	r2, [r7, #15]
 8008872:	4611      	mov	r1, r2
 8008874:	4618      	mov	r0, r3
 8008876:	f7fe fce9 	bl	800724c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008880:	4618      	mov	r0, r3
 8008882:	f7fe fc91 	bl	80071a8 <USBD_LL_Reset>
}
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
	...

08008890 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe fce4 	bl	800726c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	6812      	ldr	r2, [r2, #0]
 80088b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80088b6:	f043 0301 	orr.w	r3, r3, #1
 80088ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	7adb      	ldrb	r3, [r3, #11]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d005      	beq.n	80088d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088c4:	4b04      	ldr	r3, [pc, #16]	@ (80088d8 <HAL_PCD_SuspendCallback+0x48>)
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	4a03      	ldr	r2, [pc, #12]	@ (80088d8 <HAL_PCD_SuspendCallback+0x48>)
 80088ca:	f043 0306 	orr.w	r3, r3, #6
 80088ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	e000ed00 	.word	0xe000ed00

080088dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fcda 	bl	80072a4 <USBD_LL_Resume>
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800890a:	78fa      	ldrb	r2, [r7, #3]
 800890c:	4611      	mov	r1, r2
 800890e:	4618      	mov	r0, r3
 8008910:	f7fe fd32 	bl	8007378 <USBD_LL_IsoOUTIncomplete>
}
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	460b      	mov	r3, r1
 8008926:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800892e:	78fa      	ldrb	r2, [r7, #3]
 8008930:	4611      	mov	r1, r2
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe fcee 	bl	8007314 <USBD_LL_IsoINIncomplete>
}
 8008938:	bf00      	nop
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe fd44 	bl	80073dc <USBD_LL_DevConnected>
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800896a:	4618      	mov	r0, r3
 800896c:	f7fe fd41 	bl	80073f2 <USBD_LL_DevDisconnected>
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d13c      	bne.n	8008a02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008988:	4a20      	ldr	r2, [pc, #128]	@ (8008a0c <USBD_LL_Init+0x94>)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a1e      	ldr	r2, [pc, #120]	@ (8008a0c <USBD_LL_Init+0x94>)
 8008994:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008998:	4b1c      	ldr	r3, [pc, #112]	@ (8008a0c <USBD_LL_Init+0x94>)
 800899a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800899e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80089a0:	4b1a      	ldr	r3, [pc, #104]	@ (8008a0c <USBD_LL_Init+0x94>)
 80089a2:	2204      	movs	r2, #4
 80089a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80089a6:	4b19      	ldr	r3, [pc, #100]	@ (8008a0c <USBD_LL_Init+0x94>)
 80089a8:	2202      	movs	r2, #2
 80089aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089ac:	4b17      	ldr	r3, [pc, #92]	@ (8008a0c <USBD_LL_Init+0x94>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089b2:	4b16      	ldr	r3, [pc, #88]	@ (8008a0c <USBD_LL_Init+0x94>)
 80089b4:	2202      	movs	r2, #2
 80089b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089b8:	4b14      	ldr	r3, [pc, #80]	@ (8008a0c <USBD_LL_Init+0x94>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80089be:	4b13      	ldr	r3, [pc, #76]	@ (8008a0c <USBD_LL_Init+0x94>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80089c4:	4b11      	ldr	r3, [pc, #68]	@ (8008a0c <USBD_LL_Init+0x94>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80089ca:	4b10      	ldr	r3, [pc, #64]	@ (8008a0c <USBD_LL_Init+0x94>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80089d0:	4b0e      	ldr	r3, [pc, #56]	@ (8008a0c <USBD_LL_Init+0x94>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80089d6:	480d      	ldr	r0, [pc, #52]	@ (8008a0c <USBD_LL_Init+0x94>)
 80089d8:	f7f8 fe6d 	bl	80016b6 <HAL_PCD_Init>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80089e2:	f7f7 fee5 	bl	80007b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80089e6:	2180      	movs	r1, #128	@ 0x80
 80089e8:	4808      	ldr	r0, [pc, #32]	@ (8008a0c <USBD_LL_Init+0x94>)
 80089ea:	f7fa f8c6 	bl	8002b7a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80089ee:	2240      	movs	r2, #64	@ 0x40
 80089f0:	2100      	movs	r1, #0
 80089f2:	4806      	ldr	r0, [pc, #24]	@ (8008a0c <USBD_LL_Init+0x94>)
 80089f4:	f7fa f87a 	bl	8002aec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80089f8:	2280      	movs	r2, #128	@ 0x80
 80089fa:	2101      	movs	r1, #1
 80089fc:	4803      	ldr	r0, [pc, #12]	@ (8008a0c <USBD_LL_Init+0x94>)
 80089fe:	f7fa f875 	bl	8002aec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	200106a0 	.word	0x200106a0

08008a10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7f8 ff54 	bl	80018d4 <HAL_PCD_Start>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 f962 	bl	8008cfc <USBD_Get_USB_Status>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	4608      	mov	r0, r1
 8008a50:	4611      	mov	r1, r2
 8008a52:	461a      	mov	r2, r3
 8008a54:	4603      	mov	r3, r0
 8008a56:	70fb      	strb	r3, [r7, #3]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	70bb      	strb	r3, [r7, #2]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008a6e:	78bb      	ldrb	r3, [r7, #2]
 8008a70:	883a      	ldrh	r2, [r7, #0]
 8008a72:	78f9      	ldrb	r1, [r7, #3]
 8008a74:	f7f9 fc28 	bl	80022c8 <HAL_PCD_EP_Open>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 f93c 	bl	8008cfc <USBD_Get_USB_Status>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008aac:	78fa      	ldrb	r2, [r7, #3]
 8008aae:	4611      	mov	r1, r2
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7f9 fc73 	bl	800239c <HAL_PCD_EP_Close>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 f91d 	bl	8008cfc <USBD_Get_USB_Status>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008aea:	78fa      	ldrb	r2, [r7, #3]
 8008aec:	4611      	mov	r1, r2
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7f9 fe15 	bl	800271e <HAL_PCD_EP_Flush>
 8008af4:	4603      	mov	r3, r0
 8008af6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 f8fe 	bl	8008cfc <USBD_Get_USB_Status>
 8008b00:	4603      	mov	r3, r0
 8008b02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	460b      	mov	r3, r1
 8008b18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b28:	78fa      	ldrb	r2, [r7, #3]
 8008b2a:	4611      	mov	r1, r2
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7f9 fd0c 	bl	800254a <HAL_PCD_EP_SetStall>
 8008b32:	4603      	mov	r3, r0
 8008b34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 f8df 	bl	8008cfc <USBD_Get_USB_Status>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b42:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	460b      	mov	r3, r1
 8008b56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b66:	78fa      	ldrb	r2, [r7, #3]
 8008b68:	4611      	mov	r1, r2
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7f9 fd50 	bl	8002610 <HAL_PCD_EP_ClrStall>
 8008b70:	4603      	mov	r3, r0
 8008b72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 f8c0 	bl	8008cfc <USBD_Get_USB_Status>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b085      	sub	sp, #20
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	460b      	mov	r3, r1
 8008b94:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b9c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	da0b      	bge.n	8008bbe <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ba6:	78fb      	ldrb	r3, [r7, #3]
 8008ba8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bac:	68f9      	ldr	r1, [r7, #12]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	00db      	lsls	r3, r3, #3
 8008bb2:	4413      	add	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	440b      	add	r3, r1
 8008bb8:	3316      	adds	r3, #22
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	e00b      	b.n	8008bd6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bbe:	78fb      	ldrb	r3, [r7, #3]
 8008bc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bc4:	68f9      	ldr	r1, [r7, #12]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	00db      	lsls	r3, r3, #3
 8008bca:	4413      	add	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	440b      	add	r3, r1
 8008bd0:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008bd4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bfc:	78fa      	ldrb	r2, [r7, #3]
 8008bfe:	4611      	mov	r1, r2
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7f9 fb3d 	bl	8002280 <HAL_PCD_SetAddress>
 8008c06:	4603      	mov	r3, r0
 8008c08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 f875 	bl	8008cfc <USBD_Get_USB_Status>
 8008c12:	4603      	mov	r3, r0
 8008c14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	607a      	str	r2, [r7, #4]
 8008c2a:	603b      	str	r3, [r7, #0]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c3e:	7af9      	ldrb	r1, [r7, #11]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	f7f9 fc47 	bl	80024d6 <HAL_PCD_EP_Transmit>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c4c:	7dfb      	ldrb	r3, [r7, #23]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 f854 	bl	8008cfc <USBD_Get_USB_Status>
 8008c54:	4603      	mov	r3, r0
 8008c56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c58:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b086      	sub	sp, #24
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	603b      	str	r3, [r7, #0]
 8008c6e:	460b      	mov	r3, r1
 8008c70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c80:	7af9      	ldrb	r1, [r7, #11]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	f7f9 fbd3 	bl	8002430 <HAL_PCD_EP_Receive>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 f833 	bl	8008cfc <USBD_Get_USB_Status>
 8008c96:	4603      	mov	r3, r0
 8008c98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cb6:	78fa      	ldrb	r2, [r7, #3]
 8008cb8:	4611      	mov	r1, r2
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7f9 fbf3 	bl	80024a6 <HAL_PCD_EP_GetRxCount>
 8008cc0:	4603      	mov	r3, r0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008cd4:	4b03      	ldr	r3, [pc, #12]	@ (8008ce4 <USBD_static_malloc+0x18>)
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	20010b84 	.word	0x20010b84

08008ce8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]

}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d0a:	79fb      	ldrb	r3, [r7, #7]
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d817      	bhi.n	8008d40 <USBD_Get_USB_Status+0x44>
 8008d10:	a201      	add	r2, pc, #4	@ (adr r2, 8008d18 <USBD_Get_USB_Status+0x1c>)
 8008d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d16:	bf00      	nop
 8008d18:	08008d29 	.word	0x08008d29
 8008d1c:	08008d2f 	.word	0x08008d2f
 8008d20:	08008d35 	.word	0x08008d35
 8008d24:	08008d3b 	.word	0x08008d3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d2c:	e00b      	b.n	8008d46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	73fb      	strb	r3, [r7, #15]
    break;
 8008d32:	e008      	b.n	8008d46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d34:	2301      	movs	r3, #1
 8008d36:	73fb      	strb	r3, [r7, #15]
    break;
 8008d38:	e005      	b.n	8008d46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d3e:	e002      	b.n	8008d46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d40:	2303      	movs	r3, #3
 8008d42:	73fb      	strb	r3, [r7, #15]
    break;
 8008d44:	bf00      	nop
  }
  return usb_status;
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <memset>:
 8008d54:	4402      	add	r2, r0
 8008d56:	4603      	mov	r3, r0
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d100      	bne.n	8008d5e <memset+0xa>
 8008d5c:	4770      	bx	lr
 8008d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d62:	e7f9      	b.n	8008d58 <memset+0x4>

08008d64 <__libc_init_array>:
 8008d64:	b570      	push	{r4, r5, r6, lr}
 8008d66:	4d0d      	ldr	r5, [pc, #52]	@ (8008d9c <__libc_init_array+0x38>)
 8008d68:	4c0d      	ldr	r4, [pc, #52]	@ (8008da0 <__libc_init_array+0x3c>)
 8008d6a:	1b64      	subs	r4, r4, r5
 8008d6c:	10a4      	asrs	r4, r4, #2
 8008d6e:	2600      	movs	r6, #0
 8008d70:	42a6      	cmp	r6, r4
 8008d72:	d109      	bne.n	8008d88 <__libc_init_array+0x24>
 8008d74:	4d0b      	ldr	r5, [pc, #44]	@ (8008da4 <__libc_init_array+0x40>)
 8008d76:	4c0c      	ldr	r4, [pc, #48]	@ (8008da8 <__libc_init_array+0x44>)
 8008d78:	f000 f826 	bl	8008dc8 <_init>
 8008d7c:	1b64      	subs	r4, r4, r5
 8008d7e:	10a4      	asrs	r4, r4, #2
 8008d80:	2600      	movs	r6, #0
 8008d82:	42a6      	cmp	r6, r4
 8008d84:	d105      	bne.n	8008d92 <__libc_init_array+0x2e>
 8008d86:	bd70      	pop	{r4, r5, r6, pc}
 8008d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d8c:	4798      	blx	r3
 8008d8e:	3601      	adds	r6, #1
 8008d90:	e7ee      	b.n	8008d70 <__libc_init_array+0xc>
 8008d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d96:	4798      	blx	r3
 8008d98:	3601      	adds	r6, #1
 8008d9a:	e7f2      	b.n	8008d82 <__libc_init_array+0x1e>
 8008d9c:	08008e60 	.word	0x08008e60
 8008da0:	08008e60 	.word	0x08008e60
 8008da4:	08008e60 	.word	0x08008e60
 8008da8:	08008e64 	.word	0x08008e64

08008dac <memcpy>:
 8008dac:	440a      	add	r2, r1
 8008dae:	4291      	cmp	r1, r2
 8008db0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008db4:	d100      	bne.n	8008db8 <memcpy+0xc>
 8008db6:	4770      	bx	lr
 8008db8:	b510      	push	{r4, lr}
 8008dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dc2:	4291      	cmp	r1, r2
 8008dc4:	d1f9      	bne.n	8008dba <memcpy+0xe>
 8008dc6:	bd10      	pop	{r4, pc}

08008dc8 <_init>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	bf00      	nop
 8008dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dce:	bc08      	pop	{r3}
 8008dd0:	469e      	mov	lr, r3
 8008dd2:	4770      	bx	lr

08008dd4 <_fini>:
 8008dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd6:	bf00      	nop
 8008dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dda:	bc08      	pop	{r3}
 8008ddc:	469e      	mov	lr, r3
 8008dde:	4770      	bx	lr
